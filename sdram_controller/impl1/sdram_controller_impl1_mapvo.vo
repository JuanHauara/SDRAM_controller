
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.14.0.75.2

// ldbanno -n Verilog -o sdram_controller_impl1_mapvo.vo -w -neg -gui -msgset C:/lscc/diamond/projects/SDRAM_controller/sdram_controller/promote.xml sdram_controller_impl1_map.ncd 
// Netlist created on Tue Mar 25 12:04:38 2025
// Netlist written on Tue Mar 25 12:04:39 2025
// Design is for device LCMXO2-4000HC
// Design is for package CABGA332
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module sdram_controller ( clk, reset_n_pin, soc_side_busy_pin, 
                          soc_side_ready_pin, soc_side_addr_pin, 
                          soc_side_wr_data_pin, soc_side_wr_mask_pin, 
                          soc_side_wr_en_pin, soc_side_rd_data_pin, 
                          soc_side_rd_en_pin, ram_side_addr_pin, 
                          ram_side_bank_addr_pin, ram_side_chip0_ldqm_pin, 
                          ram_side_chip0_udqm_pin, ram_side_chip0_data_pin, 
                          ram_side_chip1_ldqm_pin, ram_side_chip1_udqm_pin, 
                          ram_side_chip1_data_pin, ram_side_cs_n_pin, 
                          ram_side_ras_n_pin, ram_side_cas_n_pin, 
                          ram_side_wr_en_pin, ram_side_ck_en_pin );
  input  clk, reset_n_pin;
  input  [22:0] soc_side_addr_pin;
  input  [31:0] soc_side_wr_data_pin;
  input  [3:0] soc_side_wr_mask_pin;
  input  soc_side_wr_en_pin, soc_side_rd_en_pin;
  output soc_side_busy_pin, soc_side_ready_pin;
  output [31:0] soc_side_rd_data_pin;
  output [11:0] ram_side_addr_pin;
  output [1:0] ram_side_bank_addr_pin;
  output ram_side_chip0_ldqm_pin, ram_side_chip0_udqm_pin, 
         ram_side_chip1_ldqm_pin, ram_side_chip1_udqm_pin, ram_side_cs_n_pin, 
         ram_side_ras_n_pin, ram_side_cas_n_pin, ram_side_wr_en_pin, 
         ram_side_ck_en_pin;
  inout  [15:0] ram_side_chip0_data_pin;
  inout  [15:0] ram_side_chip1_data_pin;
  wire   \refresh_counter[0] , next_refresh_counter_cry_0, N_582, 
         next_state_0_sqmuxa_5_i_a2, \delay_counter[14] , \delay_counter[13] , 
         \next_delay_counter[13] , un36_0_a2_0_RNIQTQL9, clk_c, 
         un1_delay_counter_16_cry_12, un1_delay_counter_16_cry_13_0_S1, 
         \delay_counter[12] , \delay_counter[11] , \next_delay_counter[11] , 
         un1_delay_counter_16_cry_10, un1_delay_counter_16_cry_11_0_S1, 
         \delay_counter[10] , \delay_counter[9] , un1_delay_counter_16_cry_8, 
         un1_delay_counter_16_cry_9_0_S0, un1_delay_counter_16_cry_9_0_S1, 
         \delay_counter[8] , \delay_counter[7] , un1_delay_counter_16_cry_6, 
         un1_delay_counter_16_cry_7_0_S0, un1_delay_counter_16_cry_7_0_S1, 
         \delay_counter[6] , \delay_counter[5] , un1_delay_counter_16_cry_4, 
         un1_delay_counter_16_cry_5_0_S0, un1_delay_counter_16_cry_5_0_S1, 
         \delay_counter[4] , \delay_counter[3] , \next_delay_counter[4] , 
         \next_delay_counter[3] , un1_delay_counter_16_cry_2, 
         \delay_counter[2] , \delay_counter[1] , un1_delay_counter_16_cry_0, 
         un1_delay_counter_16_cry_1_0_S0, un1_delay_counter_16_cry_1_0_S1, 
         \delay_counter[0] , \refresh_counter[15] , \refresh_counter_3[15] , 
         \state_RNI2PV5A[14] , next_refresh_counter_cry_14, 
         \refresh_counter[14] , \refresh_counter[13] , \refresh_counter_3[14] , 
         \refresh_counter_3[13] , next_refresh_counter_cry_12, 
         \refresh_counter[12] , \refresh_counter[11] , \refresh_counter_3[12] , 
         \refresh_counter_3[11] , next_refresh_counter_cry_10, 
         \refresh_counter[10] , \refresh_counter[9] , \refresh_counter_3[10] , 
         \refresh_counter_3[9] , next_refresh_counter_cry_8, 
         \refresh_counter[8] , \refresh_counter[7] , \refresh_counter_3[8] , 
         \refresh_counter_3[7] , next_refresh_counter_cry_6, 
         \refresh_counter[6] , \refresh_counter[5] , \refresh_counter_3[6] , 
         \refresh_counter_3[5] , next_refresh_counter_cry_4, 
         \refresh_counter[4] , \refresh_counter[3] , \refresh_counter_3[4] , 
         \refresh_counter_3[3] , next_refresh_counter_cry_2, 
         \refresh_counter[2] , \refresh_counter[1] , \refresh_counter_3[2] , 
         \refresh_counter_3[1] , \state[23] , \state[24] , \cas_counter[0] , 
         \cas_counter[1] , N_166_i, N_553_i, N_167_i, \state[14] , 
         reset_n_pin_c, \state[0] , \state_srsts_i_a2[12] , \state[11] , 
         \next_command_0_tz[0] , next_state_0_sqmuxa_7, \next_command[0] , 
         \command[0] , un36_0_a2_1, un36_0_a2_0, N_614, 
         un1_delay_counter_16_axb_0, \state[15] , \state[6] , N_536, 
         \next_delay_counter[1] , \next_delay_counter[0] , 
         \next_delay_counter[5] , \next_delay_counter[2] , 
         \next_delay_counter[7] , \next_delay_counter[6] , 
         \next_delay_counter[9] , \next_delay_counter[8] , 
         \next_delay_counter[12] , \next_delay_counter[10] , \state[10] , 
         \state[20] , \state[5] , \next_delay_counter[14] , 
         next_state_0_sqmuxa_6, next_state19_axb1, next_state19_axb0, 
         next_state19, \state[7] , \init_refresh_counter_RNO[1] , 
         \init_refresh_counter_RNO[0] , un1_reset_n_pin_3_0, next_state19_axb2, 
         \init_refresh_counter_RNO[2] , \refresh_counter_i[0] , 
         un1_refresh_counterlt4, \state[1] , soc_side_wr_en_pin_c, 
         soc_side_rd_en_pin_c, N_622, N_580, N_421_i, \state_nss[0] , 
         \state[3] , \state[2] , \state_nss[3] , N_457_i, N_514, \state[4] , 
         \state_nss[5] , N_454_i, N_601, N_450_i, \state_nss[6] , \state[9] , 
         \state[8] , \state_nss[9] , N_448_i, N_444_i, \state_nss[10] , 
         \state[13] , \state[12] , N_440_i, N_442_i, \state_nss[15] , N_438_i, 
         \state[21] , \state[16] , \state_nss[17] , N_435_i, \state[17] , 
         \state[19] , \state[18] , N_430_i, N_432_i, \state[22] , N_427_i, 
         \state_nss[20] , \state_nss[23] , \state_nss[22] , N_556, N_423_i, 
         \next_command_i_0[5] , N_145, N_144, N_141_i, 
         \soc_side_addr_pin_m[14] , \soc_side_addr_pin_c[5] , N_609, 
         \soc_side_addr_pin_c[14] , \ram_side_addr_pin_c[5] , 
         \soc_side_addr_pin_m[13] , \soc_side_addr_pin_c[4] , 
         \soc_side_addr_pin_c[13] , \ram_side_addr_pin_c[4] , N_602, 
         \soc_side_addr_pin_c[19] , \addr_reg[10] , 
         next_state_0_sqmuxa_5_i_a2_10, next_state_0_sqmuxa_5_i_a2_9, 
         next_state_0_sqmuxa_5_i_a2_8, next_state_0_sqmuxa_5_i_a2_7, 
         ready_reg_0io_RNO, N_524, next_state_1_sqmuxa_3, N_150, N_137_i, 
         un1_refresh_counterlt10, \state_srsts_i_a2_1_0[12] , N_151_i, 
         un1_next_init_refresh_counter_0_sqmuxa_i_a2_3, 
         un1_next_init_refresh_counter_0_sqmuxa_i_a2_0, in_write_cycle_i_a2_0, 
         \soc_side_wr_mask_pin_c[3] , N_537, N_535, ram_side_chip1_udqm_pin_c, 
         in_read_cycle_i_a2_0, \soc_side_wr_mask_pin_c[2] , 
         ram_side_chip1_ldqm_pin_c, un1_refresh_counterlt7, 
         ram_side_addr_pin_1_0_a2_3, ram_side_addr_pin_1_0_a2_2, 
         \ram_side_addr_pin_c[10] , \soc_side_addr_pin_c[9] , 
         \soc_side_addr_pin_c[0] , \ram_side_addr_pin_c[0] , 
         ram_side_addr_pin_1_0_a2_1, \soc_side_addr_pin_c[22] , 
         \soc_side_addr_pin_c[21] , \ram_side_bank_addr_pin_c[0] , 
         \ram_side_bank_addr_pin_c[1] , \soc_side_addr_pin_c[18] , 
         \soc_side_addr_pin_c[20] , \ram_side_addr_pin_c[11] , 
         \ram_side_addr_pin_c[9] , \soc_side_wr_mask_pin_c[0] , 
         \soc_side_wr_mask_pin_c[1] , ram_side_chip0_udqm_pin_c, 
         ram_side_chip0_ldqm_pin_c, \soc_side_addr_pin_c[17] , 
         \soc_side_addr_pin_c[8] , \soc_side_addr_pin_c[10] , 
         \soc_side_addr_pin_c[1] , \ram_side_addr_pin_c[1] , 
         \ram_side_addr_pin_c[8] , \soc_side_addr_pin_c[16] , 
         \soc_side_addr_pin_c[7] , \soc_side_addr_pin_c[11] , 
         \soc_side_addr_pin_c[2] , \ram_side_addr_pin_c[2] , 
         \ram_side_addr_pin_c[7] , \soc_side_addr_pin_c[15] , 
         \soc_side_addr_pin_c[6] , \soc_side_addr_pin_c[12] , 
         \soc_side_addr_pin_c[3] , \ram_side_addr_pin_c[3] , 
         \ram_side_addr_pin_c[6] , un1_next_ready_reg_1_sqmuxa_0_a2, 
         \state_i[0] , VCC, GND, \ram_side_chip0_data_pin_in[0] , 
         \wr_data_reg[0] , soc_side_busy_pin_c, ram_side_wr_en_pin_c, 
         ram_side_cas_n_pin_c, ram_side_ras_n_pin_c, 
         \ram_side_chip1_data_pin_in[15] , \wr_data_reg[31] , 
         \ram_side_chip1_data_pin_in[14] , \wr_data_reg[30] , 
         \ram_side_chip1_data_pin_in[13] , \wr_data_reg[29] , 
         \ram_side_chip1_data_pin_in[12] , \wr_data_reg[28] , 
         \ram_side_chip1_data_pin_in[11] , \wr_data_reg[27] , 
         \ram_side_chip1_data_pin_in[10] , \wr_data_reg[26] , 
         \ram_side_chip1_data_pin_in[9] , \wr_data_reg[25] , 
         \ram_side_chip1_data_pin_in[8] , \wr_data_reg[24] , 
         \ram_side_chip1_data_pin_in[7] , \wr_data_reg[23] , 
         \ram_side_chip1_data_pin_in[6] , \wr_data_reg[22] , 
         \ram_side_chip1_data_pin_in[5] , \wr_data_reg[21] , 
         \ram_side_chip1_data_pin_in[4] , \wr_data_reg[20] , 
         \ram_side_chip1_data_pin_in[3] , \wr_data_reg[19] , 
         \ram_side_chip1_data_pin_in[2] , \wr_data_reg[18] , 
         \ram_side_chip1_data_pin_in[1] , \wr_data_reg[17] , 
         \ram_side_chip1_data_pin_in[0] , \wr_data_reg[16] , 
         \ram_side_chip0_data_pin_in[15] , \wr_data_reg[15] , 
         \ram_side_chip0_data_pin_in[14] , \wr_data_reg[14] , 
         \ram_side_chip0_data_pin_in[13] , \wr_data_reg[13] , 
         \ram_side_chip0_data_pin_in[12] , \wr_data_reg[12] , 
         \ram_side_chip0_data_pin_in[11] , \wr_data_reg[11] , 
         \ram_side_chip0_data_pin_in[10] , \wr_data_reg[10] , 
         \ram_side_chip0_data_pin_in[9] , \wr_data_reg[9] , 
         \ram_side_chip0_data_pin_in[8] , \wr_data_reg[8] , 
         \ram_side_chip0_data_pin_in[7] , \wr_data_reg[7] , 
         \ram_side_chip0_data_pin_in[6] , \wr_data_reg[6] , 
         \ram_side_chip0_data_pin_in[5] , \wr_data_reg[5] , 
         \ram_side_chip0_data_pin_in[4] , \wr_data_reg[4] , 
         \ram_side_chip0_data_pin_in[3] , \wr_data_reg[3] , 
         \ram_side_chip0_data_pin_in[2] , \wr_data_reg[2] , 
         \ram_side_chip0_data_pin_in[1] , \wr_data_reg[1] , 
         \soc_side_rd_data_pin_c[31] , \soc_side_rd_data_pin_c[30] , 
         \soc_side_rd_data_pin_c[29] , \soc_side_rd_data_pin_c[28] , 
         \soc_side_rd_data_pin_c[27] , \soc_side_rd_data_pin_c[26] , 
         \soc_side_rd_data_pin_c[25] , \soc_side_rd_data_pin_c[24] , 
         \soc_side_rd_data_pin_c[23] , \soc_side_rd_data_pin_c[22] , 
         \soc_side_rd_data_pin_c[21] , \soc_side_rd_data_pin_c[20] , 
         \soc_side_rd_data_pin_c[19] , \soc_side_rd_data_pin_c[18] , 
         \soc_side_rd_data_pin_c[17] , \soc_side_rd_data_pin_c[16] , 
         \soc_side_rd_data_pin_c[15] , \soc_side_rd_data_pin_c[14] , 
         \soc_side_rd_data_pin_c[13] , \soc_side_rd_data_pin_c[12] , 
         \soc_side_rd_data_pin_c[11] , \soc_side_rd_data_pin_c[10] , 
         \soc_side_rd_data_pin_c[9] , \soc_side_rd_data_pin_c[8] , 
         \soc_side_rd_data_pin_c[7] , \soc_side_rd_data_pin_c[6] , 
         \soc_side_rd_data_pin_c[5] , \soc_side_rd_data_pin_c[4] , 
         \soc_side_rd_data_pin_c[3] , \soc_side_rd_data_pin_c[2] , 
         \soc_side_rd_data_pin_c[1] , \soc_side_rd_data_pin_c[0] , 
         \soc_side_wr_data_pin_c[31] , \soc_side_wr_data_pin_c[30] , 
         \soc_side_wr_data_pin_c[29] , \soc_side_wr_data_pin_c[28] , 
         \soc_side_wr_data_pin_c[27] , \soc_side_wr_data_pin_c[26] , 
         \soc_side_wr_data_pin_c[25] , \soc_side_wr_data_pin_c[24] , 
         \soc_side_wr_data_pin_c[23] , \soc_side_wr_data_pin_c[22] , 
         \soc_side_wr_data_pin_c[21] , \soc_side_wr_data_pin_c[20] , 
         \soc_side_wr_data_pin_c[19] , \soc_side_wr_data_pin_c[18] , 
         \soc_side_wr_data_pin_c[17] , \soc_side_wr_data_pin_c[16] , 
         \soc_side_wr_data_pin_c[15] , \soc_side_wr_data_pin_c[14] , 
         \soc_side_wr_data_pin_c[13] , \soc_side_wr_data_pin_c[12] , 
         \soc_side_wr_data_pin_c[11] , \soc_side_wr_data_pin_c[10] , 
         \soc_side_wr_data_pin_c[9] , \soc_side_wr_data_pin_c[8] , 
         \soc_side_wr_data_pin_c[7] , \soc_side_wr_data_pin_c[6] , 
         \soc_side_wr_data_pin_c[5] , \soc_side_wr_data_pin_c[4] , 
         \soc_side_wr_data_pin_c[3] , \soc_side_wr_data_pin_c[2] , 
         \soc_side_wr_data_pin_c[1] , \soc_side_wr_data_pin_c[0] , 
         soc_side_ready_pin_c, VCCI;

  SLICE_0 SLICE_0( .A1(\refresh_counter[0] ), .FCO(next_refresh_counter_cry_0));
  SLICE_1 SLICE_1( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[14] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[13] ), .DI0(\next_delay_counter[13] ), 
    .LSR(un36_0_a2_0_RNIQTQL9), .CLK(clk_c), .FCI(un1_delay_counter_16_cry_12), 
    .F0(\next_delay_counter[13] ), .Q0(\delay_counter[13] ), 
    .F1(un1_delay_counter_16_cry_13_0_S1));
  SLICE_2 SLICE_2( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[12] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[11] ), .DI0(\next_delay_counter[11] ), 
    .LSR(un36_0_a2_0_RNIQTQL9), .CLK(clk_c), .FCI(un1_delay_counter_16_cry_10), 
    .F0(\next_delay_counter[11] ), .Q0(\delay_counter[11] ), 
    .F1(un1_delay_counter_16_cry_11_0_S1), .FCO(un1_delay_counter_16_cry_12));
  SLICE_3 SLICE_3( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[10] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[9] ), .FCI(un1_delay_counter_16_cry_8), 
    .F0(un1_delay_counter_16_cry_9_0_S0), .F1(un1_delay_counter_16_cry_9_0_S1), 
    .FCO(un1_delay_counter_16_cry_10));
  SLICE_4 SLICE_4( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[8] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[7] ), .FCI(un1_delay_counter_16_cry_6), 
    .F0(un1_delay_counter_16_cry_7_0_S0), .F1(un1_delay_counter_16_cry_7_0_S1), 
    .FCO(un1_delay_counter_16_cry_8));
  SLICE_5 SLICE_5( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[6] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[5] ), .FCI(un1_delay_counter_16_cry_4), 
    .F0(un1_delay_counter_16_cry_5_0_S0), .F1(un1_delay_counter_16_cry_5_0_S1), 
    .FCO(un1_delay_counter_16_cry_6));
  SLICE_6 SLICE_6( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[4] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[3] ), .DI1(\next_delay_counter[4] ), 
    .DI0(\next_delay_counter[3] ), .LSR(un36_0_a2_0_RNIQTQL9), .CLK(clk_c), 
    .FCI(un1_delay_counter_16_cry_2), .F0(\next_delay_counter[3] ), 
    .Q0(\delay_counter[3] ), .F1(\next_delay_counter[4] ), 
    .Q1(\delay_counter[4] ), .FCO(un1_delay_counter_16_cry_4));
  SLICE_7 SLICE_7( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[2] ), .C0(N_582), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(\delay_counter[1] ), .FCI(un1_delay_counter_16_cry_0), 
    .F0(un1_delay_counter_16_cry_1_0_S0), .F1(un1_delay_counter_16_cry_1_0_S1), 
    .FCO(un1_delay_counter_16_cry_2));
  SLICE_8 SLICE_8( .C1(N_582), .B1(next_state_0_sqmuxa_5_i_a2), 
    .A1(\delay_counter[0] ), .FCO(un1_delay_counter_16_cry_0));
  SLICE_9 SLICE_9( .A0(\refresh_counter[15] ), .DI0(\refresh_counter_3[15] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_14), 
    .F0(\refresh_counter_3[15] ), .Q0(\refresh_counter[15] ));
  SLICE_10 SLICE_10( .A1(\refresh_counter[14] ), .A0(\refresh_counter[13] ), 
    .DI1(\refresh_counter_3[14] ), .DI0(\refresh_counter_3[13] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_12), 
    .F0(\refresh_counter_3[13] ), .Q0(\refresh_counter[13] ), 
    .F1(\refresh_counter_3[14] ), .Q1(\refresh_counter[14] ), 
    .FCO(next_refresh_counter_cry_14));
  SLICE_11 SLICE_11( .A1(\refresh_counter[12] ), .A0(\refresh_counter[11] ), 
    .DI1(\refresh_counter_3[12] ), .DI0(\refresh_counter_3[11] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_10), 
    .F0(\refresh_counter_3[11] ), .Q0(\refresh_counter[11] ), 
    .F1(\refresh_counter_3[12] ), .Q1(\refresh_counter[12] ), 
    .FCO(next_refresh_counter_cry_12));
  SLICE_12 SLICE_12( .A1(\refresh_counter[10] ), .A0(\refresh_counter[9] ), 
    .DI1(\refresh_counter_3[10] ), .DI0(\refresh_counter_3[9] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_8), 
    .F0(\refresh_counter_3[9] ), .Q0(\refresh_counter[9] ), 
    .F1(\refresh_counter_3[10] ), .Q1(\refresh_counter[10] ), 
    .FCO(next_refresh_counter_cry_10));
  SLICE_13 SLICE_13( .A1(\refresh_counter[8] ), .A0(\refresh_counter[7] ), 
    .DI1(\refresh_counter_3[8] ), .DI0(\refresh_counter_3[7] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_6), 
    .F0(\refresh_counter_3[7] ), .Q0(\refresh_counter[7] ), 
    .F1(\refresh_counter_3[8] ), .Q1(\refresh_counter[8] ), 
    .FCO(next_refresh_counter_cry_8));
  SLICE_14 SLICE_14( .A1(\refresh_counter[6] ), .A0(\refresh_counter[5] ), 
    .DI1(\refresh_counter_3[6] ), .DI0(\refresh_counter_3[5] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_4), 
    .F0(\refresh_counter_3[5] ), .Q0(\refresh_counter[5] ), 
    .F1(\refresh_counter_3[6] ), .Q1(\refresh_counter[6] ), 
    .FCO(next_refresh_counter_cry_6));
  SLICE_15 SLICE_15( .A1(\refresh_counter[4] ), .A0(\refresh_counter[3] ), 
    .DI1(\refresh_counter_3[4] ), .DI0(\refresh_counter_3[3] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_2), 
    .F0(\refresh_counter_3[3] ), .Q0(\refresh_counter[3] ), 
    .F1(\refresh_counter_3[4] ), .Q1(\refresh_counter[4] ), 
    .FCO(next_refresh_counter_cry_4));
  SLICE_16 SLICE_16( .A1(\refresh_counter[2] ), .A0(\refresh_counter[1] ), 
    .DI1(\refresh_counter_3[2] ), .DI0(\refresh_counter_3[1] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .FCI(next_refresh_counter_cry_0), 
    .F0(\refresh_counter_3[1] ), .Q0(\refresh_counter[1] ), 
    .F1(\refresh_counter_3[2] ), .Q1(\refresh_counter[2] ), 
    .FCO(next_refresh_counter_cry_2));
  SLICE_17 SLICE_17( .D1(\state[23] ), .C1(\state[24] ), .B1(\cas_counter[0] ), 
    .A1(\cas_counter[1] ), .D0(\cas_counter[1] ), .C0(\state[23] ), 
    .B0(\state[24] ), .A0(\cas_counter[0] ), .DI0(N_166_i), .LSR(N_553_i), 
    .CLK(clk_c), .F0(N_166_i), .Q0(\cas_counter[0] ), .F1(N_167_i));
  SLICE_18 SLICE_18( .C1(\state[14] ), .B1(reset_n_pin_c), 
    .A1(next_state_0_sqmuxa_5_i_a2), .B0(\state[23] ), .A0(reset_n_pin_c), 
    .DI0(N_553_i), .LSR(N_167_i), .CLK(clk_c), .F0(N_553_i), 
    .Q0(\cas_counter[1] ), .F1(\state_RNI2PV5A[14] ));
  SLICE_19 SLICE_19( .B1(\state[0] ), .A1(\state_srsts_i_a2[12] ), 
    .D0(\state[11] ), .C0(next_state_0_sqmuxa_5_i_a2), 
    .B0(\next_command_0_tz[0] ), .A0(next_state_0_sqmuxa_7), 
    .DI0(\next_command[0] ), .LSR(reset_n_pin_c), .CLK(clk_c), 
    .F0(\next_command[0] ), .Q0(\command[0] ), .F1(next_state_0_sqmuxa_7));
  SLICE_20 SLICE_20( .D1(un36_0_a2_1), .C1(un36_0_a2_0), 
    .B1(un1_delay_counter_16_cry_1_0_S0), .A1(N_614), 
    .D0(un1_delay_counter_16_axb_0), .C0(\state[15] ), .B0(\state[6] ), 
    .A0(N_536), .DI1(\next_delay_counter[1] ), .DI0(\next_delay_counter[0] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .F0(\next_delay_counter[0] ), 
    .Q0(\delay_counter[0] ), .F1(\next_delay_counter[1] ), 
    .Q1(\delay_counter[1] ));
  SLICE_21 SLICE_21( .D1(un36_0_a2_1), .C1(un36_0_a2_0), 
    .B1(un1_delay_counter_16_cry_5_0_S0), .A1(N_614), 
    .D0(un1_delay_counter_16_cry_1_0_S1), .C0(\state[15] ), .B0(\state[6] ), 
    .A0(N_536), .DI1(\next_delay_counter[5] ), .DI0(\next_delay_counter[2] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .F0(\next_delay_counter[2] ), 
    .Q0(\delay_counter[2] ), .F1(\next_delay_counter[5] ), 
    .Q1(\delay_counter[5] ));
  SLICE_22 SLICE_22( .D1(un36_0_a2_1), .C1(un36_0_a2_0), 
    .B1(un1_delay_counter_16_cry_7_0_S0), .A1(N_614), .D0(un36_0_a2_1), 
    .C0(un36_0_a2_0), .B0(un1_delay_counter_16_cry_5_0_S1), .A0(N_614), 
    .DI1(\next_delay_counter[7] ), .DI0(\next_delay_counter[6] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .F0(\next_delay_counter[6] ), 
    .Q0(\delay_counter[6] ), .F1(\next_delay_counter[7] ), 
    .Q1(\delay_counter[7] ));
  SLICE_23 SLICE_23( .D1(un36_0_a2_1), .C1(un36_0_a2_0), 
    .B1(un1_delay_counter_16_cry_9_0_S0), .A1(N_614), .D0(un36_0_a2_1), 
    .C0(un36_0_a2_0), .B0(un1_delay_counter_16_cry_7_0_S1), .A0(N_614), 
    .DI1(\next_delay_counter[9] ), .DI0(\next_delay_counter[8] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .F0(\next_delay_counter[8] ), 
    .Q0(\delay_counter[8] ), .F1(\next_delay_counter[9] ), 
    .Q1(\delay_counter[9] ));
  SLICE_24 SLICE_24( .D1(un36_0_a2_1), .C1(un36_0_a2_0), 
    .B1(un1_delay_counter_16_cry_11_0_S1), .A1(N_614), .D0(un36_0_a2_1), 
    .C0(un36_0_a2_0), .B0(un1_delay_counter_16_cry_9_0_S1), .A0(N_614), 
    .DI1(\next_delay_counter[12] ), .DI0(\next_delay_counter[10] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .F0(\next_delay_counter[10] ), 
    .Q0(\delay_counter[10] ), .F1(\next_delay_counter[12] ), 
    .Q1(\delay_counter[12] ));
  SLICE_25 SLICE_25( .C1(\state[10] ), .B1(\state[20] ), .A1(\state[5] ), 
    .D0(un36_0_a2_1), .C0(un36_0_a2_0), .B0(un1_delay_counter_16_cry_13_0_S1), 
    .A0(N_614), .DI0(\next_delay_counter[14] ), .LSR(reset_n_pin_c), 
    .CLK(clk_c), .F0(\next_delay_counter[14] ), .Q0(\delay_counter[14] ), 
    .F1(N_614));
  SLICE_26 SLICE_26( .C1(next_state_0_sqmuxa_6), .B1(next_state19_axb1), 
    .A1(next_state19_axb0), .D0(next_state_0_sqmuxa_5_i_a2), .C0(next_state19), 
    .B0(\state[7] ), .A0(next_state19_axb0), 
    .DI1(\init_refresh_counter_RNO[1] ), .DI0(\init_refresh_counter_RNO[0] ), 
    .LSR(un1_reset_n_pin_3_0), .CLK(clk_c), .F0(\init_refresh_counter_RNO[0] ), 
    .Q0(next_state19_axb0), .F1(\init_refresh_counter_RNO[1] ), 
    .Q1(next_state19_axb1));
  SLICE_27 SLICE_27( .C1(\state[7] ), .B1(next_state19), 
    .A1(next_state_0_sqmuxa_5_i_a2), .D0(next_state_0_sqmuxa_6), 
    .C0(next_state19_axb2), .B0(next_state19_axb1), .A0(next_state19_axb0), 
    .DI0(\init_refresh_counter_RNO[2] ), .LSR(un1_reset_n_pin_3_0), 
    .CLK(clk_c), .F0(\init_refresh_counter_RNO[2] ), .Q0(next_state19_axb2), 
    .F1(next_state_0_sqmuxa_6));
  SLICE_28 SLICE_28( .D1(\refresh_counter[3] ), .C1(\refresh_counter[2] ), 
    .B1(\refresh_counter[1] ), .A1(\refresh_counter[0] ), 
    .A0(\refresh_counter[0] ), .DI0(\refresh_counter_i[0] ), 
    .LSR(\state_RNI2PV5A[14] ), .CLK(clk_c), .F0(\refresh_counter_i[0] ), 
    .Q0(\refresh_counter[0] ), .F1(un1_refresh_counterlt4));
  SLICE_29 SLICE_29( .C1(next_state_0_sqmuxa_5_i_a2), .B1(reset_n_pin_c), 
    .A1(\state[1] ), .D0(soc_side_wr_en_pin_c), .C0(soc_side_rd_en_pin_c), 
    .B0(N_622), .A0(N_580), .DI1(N_421_i), .DI0(\state_nss[0] ), .CLK(clk_c), 
    .F0(\state_nss[0] ), .Q0(\state[0] ), .F1(N_421_i), .Q1(\state[1] ));
  SLICE_30 SLICE_30( .C1(next_state_0_sqmuxa_5_i_a2), .B1(reset_n_pin_c), 
    .A1(\state[1] ), .D0(\state[3] ), .C0(\state[2] ), .B0(reset_n_pin_c), 
    .A0(next_state_0_sqmuxa_5_i_a2), .DI1(\state_nss[3] ), .DI0(N_457_i), 
    .CLK(clk_c), .F0(N_457_i), .Q0(\state[2] ), .F1(\state_nss[3] ), 
    .Q1(\state[3] ));
  SLICE_31 SLICE_31( .D1(next_state_0_sqmuxa_5_i_a2), .C1(reset_n_pin_c), 
    .B1(N_514), .A1(\state[7] ), .D0(\state[5] ), .C0(\state[4] ), 
    .B0(reset_n_pin_c), .A0(next_state_0_sqmuxa_5_i_a2), .DI1(\state_nss[5] ), 
    .DI0(N_454_i), .CLK(clk_c), .F0(N_454_i), .Q0(\state[4] ), 
    .F1(\state_nss[5] ), .Q1(\state[5] ));
  SLICE_32 SLICE_32( .D1(\state[7] ), .C1(\state[6] ), .B1(reset_n_pin_c), 
    .A1(next_state_0_sqmuxa_5_i_a2), .D0(\state[7] ), .C0(\state[2] ), 
    .B0(N_601), .A0(N_514), .DI1(N_450_i), .DI0(\state_nss[6] ), .CLK(clk_c), 
    .F0(\state_nss[6] ), .Q0(\state[6] ), .F1(N_450_i), .Q1(\state[7] ));
  SLICE_33 SLICE_33( .C1(next_state_0_sqmuxa_5_i_a2), .B1(reset_n_pin_c), 
    .A1(\state[11] ), .D0(\state[9] ), .C0(\state[8] ), .B0(reset_n_pin_c), 
    .A0(next_state_0_sqmuxa_5_i_a2), .DI1(\state_nss[9] ), .DI0(N_448_i), 
    .CLK(clk_c), .F0(N_448_i), .Q0(\state[8] ), .F1(\state_nss[9] ), 
    .Q1(\state[9] ));
  SLICE_34 SLICE_34( .D1(next_state_0_sqmuxa_5_i_a2), .C1(reset_n_pin_c), 
    .B1(\state[10] ), .A1(\state[11] ), .D0(\state_srsts_i_a2[12] ), 
    .C0(reset_n_pin_c), .B0(\state[0] ), .A0(soc_side_wr_en_pin_c), 
    .DI1(N_444_i), .DI0(\state_nss[10] ), .CLK(clk_c), .F0(\state_nss[10] ), 
    .Q0(\state[10] ), .F1(N_444_i), .Q1(\state[11] ));
  SLICE_35 SLICE_35( .D1(\state[13] ), .C1(\state[12] ), .B1(reset_n_pin_c), 
    .A1(next_state_0_sqmuxa_5_i_a2), .C0(\state[0] ), .B0(reset_n_pin_c), 
    .A0(\state_srsts_i_a2[12] ), .DI1(N_440_i), .DI0(N_442_i), .CLK(clk_c), 
    .F0(N_442_i), .Q0(\state[12] ), .F1(N_440_i), .Q1(\state[13] ));
  SLICE_36 SLICE_36( .C1(next_state_0_sqmuxa_5_i_a2), .B1(reset_n_pin_c), 
    .A1(\state[13] ), .D0(\state[15] ), .C0(\state[14] ), .B0(reset_n_pin_c), 
    .A0(next_state_0_sqmuxa_5_i_a2), .DI1(\state_nss[15] ), .DI0(N_438_i), 
    .CLK(clk_c), .F0(N_438_i), .Q0(\state[14] ), .F1(\state_nss[15] ), 
    .Q1(\state[15] ));
  SLICE_37 SLICE_37( .C1(next_state_0_sqmuxa_5_i_a2), .B1(reset_n_pin_c), 
    .A1(\state[8] ), .D0(\state[21] ), .C0(\state[16] ), .B0(reset_n_pin_c), 
    .A0(next_state_0_sqmuxa_5_i_a2), .DI1(\state_nss[17] ), .DI0(N_435_i), 
    .CLK(clk_c), .F0(N_435_i), .Q0(\state[16] ), .F1(\state_nss[17] ), 
    .Q1(\state[17] ));
  SLICE_38 SLICE_38( .D1(\state[20] ), .C1(\state[19] ), .B1(reset_n_pin_c), 
    .A1(next_state_0_sqmuxa_5_i_a2), .D0(\state[18] ), .C0(\state[17] ), 
    .B0(reset_n_pin_c), .A0(next_state_0_sqmuxa_5_i_a2), .DI1(N_430_i), 
    .DI0(N_432_i), .CLK(clk_c), .F0(N_432_i), .Q0(\state[18] ), .F1(N_430_i), 
    .Q1(\state[19] ));
  SLICE_39 SLICE_39( .B1(\state[22] ), .A1(reset_n_pin_c), 
    .C0(soc_side_wr_en_pin_c), .B0(soc_side_rd_en_pin_c), .A0(N_622), 
    .DI1(N_427_i), .DI0(\state_nss[20] ), .CLK(clk_c), .F0(\state_nss[20] ), 
    .Q0(\state[20] ), .F1(N_427_i), .Q1(\state[21] ));
  SLICE_40 SLICE_40( .C1(next_state_0_sqmuxa_5_i_a2), .B1(reset_n_pin_c), 
    .A1(\state[19] ), .D0(\state[24] ), .C0(reset_n_pin_c), 
    .B0(\cas_counter[1] ), .A0(\cas_counter[0] ), .DI1(\state_nss[23] ), 
    .DI0(\state_nss[22] ), .CLK(clk_c), .F0(\state_nss[22] ), .Q0(\state[22] ), 
    .F1(\state_nss[23] ), .Q1(\state[23] ));
  SLICE_41 SLICE_41( .D1(\state[24] ), .C1(\state[23] ), .B1(\cas_counter[1] ), 
    .A1(\cas_counter[0] ), .B0(reset_n_pin_c), .A0(N_556), .DI0(N_423_i), 
    .CLK(clk_c), .F0(N_423_i), .Q0(\state[24] ), .F1(N_556));
  SLICE_42 SLICE_42( .D1(\state[8] ), .C1(\state[1] ), 
    .B1(next_state_0_sqmuxa_7), .A1(next_state_0_sqmuxa_5_i_a2), 
    .D0(\next_command_i_0[5] ), .C0(next_state_0_sqmuxa_5_i_a2), .B0(N_145), 
    .A0(N_144), .F0(N_141_i), .F1(N_145));
  SLICE_43 SLICE_43( .D1(\state[5] ), .C1(\soc_side_addr_pin_m[14] ), 
    .B1(\soc_side_addr_pin_c[5] ), .A1(N_609), .C0(\state[10] ), 
    .B0(\state[20] ), .A0(\soc_side_addr_pin_c[14] ), 
    .F0(\soc_side_addr_pin_m[14] ), .F1(\ram_side_addr_pin_c[5] ));
  SLICE_44 SLICE_44( .D1(\state[5] ), .C1(\soc_side_addr_pin_m[13] ), 
    .B1(\soc_side_addr_pin_c[4] ), .A1(N_609), .C0(\state[10] ), 
    .B0(\state[20] ), .A0(\soc_side_addr_pin_c[13] ), 
    .F0(\soc_side_addr_pin_m[13] ), .F1(\ram_side_addr_pin_c[4] ));
  SLICE_45 SLICE_45( .B1(\state[20] ), .A1(\state[10] ), .D0(\state[9] ), 
    .C0(\state[23] ), .B0(N_602), .A0(\soc_side_addr_pin_c[19] ), 
    .F0(\addr_reg[10] ), .F1(N_602));
  SLICE_46 SLICE_46( .D1(next_state_0_sqmuxa_5_i_a2_10), 
    .C1(next_state_0_sqmuxa_5_i_a2_9), .B1(next_state_0_sqmuxa_5_i_a2_8), 
    .A1(next_state_0_sqmuxa_5_i_a2_7), .D0(next_state_0_sqmuxa_5_i_a2), 
    .C0(\state[16] ), .B0(\state[18] ), .A0(\state[0] ), 
    .F0(ready_reg_0io_RNO), .F1(next_state_0_sqmuxa_5_i_a2));
  SLICE_47 SLICE_47( .D1(\state[18] ), .C1(\state[16] ), .B1(\state[14] ), 
    .A1(\state[4] ), .C0(next_state_0_sqmuxa_5_i_a2), .B0(reset_n_pin_c), 
    .A0(N_524), .F0(N_580), .F1(N_524));
  SLICE_48 SLICE_48( .B1(\state[11] ), .A1(next_state_0_sqmuxa_5_i_a2), 
    .D0(\state[22] ), .C0(next_state_1_sqmuxa_3), .B0(N_150), .A0(N_145), 
    .F0(N_137_i), .F1(next_state_1_sqmuxa_3));
  SLICE_49 SLICE_49( .D1(un1_refresh_counterlt10), 
    .C1(\state_srsts_i_a2_1_0[12] ), .B1(\refresh_counter[15] ), 
    .A1(\refresh_counter[10] ), .C0(\state[0] ), .B0(reset_n_pin_c), 
    .A0(\state_srsts_i_a2[12] ), .F0(N_622), .F1(\state_srsts_i_a2[12] ));
  SLICE_50 SLICE_50( .C1(\state[13] ), .B1(\state[7] ), .A1(\state[2] ), 
    .D0(\state[19] ), .C0(\state[11] ), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(N_144), .F0(N_151_i), .F1(N_144));
  SLICE_51 SLICE_51( .D1(un1_next_init_refresh_counter_0_sqmuxa_i_a2_3), 
    .C1(un1_next_init_refresh_counter_0_sqmuxa_i_a2_0), .B1(\state[19] ), 
    .A1(N_524), .C0(\delay_counter[0] ), .B0(next_state_0_sqmuxa_5_i_a2), 
    .A0(N_582), .F0(un1_delay_counter_16_axb_0), .F1(N_582));
  SLICE_52 SLICE_52( .C1(\state[11] ), .B1(\state[10] ), 
    .A1(in_write_cycle_i_a2_0), .C0(\soc_side_wr_mask_pin_c[3] ), .B0(N_537), 
    .A0(N_535), .F0(ram_side_chip1_udqm_pin_c), .F1(N_537));
  SLICE_53 SLICE_53( .D1(\state[24] ), .C1(\state[23] ), .B1(\state[22] ), 
    .A1(in_read_cycle_i_a2_0), .C0(\soc_side_wr_mask_pin_c[2] ), .B0(N_537), 
    .A0(N_535), .F0(ram_side_chip1_ldqm_pin_c), .F1(N_535));
  SLICE_54 SLICE_54( .C1(next_state19_axb2), .B1(next_state19_axb1), 
    .A1(next_state19_axb0), .C0(\state[7] ), .B0(next_state19), 
    .A0(next_state_0_sqmuxa_5_i_a2), .F0(N_150), .F1(next_state19));
  SLICE_55 SLICE_55( .D1(un1_refresh_counterlt4), .C1(\refresh_counter[6] ), 
    .B1(\refresh_counter[5] ), .A1(\refresh_counter[4] ), 
    .D0(un1_refresh_counterlt7), .C0(\refresh_counter[9] ), 
    .B0(\refresh_counter[8] ), .A0(\refresh_counter[7] ), 
    .F0(un1_refresh_counterlt10), .F1(un1_refresh_counterlt7));
  SLICE_56 SLICE_56( .D1(\state[13] ), .C1(\state[12] ), .B1(\state[3] ), 
    .A1(\state[2] ), .D0(ram_side_addr_pin_1_0_a2_3), 
    .C0(ram_side_addr_pin_1_0_a2_2), .B0(\command[0] ), .A0(\addr_reg[10] ), 
    .F0(\ram_side_addr_pin_c[10] ), .F1(ram_side_addr_pin_1_0_a2_2));
  SLICE_57 SLICE_57( .D1(\state[21] ), .C1(\state[17] ), .B1(\state[15] ), 
    .A1(\state[6] ), .D0(un36_0_a2_1), .C0(un36_0_a2_0), .B0(reset_n_pin_c), 
    .A0(N_614), .F0(un36_0_a2_0_RNIQTQL9), .F1(un36_0_a2_0));
  SLICE_58 SLICE_58( .C1(\state[12] ), .B1(\state[9] ), .A1(\state[3] ), 
    .D0(un36_0_a2_1), .C0(\state[21] ), .B0(\state[17] ), .A0(N_614), 
    .F0(N_536), .F1(un36_0_a2_1));
  SLICE_59 SLICE_59( .B1(\state[23] ), .A1(\state[9] ), 
    .D0(\soc_side_addr_pin_c[9] ), .C0(\soc_side_addr_pin_c[0] ), .B0(N_609), 
    .A0(N_602), .F0(\ram_side_addr_pin_c[0] ), .F1(N_609));
  SLICE_60 SLICE_60( .D1(\state[15] ), .C1(\state[14] ), .B1(\state[6] ), 
    .A1(\state[4] ), .D0(\state[7] ), .C0(\state[1] ), .B0(\state[0] ), 
    .A0(ram_side_addr_pin_1_0_a2_1), .F0(ram_side_addr_pin_1_0_a2_3), 
    .F1(ram_side_addr_pin_1_0_a2_1));
  SLICE_61 SLICE_61( .D1(\state[9] ), .C1(\state[23] ), .B1(N_602), 
    .A1(\soc_side_addr_pin_c[22] ), .D0(\state[9] ), .C0(\state[23] ), 
    .B0(N_602), .A0(\soc_side_addr_pin_c[21] ), 
    .F0(\ram_side_bank_addr_pin_c[0] ), .F1(\ram_side_bank_addr_pin_c[1] ));
  SLICE_62 SLICE_62( .D1(\state[10] ), .C1(\state[20] ), 
    .B1(\soc_side_addr_pin_c[18] ), .A1(\state[5] ), .C0(\state[10] ), 
    .B0(\state[20] ), .A0(\soc_side_addr_pin_c[20] ), 
    .F0(\ram_side_addr_pin_c[11] ), .F1(\ram_side_addr_pin_c[9] ));
  SLICE_63 SLICE_63( .B1(reset_n_pin_c), .A1(next_state_0_sqmuxa_5_i_a2), 
    .C0(\state[2] ), .B0(reset_n_pin_c), .A0(next_state_0_sqmuxa_5_i_a2), 
    .F0(un1_reset_n_pin_3_0), .F1(N_601));
  SLICE_64 SLICE_64( .C1(\soc_side_wr_mask_pin_c[0] ), .B1(N_537), .A1(N_535), 
    .C0(\soc_side_wr_mask_pin_c[1] ), .B0(N_537), .A0(N_535), 
    .F0(ram_side_chip0_udqm_pin_c), .F1(ram_side_chip0_ldqm_pin_c));
  SLICE_65 SLICE_65( .D1(\soc_side_addr_pin_c[17] ), 
    .C1(\soc_side_addr_pin_c[8] ), .B1(N_609), .A1(N_602), 
    .D0(\soc_side_addr_pin_c[10] ), .C0(\soc_side_addr_pin_c[1] ), .B0(N_609), 
    .A0(N_602), .F0(\ram_side_addr_pin_c[1] ), .F1(\ram_side_addr_pin_c[8] ));
  SLICE_66 SLICE_66( .D1(\soc_side_addr_pin_c[16] ), 
    .C1(\soc_side_addr_pin_c[7] ), .B1(N_609), .A1(N_602), 
    .D0(\soc_side_addr_pin_c[11] ), .C0(\soc_side_addr_pin_c[2] ), .B0(N_609), 
    .A0(N_602), .F0(\ram_side_addr_pin_c[2] ), .F1(\ram_side_addr_pin_c[7] ));
  SLICE_67 SLICE_67( .D1(\soc_side_addr_pin_c[15] ), 
    .C1(\soc_side_addr_pin_c[6] ), .B1(N_609), .A1(N_602), 
    .D0(\soc_side_addr_pin_c[12] ), .C0(\soc_side_addr_pin_c[3] ), .B0(N_609), 
    .A0(N_602), .F0(\ram_side_addr_pin_c[3] ), .F1(\ram_side_addr_pin_c[6] ));
  SLICE_68 SLICE_68( .D1(\state[21] ), .C1(\state[20] ), .B1(\state[19] ), 
    .A1(\state[16] ), .C0(\state[18] ), .B0(\state[16] ), 
    .A0(next_state_0_sqmuxa_5_i_a2), .F0(un1_next_ready_reg_1_sqmuxa_0_a2), 
    .F1(in_read_cycle_i_a2_0));
  SLICE_69 SLICE_69( .A1(\state[0] ), .D0(\state[22] ), .C0(\state[0] ), 
    .B0(soc_side_wr_en_pin_c), .A0(soc_side_rd_en_pin_c), 
    .F0(\next_command_i_0[5] ), .F1(\state_i[0] ));
  SLICE_70 SLICE_70( .B1(\state[13] ), .A1(\state[8] ), .D0(\state[18] ), 
    .C0(\state[17] ), .B0(\state[9] ), .A0(\state[8] ), 
    .F0(in_write_cycle_i_a2_0), 
    .F1(un1_next_init_refresh_counter_0_sqmuxa_i_a2_0));
  SLICE_71 SLICE_71( .B1(\state[19] ), .A1(\state[1] ), .D0(\state[11] ), 
    .C0(\state[7] ), .B0(\state[2] ), .A0(\state[1] ), 
    .F0(un1_next_init_refresh_counter_0_sqmuxa_i_a2_3), 
    .F1(\next_command_0_tz[0] ));
  SLICE_72 SLICE_72( .D1(\delay_counter[8] ), .C1(\delay_counter[7] ), 
    .B1(\delay_counter[6] ), .A1(\delay_counter[5] ), .D0(\delay_counter[12] ), 
    .C0(\delay_counter[11] ), .B0(\delay_counter[10] ), 
    .A0(\delay_counter[9] ), .F0(next_state_0_sqmuxa_5_i_a2_10), 
    .F1(next_state_0_sqmuxa_5_i_a2_9));
  SLICE_73 SLICE_73( .C1(\delay_counter[14] ), .B1(\delay_counter[13] ), 
    .A1(\delay_counter[0] ), .D0(\delay_counter[4] ), .C0(\delay_counter[3] ), 
    .B0(\delay_counter[2] ), .A0(\delay_counter[1] ), 
    .F0(next_state_0_sqmuxa_5_i_a2_8), .F1(next_state_0_sqmuxa_5_i_a2_7));
  SLICE_74 SLICE_74( .D1(\refresh_counter[14] ), .C1(\refresh_counter[13] ), 
    .B1(\refresh_counter[12] ), .A1(\refresh_counter[11] ), 
    .C0(next_state19_axb2), .B0(next_state19_axb1), .A0(next_state19_axb0), 
    .F0(N_514), .F1(\state_srsts_i_a2_1_0[12] ));
  SLICE_75 SLICE_75( .F0(VCC), .F1(GND));
  ram_side_chip0_data_pin_0_ \ram_side_chip0_data_pin[0]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[0] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[0] ), 
    .ramsidechip0datapin0(ram_side_chip0_data_pin[0]));
  soc_side_busy_pin soc_side_busy_pin_I( .IOLDO(soc_side_busy_pin_c), 
    .soc_side_busy_pin(soc_side_busy_pin));
  soc_side_busy_pin_MGIOL soc_side_busy_pin_MGIOL( .IOLDO(soc_side_busy_pin_c), 
    .OPOS(\state_i[0] ), .LSR(reset_n_pin_c), .CLK(clk_c));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  ram_side_ck_en_pin ram_side_ck_en_pin_I( .PADDO(VCC), 
    .ram_side_ck_en_pin(ram_side_ck_en_pin));
  ram_side_wr_en_pin ram_side_wr_en_pin_I( .IOLDO(ram_side_wr_en_pin_c), 
    .ram_side_wr_en_pin(ram_side_wr_en_pin));
  ram_side_wr_en_pin_MGIOL ram_side_wr_en_pin_MGIOL( 
    .IOLDO(ram_side_wr_en_pin_c), .OPOS(N_137_i), .LSR(reset_n_pin_c), 
    .CLK(clk_c));
  ram_side_cas_n_pin ram_side_cas_n_pin_I( .IOLDO(ram_side_cas_n_pin_c), 
    .ram_side_cas_n_pin(ram_side_cas_n_pin));
  ram_side_cas_n_pin_MGIOL ram_side_cas_n_pin_MGIOL( 
    .IOLDO(ram_side_cas_n_pin_c), .OPOS(N_151_i), .LSR(reset_n_pin_c), 
    .CLK(clk_c));
  ram_side_ras_n_pin ram_side_ras_n_pin_I( .IOLDO(ram_side_ras_n_pin_c), 
    .ram_side_ras_n_pin(ram_side_ras_n_pin));
  ram_side_ras_n_pin_MGIOL ram_side_ras_n_pin_MGIOL( 
    .IOLDO(ram_side_ras_n_pin_c), .OPOS(N_141_i), .LSR(reset_n_pin_c), 
    .CLK(clk_c));
  ram_side_cs_n_pin ram_side_cs_n_pin_I( .PADDO(GND), 
    .ram_side_cs_n_pin(ram_side_cs_n_pin));
  ram_side_chip1_data_pin_15_ \ram_side_chip1_data_pin[15]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[15] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[31] ), 
    .ramsidechip1datapin15(ram_side_chip1_data_pin[15]));
  ram_side_chip1_data_pin_14_ \ram_side_chip1_data_pin[14]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[14] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[30] ), 
    .ramsidechip1datapin14(ram_side_chip1_data_pin[14]));
  ram_side_chip1_data_pin_13_ \ram_side_chip1_data_pin[13]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[13] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[29] ), 
    .ramsidechip1datapin13(ram_side_chip1_data_pin[13]));
  ram_side_chip1_data_pin_12_ \ram_side_chip1_data_pin[12]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[12] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[28] ), 
    .ramsidechip1datapin12(ram_side_chip1_data_pin[12]));
  ram_side_chip1_data_pin_11_ \ram_side_chip1_data_pin[11]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[11] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[27] ), 
    .ramsidechip1datapin11(ram_side_chip1_data_pin[11]));
  ram_side_chip1_data_pin_10_ \ram_side_chip1_data_pin[10]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[10] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[26] ), 
    .ramsidechip1datapin10(ram_side_chip1_data_pin[10]));
  ram_side_chip1_data_pin_9_ \ram_side_chip1_data_pin[9]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[9] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[25] ), 
    .ramsidechip1datapin9(ram_side_chip1_data_pin[9]));
  ram_side_chip1_data_pin_8_ \ram_side_chip1_data_pin[8]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[8] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[24] ), 
    .ramsidechip1datapin8(ram_side_chip1_data_pin[8]));
  ram_side_chip1_data_pin_7_ \ram_side_chip1_data_pin[7]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[7] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[23] ), 
    .ramsidechip1datapin7(ram_side_chip1_data_pin[7]));
  ram_side_chip1_data_pin_6_ \ram_side_chip1_data_pin[6]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[6] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[22] ), 
    .ramsidechip1datapin6(ram_side_chip1_data_pin[6]));
  ram_side_chip1_data_pin_5_ \ram_side_chip1_data_pin[5]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[5] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[21] ), 
    .ramsidechip1datapin5(ram_side_chip1_data_pin[5]));
  ram_side_chip1_data_pin_4_ \ram_side_chip1_data_pin[4]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[4] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[20] ), 
    .ramsidechip1datapin4(ram_side_chip1_data_pin[4]));
  ram_side_chip1_data_pin_3_ \ram_side_chip1_data_pin[3]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[3] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[19] ), 
    .ramsidechip1datapin3(ram_side_chip1_data_pin[3]));
  ram_side_chip1_data_pin_2_ \ram_side_chip1_data_pin[2]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[2] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[18] ), 
    .ramsidechip1datapin2(ram_side_chip1_data_pin[2]));
  ram_side_chip1_data_pin_1_ \ram_side_chip1_data_pin[1]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[1] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[17] ), 
    .ramsidechip1datapin1(ram_side_chip1_data_pin[1]));
  ram_side_chip1_data_pin_0_ \ram_side_chip1_data_pin[0]_I ( 
    .PADDI(\ram_side_chip1_data_pin_in[0] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[16] ), 
    .ramsidechip1datapin0(ram_side_chip1_data_pin[0]));
  ram_side_chip1_udqm_pin ram_side_chip1_udqm_pin_I( 
    .PADDO(ram_side_chip1_udqm_pin_c), 
    .ram_side_chip1_udqm_pin(ram_side_chip1_udqm_pin));
  ram_side_chip1_ldqm_pin ram_side_chip1_ldqm_pin_I( 
    .PADDO(ram_side_chip1_ldqm_pin_c), 
    .ram_side_chip1_ldqm_pin(ram_side_chip1_ldqm_pin));
  ram_side_chip0_data_pin_15_ \ram_side_chip0_data_pin[15]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[15] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[15] ), 
    .ramsidechip0datapin15(ram_side_chip0_data_pin[15]));
  ram_side_chip0_data_pin_14_ \ram_side_chip0_data_pin[14]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[14] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[14] ), 
    .ramsidechip0datapin14(ram_side_chip0_data_pin[14]));
  ram_side_chip0_data_pin_13_ \ram_side_chip0_data_pin[13]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[13] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[13] ), 
    .ramsidechip0datapin13(ram_side_chip0_data_pin[13]));
  ram_side_chip0_data_pin_12_ \ram_side_chip0_data_pin[12]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[12] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[12] ), 
    .ramsidechip0datapin12(ram_side_chip0_data_pin[12]));
  ram_side_chip0_data_pin_11_ \ram_side_chip0_data_pin[11]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[11] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[11] ), 
    .ramsidechip0datapin11(ram_side_chip0_data_pin[11]));
  ram_side_chip0_data_pin_10_ \ram_side_chip0_data_pin[10]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[10] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[10] ), 
    .ramsidechip0datapin10(ram_side_chip0_data_pin[10]));
  ram_side_chip0_data_pin_9_ \ram_side_chip0_data_pin[9]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[9] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[9] ), 
    .ramsidechip0datapin9(ram_side_chip0_data_pin[9]));
  ram_side_chip0_data_pin_8_ \ram_side_chip0_data_pin[8]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[8] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[8] ), 
    .ramsidechip0datapin8(ram_side_chip0_data_pin[8]));
  ram_side_chip0_data_pin_7_ \ram_side_chip0_data_pin[7]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[7] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[7] ), 
    .ramsidechip0datapin7(ram_side_chip0_data_pin[7]));
  ram_side_chip0_data_pin_6_ \ram_side_chip0_data_pin[6]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[6] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[6] ), 
    .ramsidechip0datapin6(ram_side_chip0_data_pin[6]));
  ram_side_chip0_data_pin_5_ \ram_side_chip0_data_pin[5]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[5] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[5] ), 
    .ramsidechip0datapin5(ram_side_chip0_data_pin[5]));
  ram_side_chip0_data_pin_4_ \ram_side_chip0_data_pin[4]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[4] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[4] ), 
    .ramsidechip0datapin4(ram_side_chip0_data_pin[4]));
  ram_side_chip0_data_pin_3_ \ram_side_chip0_data_pin[3]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[3] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[3] ), 
    .ramsidechip0datapin3(ram_side_chip0_data_pin[3]));
  ram_side_chip0_data_pin_2_ \ram_side_chip0_data_pin[2]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[2] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[2] ), 
    .ramsidechip0datapin2(ram_side_chip0_data_pin[2]));
  ram_side_chip0_data_pin_1_ \ram_side_chip0_data_pin[1]_I ( 
    .PADDI(\ram_side_chip0_data_pin_in[1] ), .PADDT(\state[9] ), 
    .PADDO(\wr_data_reg[1] ), 
    .ramsidechip0datapin1(ram_side_chip0_data_pin[1]));
  ram_side_chip0_udqm_pin ram_side_chip0_udqm_pin_I( 
    .PADDO(ram_side_chip0_udqm_pin_c), 
    .ram_side_chip0_udqm_pin(ram_side_chip0_udqm_pin));
  ram_side_chip0_ldqm_pin ram_side_chip0_ldqm_pin_I( 
    .PADDO(ram_side_chip0_ldqm_pin_c), 
    .ram_side_chip0_ldqm_pin(ram_side_chip0_ldqm_pin));
  ram_side_bank_addr_pin_1_ \ram_side_bank_addr_pin[1]_I ( 
    .PADDO(\ram_side_bank_addr_pin_c[1] ), 
    .ramsidebankaddrpin1(ram_side_bank_addr_pin[1]));
  ram_side_bank_addr_pin_0_ \ram_side_bank_addr_pin[0]_I ( 
    .PADDO(\ram_side_bank_addr_pin_c[0] ), 
    .ramsidebankaddrpin0(ram_side_bank_addr_pin[0]));
  ram_side_addr_pin_11_ \ram_side_addr_pin[11]_I ( 
    .PADDO(\ram_side_addr_pin_c[11] ), 
    .ramsideaddrpin11(ram_side_addr_pin[11]));
  ram_side_addr_pin_10_ \ram_side_addr_pin[10]_I ( 
    .PADDO(\ram_side_addr_pin_c[10] ), 
    .ramsideaddrpin10(ram_side_addr_pin[10]));
  ram_side_addr_pin_9_ \ram_side_addr_pin[9]_I ( 
    .PADDO(\ram_side_addr_pin_c[9] ), .ramsideaddrpin9(ram_side_addr_pin[9]));
  ram_side_addr_pin_8_ \ram_side_addr_pin[8]_I ( 
    .PADDO(\ram_side_addr_pin_c[8] ), .ramsideaddrpin8(ram_side_addr_pin[8]));
  ram_side_addr_pin_7_ \ram_side_addr_pin[7]_I ( 
    .PADDO(\ram_side_addr_pin_c[7] ), .ramsideaddrpin7(ram_side_addr_pin[7]));
  ram_side_addr_pin_6_ \ram_side_addr_pin[6]_I ( 
    .PADDO(\ram_side_addr_pin_c[6] ), .ramsideaddrpin6(ram_side_addr_pin[6]));
  ram_side_addr_pin_5_ \ram_side_addr_pin[5]_I ( 
    .PADDO(\ram_side_addr_pin_c[5] ), .ramsideaddrpin5(ram_side_addr_pin[5]));
  ram_side_addr_pin_4_ \ram_side_addr_pin[4]_I ( 
    .PADDO(\ram_side_addr_pin_c[4] ), .ramsideaddrpin4(ram_side_addr_pin[4]));
  ram_side_addr_pin_3_ \ram_side_addr_pin[3]_I ( 
    .PADDO(\ram_side_addr_pin_c[3] ), .ramsideaddrpin3(ram_side_addr_pin[3]));
  ram_side_addr_pin_2_ \ram_side_addr_pin[2]_I ( 
    .PADDO(\ram_side_addr_pin_c[2] ), .ramsideaddrpin2(ram_side_addr_pin[2]));
  ram_side_addr_pin_1_ \ram_side_addr_pin[1]_I ( 
    .PADDO(\ram_side_addr_pin_c[1] ), .ramsideaddrpin1(ram_side_addr_pin[1]));
  ram_side_addr_pin_0_ \ram_side_addr_pin[0]_I ( 
    .PADDO(\ram_side_addr_pin_c[0] ), .ramsideaddrpin0(ram_side_addr_pin[0]));
  soc_side_rd_en_pin soc_side_rd_en_pin_I( .PADDI(soc_side_rd_en_pin_c), 
    .soc_side_rd_en_pin(soc_side_rd_en_pin));
  soc_side_rd_data_pin_31_ \soc_side_rd_data_pin[31]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[31] ), 
    .socsiderddatapin31(soc_side_rd_data_pin[31]));
  soc_side_rd_data_pin_31__MGIOL \soc_side_rd_data_pin[31]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[31] ), 
    .OPOS(\ram_side_chip1_data_pin_in[15] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_30_ \soc_side_rd_data_pin[30]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[30] ), 
    .socsiderddatapin30(soc_side_rd_data_pin[30]));
  soc_side_rd_data_pin_30__MGIOL \soc_side_rd_data_pin[30]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[30] ), 
    .OPOS(\ram_side_chip1_data_pin_in[14] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_29_ \soc_side_rd_data_pin[29]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[29] ), 
    .socsiderddatapin29(soc_side_rd_data_pin[29]));
  soc_side_rd_data_pin_29__MGIOL \soc_side_rd_data_pin[29]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[29] ), 
    .OPOS(\ram_side_chip1_data_pin_in[13] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_28_ \soc_side_rd_data_pin[28]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[28] ), 
    .socsiderddatapin28(soc_side_rd_data_pin[28]));
  soc_side_rd_data_pin_28__MGIOL \soc_side_rd_data_pin[28]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[28] ), 
    .OPOS(\ram_side_chip1_data_pin_in[12] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_27_ \soc_side_rd_data_pin[27]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[27] ), 
    .socsiderddatapin27(soc_side_rd_data_pin[27]));
  soc_side_rd_data_pin_27__MGIOL \soc_side_rd_data_pin[27]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[27] ), 
    .OPOS(\ram_side_chip1_data_pin_in[11] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_26_ \soc_side_rd_data_pin[26]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[26] ), 
    .socsiderddatapin26(soc_side_rd_data_pin[26]));
  soc_side_rd_data_pin_26__MGIOL \soc_side_rd_data_pin[26]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[26] ), 
    .OPOS(\ram_side_chip1_data_pin_in[10] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_25_ \soc_side_rd_data_pin[25]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[25] ), 
    .socsiderddatapin25(soc_side_rd_data_pin[25]));
  soc_side_rd_data_pin_25__MGIOL \soc_side_rd_data_pin[25]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[25] ), 
    .OPOS(\ram_side_chip1_data_pin_in[9] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_24_ \soc_side_rd_data_pin[24]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[24] ), 
    .socsiderddatapin24(soc_side_rd_data_pin[24]));
  soc_side_rd_data_pin_24__MGIOL \soc_side_rd_data_pin[24]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[24] ), 
    .OPOS(\ram_side_chip1_data_pin_in[8] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_23_ \soc_side_rd_data_pin[23]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[23] ), 
    .socsiderddatapin23(soc_side_rd_data_pin[23]));
  soc_side_rd_data_pin_23__MGIOL \soc_side_rd_data_pin[23]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[23] ), 
    .OPOS(\ram_side_chip1_data_pin_in[7] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_22_ \soc_side_rd_data_pin[22]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[22] ), 
    .socsiderddatapin22(soc_side_rd_data_pin[22]));
  soc_side_rd_data_pin_22__MGIOL \soc_side_rd_data_pin[22]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[22] ), 
    .OPOS(\ram_side_chip1_data_pin_in[6] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_21_ \soc_side_rd_data_pin[21]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[21] ), 
    .socsiderddatapin21(soc_side_rd_data_pin[21]));
  soc_side_rd_data_pin_21__MGIOL \soc_side_rd_data_pin[21]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[21] ), 
    .OPOS(\ram_side_chip1_data_pin_in[5] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_20_ \soc_side_rd_data_pin[20]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[20] ), 
    .socsiderddatapin20(soc_side_rd_data_pin[20]));
  soc_side_rd_data_pin_20__MGIOL \soc_side_rd_data_pin[20]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[20] ), 
    .OPOS(\ram_side_chip1_data_pin_in[4] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_19_ \soc_side_rd_data_pin[19]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[19] ), 
    .socsiderddatapin19(soc_side_rd_data_pin[19]));
  soc_side_rd_data_pin_19__MGIOL \soc_side_rd_data_pin[19]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[19] ), 
    .OPOS(\ram_side_chip1_data_pin_in[3] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_18_ \soc_side_rd_data_pin[18]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[18] ), 
    .socsiderddatapin18(soc_side_rd_data_pin[18]));
  soc_side_rd_data_pin_18__MGIOL \soc_side_rd_data_pin[18]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[18] ), 
    .OPOS(\ram_side_chip1_data_pin_in[2] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_17_ \soc_side_rd_data_pin[17]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[17] ), 
    .socsiderddatapin17(soc_side_rd_data_pin[17]));
  soc_side_rd_data_pin_17__MGIOL \soc_side_rd_data_pin[17]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[17] ), 
    .OPOS(\ram_side_chip1_data_pin_in[1] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_16_ \soc_side_rd_data_pin[16]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[16] ), 
    .socsiderddatapin16(soc_side_rd_data_pin[16]));
  soc_side_rd_data_pin_16__MGIOL \soc_side_rd_data_pin[16]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[16] ), 
    .OPOS(\ram_side_chip1_data_pin_in[0] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_15_ \soc_side_rd_data_pin[15]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[15] ), 
    .socsiderddatapin15(soc_side_rd_data_pin[15]));
  soc_side_rd_data_pin_15__MGIOL \soc_side_rd_data_pin[15]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[15] ), 
    .OPOS(\ram_side_chip0_data_pin_in[15] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_14_ \soc_side_rd_data_pin[14]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[14] ), 
    .socsiderddatapin14(soc_side_rd_data_pin[14]));
  soc_side_rd_data_pin_14__MGIOL \soc_side_rd_data_pin[14]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[14] ), 
    .OPOS(\ram_side_chip0_data_pin_in[14] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_13_ \soc_side_rd_data_pin[13]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[13] ), 
    .socsiderddatapin13(soc_side_rd_data_pin[13]));
  soc_side_rd_data_pin_13__MGIOL \soc_side_rd_data_pin[13]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[13] ), 
    .OPOS(\ram_side_chip0_data_pin_in[13] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_12_ \soc_side_rd_data_pin[12]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[12] ), 
    .socsiderddatapin12(soc_side_rd_data_pin[12]));
  soc_side_rd_data_pin_12__MGIOL \soc_side_rd_data_pin[12]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[12] ), 
    .OPOS(\ram_side_chip0_data_pin_in[12] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_11_ \soc_side_rd_data_pin[11]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[11] ), 
    .socsiderddatapin11(soc_side_rd_data_pin[11]));
  soc_side_rd_data_pin_11__MGIOL \soc_side_rd_data_pin[11]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[11] ), 
    .OPOS(\ram_side_chip0_data_pin_in[11] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_10_ \soc_side_rd_data_pin[10]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[10] ), 
    .socsiderddatapin10(soc_side_rd_data_pin[10]));
  soc_side_rd_data_pin_10__MGIOL \soc_side_rd_data_pin[10]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[10] ), 
    .OPOS(\ram_side_chip0_data_pin_in[10] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_9_ \soc_side_rd_data_pin[9]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[9] ), 
    .socsiderddatapin9(soc_side_rd_data_pin[9]));
  soc_side_rd_data_pin_9__MGIOL \soc_side_rd_data_pin[9]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[9] ), 
    .OPOS(\ram_side_chip0_data_pin_in[9] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_8_ \soc_side_rd_data_pin[8]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[8] ), 
    .socsiderddatapin8(soc_side_rd_data_pin[8]));
  soc_side_rd_data_pin_8__MGIOL \soc_side_rd_data_pin[8]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[8] ), 
    .OPOS(\ram_side_chip0_data_pin_in[8] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_7_ \soc_side_rd_data_pin[7]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[7] ), 
    .socsiderddatapin7(soc_side_rd_data_pin[7]));
  soc_side_rd_data_pin_7__MGIOL \soc_side_rd_data_pin[7]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[7] ), 
    .OPOS(\ram_side_chip0_data_pin_in[7] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_6_ \soc_side_rd_data_pin[6]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[6] ), 
    .socsiderddatapin6(soc_side_rd_data_pin[6]));
  soc_side_rd_data_pin_6__MGIOL \soc_side_rd_data_pin[6]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[6] ), 
    .OPOS(\ram_side_chip0_data_pin_in[6] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_5_ \soc_side_rd_data_pin[5]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[5] ), 
    .socsiderddatapin5(soc_side_rd_data_pin[5]));
  soc_side_rd_data_pin_5__MGIOL \soc_side_rd_data_pin[5]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[5] ), 
    .OPOS(\ram_side_chip0_data_pin_in[5] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_4_ \soc_side_rd_data_pin[4]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[4] ), 
    .socsiderddatapin4(soc_side_rd_data_pin[4]));
  soc_side_rd_data_pin_4__MGIOL \soc_side_rd_data_pin[4]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[4] ), 
    .OPOS(\ram_side_chip0_data_pin_in[4] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_3_ \soc_side_rd_data_pin[3]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[3] ), 
    .socsiderddatapin3(soc_side_rd_data_pin[3]));
  soc_side_rd_data_pin_3__MGIOL \soc_side_rd_data_pin[3]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[3] ), 
    .OPOS(\ram_side_chip0_data_pin_in[3] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_2_ \soc_side_rd_data_pin[2]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[2] ), 
    .socsiderddatapin2(soc_side_rd_data_pin[2]));
  soc_side_rd_data_pin_2__MGIOL \soc_side_rd_data_pin[2]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[2] ), 
    .OPOS(\ram_side_chip0_data_pin_in[2] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_1_ \soc_side_rd_data_pin[1]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[1] ), 
    .socsiderddatapin1(soc_side_rd_data_pin[1]));
  soc_side_rd_data_pin_1__MGIOL \soc_side_rd_data_pin[1]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[1] ), 
    .OPOS(\ram_side_chip0_data_pin_in[1] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_rd_data_pin_0_ \soc_side_rd_data_pin[0]_I ( 
    .IOLDO(\soc_side_rd_data_pin_c[0] ), 
    .socsiderddatapin0(soc_side_rd_data_pin[0]));
  soc_side_rd_data_pin_0__MGIOL \soc_side_rd_data_pin[0]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_pin_c[0] ), 
    .OPOS(\ram_side_chip0_data_pin_in[0] ), .CE(\state[22] ), 
    .LSR(reset_n_pin_c), .CLK(clk_c));
  soc_side_wr_en_pin soc_side_wr_en_pin_I( .PADDI(soc_side_wr_en_pin_c), 
    .soc_side_wr_en_pin(soc_side_wr_en_pin));
  soc_side_wr_mask_pin_3_ \soc_side_wr_mask_pin[3]_I ( 
    .PADDI(\soc_side_wr_mask_pin_c[3] ), 
    .socsidewrmaskpin3(soc_side_wr_mask_pin[3]));
  soc_side_wr_mask_pin_2_ \soc_side_wr_mask_pin[2]_I ( 
    .PADDI(\soc_side_wr_mask_pin_c[2] ), 
    .socsidewrmaskpin2(soc_side_wr_mask_pin[2]));
  soc_side_wr_mask_pin_1_ \soc_side_wr_mask_pin[1]_I ( 
    .PADDI(\soc_side_wr_mask_pin_c[1] ), 
    .socsidewrmaskpin1(soc_side_wr_mask_pin[1]));
  soc_side_wr_mask_pin_0_ \soc_side_wr_mask_pin[0]_I ( 
    .PADDI(\soc_side_wr_mask_pin_c[0] ), 
    .socsidewrmaskpin0(soc_side_wr_mask_pin[0]));
  soc_side_wr_data_pin_31_ \soc_side_wr_data_pin[31]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[31] ), 
    .socsidewrdatapin31(soc_side_wr_data_pin[31]));
  soc_side_wr_data_pin_31__MGIOL \soc_side_wr_data_pin[31]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[31] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[31] ));
  soc_side_wr_data_pin_30_ \soc_side_wr_data_pin[30]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[30] ), 
    .socsidewrdatapin30(soc_side_wr_data_pin[30]));
  soc_side_wr_data_pin_30__MGIOL \soc_side_wr_data_pin[30]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[30] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[30] ));
  soc_side_wr_data_pin_29_ \soc_side_wr_data_pin[29]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[29] ), 
    .socsidewrdatapin29(soc_side_wr_data_pin[29]));
  soc_side_wr_data_pin_29__MGIOL \soc_side_wr_data_pin[29]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[29] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[29] ));
  soc_side_wr_data_pin_28_ \soc_side_wr_data_pin[28]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[28] ), 
    .socsidewrdatapin28(soc_side_wr_data_pin[28]));
  soc_side_wr_data_pin_28__MGIOL \soc_side_wr_data_pin[28]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[28] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[28] ));
  soc_side_wr_data_pin_27_ \soc_side_wr_data_pin[27]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[27] ), 
    .socsidewrdatapin27(soc_side_wr_data_pin[27]));
  soc_side_wr_data_pin_27__MGIOL \soc_side_wr_data_pin[27]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[27] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[27] ));
  soc_side_wr_data_pin_26_ \soc_side_wr_data_pin[26]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[26] ), 
    .socsidewrdatapin26(soc_side_wr_data_pin[26]));
  soc_side_wr_data_pin_26__MGIOL \soc_side_wr_data_pin[26]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[26] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[26] ));
  soc_side_wr_data_pin_25_ \soc_side_wr_data_pin[25]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[25] ), 
    .socsidewrdatapin25(soc_side_wr_data_pin[25]));
  soc_side_wr_data_pin_25__MGIOL \soc_side_wr_data_pin[25]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[25] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[25] ));
  soc_side_wr_data_pin_24_ \soc_side_wr_data_pin[24]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[24] ), 
    .socsidewrdatapin24(soc_side_wr_data_pin[24]));
  soc_side_wr_data_pin_24__MGIOL \soc_side_wr_data_pin[24]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[24] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[24] ));
  soc_side_wr_data_pin_23_ \soc_side_wr_data_pin[23]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[23] ), 
    .socsidewrdatapin23(soc_side_wr_data_pin[23]));
  soc_side_wr_data_pin_23__MGIOL \soc_side_wr_data_pin[23]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[23] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[23] ));
  soc_side_wr_data_pin_22_ \soc_side_wr_data_pin[22]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[22] ), 
    .socsidewrdatapin22(soc_side_wr_data_pin[22]));
  soc_side_wr_data_pin_22__MGIOL \soc_side_wr_data_pin[22]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[22] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[22] ));
  soc_side_wr_data_pin_21_ \soc_side_wr_data_pin[21]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[21] ), 
    .socsidewrdatapin21(soc_side_wr_data_pin[21]));
  soc_side_wr_data_pin_21__MGIOL \soc_side_wr_data_pin[21]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[21] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[21] ));
  soc_side_wr_data_pin_20_ \soc_side_wr_data_pin[20]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[20] ), 
    .socsidewrdatapin20(soc_side_wr_data_pin[20]));
  soc_side_wr_data_pin_20__MGIOL \soc_side_wr_data_pin[20]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[20] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[20] ));
  soc_side_wr_data_pin_19_ \soc_side_wr_data_pin[19]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[19] ), 
    .socsidewrdatapin19(soc_side_wr_data_pin[19]));
  soc_side_wr_data_pin_19__MGIOL \soc_side_wr_data_pin[19]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[19] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[19] ));
  soc_side_wr_data_pin_18_ \soc_side_wr_data_pin[18]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[18] ), 
    .socsidewrdatapin18(soc_side_wr_data_pin[18]));
  soc_side_wr_data_pin_18__MGIOL \soc_side_wr_data_pin[18]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[18] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[18] ));
  soc_side_wr_data_pin_17_ \soc_side_wr_data_pin[17]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[17] ), 
    .socsidewrdatapin17(soc_side_wr_data_pin[17]));
  soc_side_wr_data_pin_17__MGIOL \soc_side_wr_data_pin[17]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[17] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[17] ));
  soc_side_wr_data_pin_16_ \soc_side_wr_data_pin[16]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[16] ), 
    .socsidewrdatapin16(soc_side_wr_data_pin[16]));
  soc_side_wr_data_pin_16__MGIOL \soc_side_wr_data_pin[16]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[16] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[16] ));
  soc_side_wr_data_pin_15_ \soc_side_wr_data_pin[15]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[15] ), 
    .socsidewrdatapin15(soc_side_wr_data_pin[15]));
  soc_side_wr_data_pin_15__MGIOL \soc_side_wr_data_pin[15]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[15] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[15] ));
  soc_side_wr_data_pin_14_ \soc_side_wr_data_pin[14]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[14] ), 
    .socsidewrdatapin14(soc_side_wr_data_pin[14]));
  soc_side_wr_data_pin_14__MGIOL \soc_side_wr_data_pin[14]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[14] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[14] ));
  soc_side_wr_data_pin_13_ \soc_side_wr_data_pin[13]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[13] ), 
    .socsidewrdatapin13(soc_side_wr_data_pin[13]));
  soc_side_wr_data_pin_13__MGIOL \soc_side_wr_data_pin[13]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[13] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[13] ));
  soc_side_wr_data_pin_12_ \soc_side_wr_data_pin[12]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[12] ), 
    .socsidewrdatapin12(soc_side_wr_data_pin[12]));
  soc_side_wr_data_pin_12__MGIOL \soc_side_wr_data_pin[12]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[12] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[12] ));
  soc_side_wr_data_pin_11_ \soc_side_wr_data_pin[11]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[11] ), 
    .socsidewrdatapin11(soc_side_wr_data_pin[11]));
  soc_side_wr_data_pin_11__MGIOL \soc_side_wr_data_pin[11]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[11] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[11] ));
  soc_side_wr_data_pin_10_ \soc_side_wr_data_pin[10]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[10] ), 
    .socsidewrdatapin10(soc_side_wr_data_pin[10]));
  soc_side_wr_data_pin_10__MGIOL \soc_side_wr_data_pin[10]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[10] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[10] ));
  soc_side_wr_data_pin_9_ \soc_side_wr_data_pin[9]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[9] ), 
    .socsidewrdatapin9(soc_side_wr_data_pin[9]));
  soc_side_wr_data_pin_9__MGIOL \soc_side_wr_data_pin[9]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[9] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[9] ));
  soc_side_wr_data_pin_8_ \soc_side_wr_data_pin[8]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[8] ), 
    .socsidewrdatapin8(soc_side_wr_data_pin[8]));
  soc_side_wr_data_pin_8__MGIOL \soc_side_wr_data_pin[8]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[8] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[8] ));
  soc_side_wr_data_pin_7_ \soc_side_wr_data_pin[7]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[7] ), 
    .socsidewrdatapin7(soc_side_wr_data_pin[7]));
  soc_side_wr_data_pin_7__MGIOL \soc_side_wr_data_pin[7]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[7] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[7] ));
  soc_side_wr_data_pin_6_ \soc_side_wr_data_pin[6]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[6] ), 
    .socsidewrdatapin6(soc_side_wr_data_pin[6]));
  soc_side_wr_data_pin_6__MGIOL \soc_side_wr_data_pin[6]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[6] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[6] ));
  soc_side_wr_data_pin_5_ \soc_side_wr_data_pin[5]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[5] ), 
    .socsidewrdatapin5(soc_side_wr_data_pin[5]));
  soc_side_wr_data_pin_5__MGIOL \soc_side_wr_data_pin[5]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[5] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[5] ));
  soc_side_wr_data_pin_4_ \soc_side_wr_data_pin[4]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[4] ), 
    .socsidewrdatapin4(soc_side_wr_data_pin[4]));
  soc_side_wr_data_pin_4__MGIOL \soc_side_wr_data_pin[4]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[4] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[4] ));
  soc_side_wr_data_pin_3_ \soc_side_wr_data_pin[3]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[3] ), 
    .socsidewrdatapin3(soc_side_wr_data_pin[3]));
  soc_side_wr_data_pin_3__MGIOL \soc_side_wr_data_pin[3]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[3] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[3] ));
  soc_side_wr_data_pin_2_ \soc_side_wr_data_pin[2]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[2] ), 
    .socsidewrdatapin2(soc_side_wr_data_pin[2]));
  soc_side_wr_data_pin_2__MGIOL \soc_side_wr_data_pin[2]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[2] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[2] ));
  soc_side_wr_data_pin_1_ \soc_side_wr_data_pin[1]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[1] ), 
    .socsidewrdatapin1(soc_side_wr_data_pin[1]));
  soc_side_wr_data_pin_1__MGIOL \soc_side_wr_data_pin[1]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[1] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[1] ));
  soc_side_wr_data_pin_0_ \soc_side_wr_data_pin[0]_I ( 
    .PADDI(\soc_side_wr_data_pin_c[0] ), 
    .socsidewrdatapin0(soc_side_wr_data_pin[0]));
  soc_side_wr_data_pin_0__MGIOL \soc_side_wr_data_pin[0]_MGIOL ( 
    .DI(\soc_side_wr_data_pin_c[0] ), .CE(soc_side_wr_en_pin_c), 
    .LSR(reset_n_pin_c), .CLK(clk_c), .IN(\wr_data_reg[0] ));
  soc_side_addr_pin_22_ \soc_side_addr_pin[22]_I ( 
    .PADDI(\soc_side_addr_pin_c[22] ), 
    .socsideaddrpin22(soc_side_addr_pin[22]));
  soc_side_addr_pin_21_ \soc_side_addr_pin[21]_I ( 
    .PADDI(\soc_side_addr_pin_c[21] ), 
    .socsideaddrpin21(soc_side_addr_pin[21]));
  soc_side_addr_pin_20_ \soc_side_addr_pin[20]_I ( 
    .PADDI(\soc_side_addr_pin_c[20] ), 
    .socsideaddrpin20(soc_side_addr_pin[20]));
  soc_side_addr_pin_19_ \soc_side_addr_pin[19]_I ( 
    .PADDI(\soc_side_addr_pin_c[19] ), 
    .socsideaddrpin19(soc_side_addr_pin[19]));
  soc_side_addr_pin_18_ \soc_side_addr_pin[18]_I ( 
    .PADDI(\soc_side_addr_pin_c[18] ), 
    .socsideaddrpin18(soc_side_addr_pin[18]));
  soc_side_addr_pin_17_ \soc_side_addr_pin[17]_I ( 
    .PADDI(\soc_side_addr_pin_c[17] ), 
    .socsideaddrpin17(soc_side_addr_pin[17]));
  soc_side_addr_pin_16_ \soc_side_addr_pin[16]_I ( 
    .PADDI(\soc_side_addr_pin_c[16] ), 
    .socsideaddrpin16(soc_side_addr_pin[16]));
  soc_side_addr_pin_15_ \soc_side_addr_pin[15]_I ( 
    .PADDI(\soc_side_addr_pin_c[15] ), 
    .socsideaddrpin15(soc_side_addr_pin[15]));
  soc_side_addr_pin_14_ \soc_side_addr_pin[14]_I ( 
    .PADDI(\soc_side_addr_pin_c[14] ), 
    .socsideaddrpin14(soc_side_addr_pin[14]));
  soc_side_addr_pin_13_ \soc_side_addr_pin[13]_I ( 
    .PADDI(\soc_side_addr_pin_c[13] ), 
    .socsideaddrpin13(soc_side_addr_pin[13]));
  soc_side_addr_pin_12_ \soc_side_addr_pin[12]_I ( 
    .PADDI(\soc_side_addr_pin_c[12] ), 
    .socsideaddrpin12(soc_side_addr_pin[12]));
  soc_side_addr_pin_11_ \soc_side_addr_pin[11]_I ( 
    .PADDI(\soc_side_addr_pin_c[11] ), 
    .socsideaddrpin11(soc_side_addr_pin[11]));
  soc_side_addr_pin_10_ \soc_side_addr_pin[10]_I ( 
    .PADDI(\soc_side_addr_pin_c[10] ), 
    .socsideaddrpin10(soc_side_addr_pin[10]));
  soc_side_addr_pin_9_ \soc_side_addr_pin[9]_I ( 
    .PADDI(\soc_side_addr_pin_c[9] ), .socsideaddrpin9(soc_side_addr_pin[9]));
  soc_side_addr_pin_8_ \soc_side_addr_pin[8]_I ( 
    .PADDI(\soc_side_addr_pin_c[8] ), .socsideaddrpin8(soc_side_addr_pin[8]));
  soc_side_addr_pin_7_ \soc_side_addr_pin[7]_I ( 
    .PADDI(\soc_side_addr_pin_c[7] ), .socsideaddrpin7(soc_side_addr_pin[7]));
  soc_side_addr_pin_6_ \soc_side_addr_pin[6]_I ( 
    .PADDI(\soc_side_addr_pin_c[6] ), .socsideaddrpin6(soc_side_addr_pin[6]));
  soc_side_addr_pin_5_ \soc_side_addr_pin[5]_I ( 
    .PADDI(\soc_side_addr_pin_c[5] ), .socsideaddrpin5(soc_side_addr_pin[5]));
  soc_side_addr_pin_4_ \soc_side_addr_pin[4]_I ( 
    .PADDI(\soc_side_addr_pin_c[4] ), .socsideaddrpin4(soc_side_addr_pin[4]));
  soc_side_addr_pin_3_ \soc_side_addr_pin[3]_I ( 
    .PADDI(\soc_side_addr_pin_c[3] ), .socsideaddrpin3(soc_side_addr_pin[3]));
  soc_side_addr_pin_2_ \soc_side_addr_pin[2]_I ( 
    .PADDI(\soc_side_addr_pin_c[2] ), .socsideaddrpin2(soc_side_addr_pin[2]));
  soc_side_addr_pin_1_ \soc_side_addr_pin[1]_I ( 
    .PADDI(\soc_side_addr_pin_c[1] ), .socsideaddrpin1(soc_side_addr_pin[1]));
  soc_side_addr_pin_0_ \soc_side_addr_pin[0]_I ( 
    .PADDI(\soc_side_addr_pin_c[0] ), .socsideaddrpin0(soc_side_addr_pin[0]));
  soc_side_ready_pin soc_side_ready_pin_I( .IOLDO(soc_side_ready_pin_c), 
    .soc_side_ready_pin(soc_side_ready_pin));
  soc_side_ready_pin_MGIOL soc_side_ready_pin_MGIOL( 
    .IOLDO(soc_side_ready_pin_c), .OPOS(un1_next_ready_reg_1_sqmuxa_0_a2), 
    .CE(ready_reg_0io_RNO), .LSR(reset_n_pin_c), .CLK(clk_c));
  reset_n_pin reset_n_pin_I( .PADDI(reset_n_pin_c), .reset_n_pin(reset_n_pin));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
  GSR GSR_INST( .GSR(VCCI));
endmodule

module SLICE_0 ( input A1, output FCO );
  wire   GNDI;

  ccu2 next_refresh_counter_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module SLICE_1 ( input C1, B1, A1, C0, B0, A0, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \delay_counter[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 un1_delay_counter_16_cry_13_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h50A9;
  defparam inst1.INIT1 = 16'h50A9;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input C1, B1, A1, C0, B0, A0, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \delay_counter[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 un1_delay_counter_16_cry_11_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_3 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_9_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_4 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_7_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_5 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_5_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_6 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \delay_counter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \delay_counter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 un1_delay_counter_16_cry_3_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_7 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_1_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_8 ( input C1, B1, A1, output FCO );
  wire   GNDI;

  ccu20002 un1_delay_counter_16_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h50A9;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_9 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \refresh_counter[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20003 next_refresh_counter_s_15_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_10 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_13_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_11 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_11_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_12 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_9_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_7_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_14 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_5_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_15 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_3_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_1_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_17 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut4 \cas_counter_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 \cas_counter_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cas_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h998A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5652) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_18 ( input C1, B1, A1, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40005 \state_RNI2PV5A[14] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40006 \state_RNI8O7Q8[23] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0007 \cas_counter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3B3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0007 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_19 ( input B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40008 \next_command_i_a3[3] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \command_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \command[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module SLICE_20 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40011 \next_delay_counter_f0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0301) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_21 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40012 \next_delay_counter_f0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \delay_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_22 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 \delay_counter_RNO[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_23 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 \delay_counter_RNO[8] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[9] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_24 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 \delay_counter_RNO[10] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[10] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_25 ( input C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40013 un1_state_6_i_a2_0( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \delay_counter_RNO[14] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[14] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_26 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40014 \init_refresh_counter_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \init_refresh_counter_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \init_refresh_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \init_refresh_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6C6C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_27 ( input C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40016 next_state_0_sqmuxa_6( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40017 \init_refresh_counter_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \init_refresh_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h78F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_28 ( input D1, C1, B1, A1, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40018 \state_srsts_i_a2_5[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40019 \refresh_counter_RNO[0] ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \refresh_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0007) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_29 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40020 \state_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40021 \state_srsts_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0022 \state[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B3B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0022 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vmuxregsre0023 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_30 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40016 \state_RNO[3] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \state_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_31 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40025 \state_RNO[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40024 \state_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0023 \state[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_32 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40026 \state_RNO[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40027 \state_srsts_0[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0023 \state[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_33 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40016 \state_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \state_RNO[8] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[9] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_34 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40028 \state_RNO[11] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 \state_RNO[10] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[11] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0023 \state[10] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h40E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_35 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40026 \state_RNO[13] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40029 \state_RNO[12] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0023 \state[13] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[12] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_36 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40016 \state_RNO[15] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \state_RNO[14] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[15] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[14] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_37 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40016 \state_RNO[17] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \state_RNO[16] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[17] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[16] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_38 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40024 \state_RNO[19] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \state_RNO[18] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[19] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0023 \state[18] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_39 ( input B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40030 \state_RNO[21] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40031 \state_srsts_0_a2[20] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0023 \state[21] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[20] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_40 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40016 \state_RNO[23] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \state_srsts_0_a2[22] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0023 \state[23] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0023 \state[22] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_41 ( input D1, C1, B1, A1, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40033 \state_srsts_i_a2[24] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40008 \state_RNO[24] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0023 \state[24] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h010F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_42 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40034 \next_command_i_o5[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40035 \command_0io_RNO[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0013) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_43 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40036 \addr_reg_iv[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 \addr_reg_iv_RNO[5] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_44 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40036 \addr_reg_iv[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 \addr_reg_iv_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_45 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40038 bank_addr_reg6_i_a2( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \ram_side_addr_pin_2_RNO[10] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_46 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40010 next_state_0_sqmuxa_5_i_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40040 ready_reg_0io_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_47 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40041 \state_srsts_0_o2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016 \state_srsts_0_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_48 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40030 \next_command_i_a5[3] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40042 \command_0io_RNO[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_49 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40043 \state_srsts_i_a2[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016 \state_srsts_0_a2_0[20] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_50 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40044 \next_command_i_o3[5] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \command_0io_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3337) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_51 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40032 un1_next_init_refresh_counter_0_sqmuxa_i_a2( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40046 un1_delay_counter_16_axb_0( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE1E1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_52 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 in_write_cycle_i_a2( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 ram_side_chip1_udqm_pin_pad_RNO( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8A8A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_53 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40049 in_read_cycle_i_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 ram_side_chip1_ldqm_pin_pad_RNO( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_54 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40050 next_state19_c3( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \next_command_i_a5_0[3] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_55 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40011 \state_srsts_i_a2_2[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40011 \state_srsts_i_a2_0[12] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_56 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40042 ram_side_addr_pin_1_0_a2_2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40052 \ram_side_addr_pin_2[10] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_57 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40042 un36_0_a2_0( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40053 un36_0_a2_0_RNIQTQL9( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_58 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40013 un1_state_6_i_a2_1_0( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 un1_state_6_i_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_59 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40038 bank_addr_reg7_i_a2( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40055 \addr_reg_0_iv[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7530) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_60 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40042 ram_side_addr_pin_1_0_a2_1( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40049 ram_side_addr_pin_1_0_a2_3( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_61 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40056 \ram_side_bank_addr_pin_pad_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40056 \ram_side_bank_addr_pin_pad_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_62 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 \ram_side_addr_pin_pad_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40037 \ram_side_addr_pin_pad_RNO[11] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_63 ( input B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40030 \state_srsts_i_a2_0[1] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 un1_reset_n_pin_3_0( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_64 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40048 ram_side_chip0_ldqm_pin_pad_RNO( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 ram_side_chip0_udqm_pin_pad_RNO( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_65 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40055 \addr_reg_0_iv[8] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \addr_reg_0_iv[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_66 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40055 \addr_reg_0_iv[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \addr_reg_0_iv[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_67 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40055 \addr_reg_0_iv[6] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \addr_reg_0_iv[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_68 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40042 in_read_cycle_i_a2_0( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 un1_next_ready_reg_1_sqmuxa_0_a2( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_69 ( input A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40019 busy_reg_0io_RNO( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40058 \next_command_i_0[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFE0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_70 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40038 un1_next_init_refresh_counter_0_sqmuxa_i_a2_0( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40042 in_write_cycle_i_a2_0( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_71 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40059 \next_command_0_tz[0] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40042 un1_next_init_refresh_counter_0_sqmuxa_i_a2_3( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_72 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40042 next_state_0_sqmuxa_5_i_a2_9( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40042 next_state_0_sqmuxa_5_i_a2_10( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_73 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40013 next_state_0_sqmuxa_5_i_a2_7( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40042 next_state_0_sqmuxa_5_i_a2_8( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_74 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40042 \state_srsts_i_a2_1_0[12] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 \state_srsts_0_o2[6] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_75 ( output F0, F1 );
  wire   GNDI;

  lut40060 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40061 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));

  specify
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ram_side_chip0_data_pin_0_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin0 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[0] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin0), .PADI(ramsidechip0datapin0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin0) = (0:0:0,0:0:0);
    (ramsidechip0datapin0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin0, 0:0:0);
    $width (negedge ramsidechip0datapin0, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module soc_side_busy_pin ( input IOLDO, output soc_side_busy_pin );
  wire   GNDI;

  xo2iobuf0062 soc_side_busy_pin_pad( .I(IOLDO), .T(GNDI), 
    .PAD(soc_side_busy_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => soc_side_busy_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0062 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module soc_side_busy_pin_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre busy_reg_0io( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3JX INST01( .D(D0), .SP(SP), .CK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module clk ( output PADDI, input clk );

  xo2iobuf0063 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module xo2iobuf0063 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module ram_side_ck_en_pin ( input PADDO, output ram_side_ck_en_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_ck_en_pin_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_ck_en_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_ck_en_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_wr_en_pin ( input IOLDO, output ram_side_wr_en_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_wr_en_pin_pad( .I(IOLDO), .T(GNDI), 
    .PAD(ram_side_wr_en_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => ram_side_wr_en_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_wr_en_pin_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre \command_0io[3] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ram_side_cas_n_pin ( input IOLDO, output ram_side_cas_n_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_cas_n_pin_pad( .I(IOLDO), .T(GNDI), 
    .PAD(ram_side_cas_n_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => ram_side_cas_n_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_cas_n_pin_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre \command_0io[4] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ram_side_ras_n_pin ( input IOLDO, output ram_side_ras_n_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_ras_n_pin_pad( .I(IOLDO), .T(GNDI), 
    .PAD(ram_side_ras_n_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => ram_side_ras_n_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_ras_n_pin_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre \command_0io[5] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ram_side_cs_n_pin ( input PADDO, output ram_side_cs_n_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_cs_n_pin_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_cs_n_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_cs_n_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_15_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin15 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[15] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin15), .PADI(ramsidechip1datapin15));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin15) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin15) = (0:0:0,0:0:0);
    (ramsidechip1datapin15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin15, 0:0:0);
    $width (negedge ramsidechip1datapin15, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_14_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin14 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[14] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin14), .PADI(ramsidechip1datapin14));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin14) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin14) = (0:0:0,0:0:0);
    (ramsidechip1datapin14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin14, 0:0:0);
    $width (negedge ramsidechip1datapin14, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_13_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin13 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[13] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin13), .PADI(ramsidechip1datapin13));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin13) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin13) = (0:0:0,0:0:0);
    (ramsidechip1datapin13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin13, 0:0:0);
    $width (negedge ramsidechip1datapin13, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_12_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin12 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[12] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin12), .PADI(ramsidechip1datapin12));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin12) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin12) = (0:0:0,0:0:0);
    (ramsidechip1datapin12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin12, 0:0:0);
    $width (negedge ramsidechip1datapin12, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_11_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin11 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[11] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin11), .PADI(ramsidechip1datapin11));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin11) = (0:0:0,0:0:0);
    (ramsidechip1datapin11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin11, 0:0:0);
    $width (negedge ramsidechip1datapin11, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_10_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin10 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[10] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin10), .PADI(ramsidechip1datapin10));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin10) = (0:0:0,0:0:0);
    (ramsidechip1datapin10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin10, 0:0:0);
    $width (negedge ramsidechip1datapin10, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_9_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin9 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[9] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin9), .PADI(ramsidechip1datapin9));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin9) = (0:0:0,0:0:0);
    (ramsidechip1datapin9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin9, 0:0:0);
    $width (negedge ramsidechip1datapin9, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_8_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin8 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[8] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin8), .PADI(ramsidechip1datapin8));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin8) = (0:0:0,0:0:0);
    (ramsidechip1datapin8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin8, 0:0:0);
    $width (negedge ramsidechip1datapin8, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_7_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin7 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[7] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin7), .PADI(ramsidechip1datapin7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin7) = (0:0:0,0:0:0);
    (ramsidechip1datapin7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin7, 0:0:0);
    $width (negedge ramsidechip1datapin7, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_6_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin6 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[6] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin6), .PADI(ramsidechip1datapin6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin6) = (0:0:0,0:0:0);
    (ramsidechip1datapin6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin6, 0:0:0);
    $width (negedge ramsidechip1datapin6, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_5_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin5 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[5] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin5), .PADI(ramsidechip1datapin5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin5) = (0:0:0,0:0:0);
    (ramsidechip1datapin5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin5, 0:0:0);
    $width (negedge ramsidechip1datapin5, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_4_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin4 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[4] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin4), .PADI(ramsidechip1datapin4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin4) = (0:0:0,0:0:0);
    (ramsidechip1datapin4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin4, 0:0:0);
    $width (negedge ramsidechip1datapin4, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_3_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin3 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[3] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin3), .PADI(ramsidechip1datapin3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin3) = (0:0:0,0:0:0);
    (ramsidechip1datapin3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin3, 0:0:0);
    $width (negedge ramsidechip1datapin3, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_2_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin2 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[2] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin2), .PADI(ramsidechip1datapin2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin2) = (0:0:0,0:0:0);
    (ramsidechip1datapin2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin2, 0:0:0);
    $width (negedge ramsidechip1datapin2, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_1_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin1 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[1] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin1), .PADI(ramsidechip1datapin1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin1) = (0:0:0,0:0:0);
    (ramsidechip1datapin1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin1, 0:0:0);
    $width (negedge ramsidechip1datapin1, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_pin_0_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1datapin0 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_pin_pad[0] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1datapin0), .PADI(ramsidechip1datapin0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1datapin0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1datapin0) = (0:0:0,0:0:0);
    (ramsidechip1datapin0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1datapin0, 0:0:0);
    $width (negedge ramsidechip1datapin0, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_udqm_pin ( input PADDO, output ram_side_chip1_udqm_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_chip1_udqm_pin_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip1_udqm_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip1_udqm_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip1_ldqm_pin ( input PADDO, output ram_side_chip1_ldqm_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_chip1_ldqm_pin_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip1_ldqm_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip1_ldqm_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_15_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin15 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[15] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin15), .PADI(ramsidechip0datapin15));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin15) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin15) = (0:0:0,0:0:0);
    (ramsidechip0datapin15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin15, 0:0:0);
    $width (negedge ramsidechip0datapin15, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_14_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin14 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[14] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin14), .PADI(ramsidechip0datapin14));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin14) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin14) = (0:0:0,0:0:0);
    (ramsidechip0datapin14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin14, 0:0:0);
    $width (negedge ramsidechip0datapin14, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_13_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin13 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[13] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin13), .PADI(ramsidechip0datapin13));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin13) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin13) = (0:0:0,0:0:0);
    (ramsidechip0datapin13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin13, 0:0:0);
    $width (negedge ramsidechip0datapin13, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_12_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin12 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[12] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin12), .PADI(ramsidechip0datapin12));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin12) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin12) = (0:0:0,0:0:0);
    (ramsidechip0datapin12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin12, 0:0:0);
    $width (negedge ramsidechip0datapin12, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_11_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin11 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[11] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin11), .PADI(ramsidechip0datapin11));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin11) = (0:0:0,0:0:0);
    (ramsidechip0datapin11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin11, 0:0:0);
    $width (negedge ramsidechip0datapin11, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_10_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin10 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[10] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin10), .PADI(ramsidechip0datapin10));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin10) = (0:0:0,0:0:0);
    (ramsidechip0datapin10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin10, 0:0:0);
    $width (negedge ramsidechip0datapin10, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_9_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin9 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[9] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin9), .PADI(ramsidechip0datapin9));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin9) = (0:0:0,0:0:0);
    (ramsidechip0datapin9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin9, 0:0:0);
    $width (negedge ramsidechip0datapin9, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_8_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin8 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[8] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin8), .PADI(ramsidechip0datapin8));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin8) = (0:0:0,0:0:0);
    (ramsidechip0datapin8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin8, 0:0:0);
    $width (negedge ramsidechip0datapin8, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_7_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin7 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[7] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin7), .PADI(ramsidechip0datapin7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin7) = (0:0:0,0:0:0);
    (ramsidechip0datapin7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin7, 0:0:0);
    $width (negedge ramsidechip0datapin7, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_6_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin6 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[6] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin6), .PADI(ramsidechip0datapin6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin6) = (0:0:0,0:0:0);
    (ramsidechip0datapin6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin6, 0:0:0);
    $width (negedge ramsidechip0datapin6, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_5_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin5 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[5] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin5), .PADI(ramsidechip0datapin5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin5) = (0:0:0,0:0:0);
    (ramsidechip0datapin5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin5, 0:0:0);
    $width (negedge ramsidechip0datapin5, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_4_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin4 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[4] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin4), .PADI(ramsidechip0datapin4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin4) = (0:0:0,0:0:0);
    (ramsidechip0datapin4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin4, 0:0:0);
    $width (negedge ramsidechip0datapin4, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_3_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin3 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[3] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin3), .PADI(ramsidechip0datapin3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin3) = (0:0:0,0:0:0);
    (ramsidechip0datapin3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin3, 0:0:0);
    $width (negedge ramsidechip0datapin3, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_2_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin2 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[2] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin2), .PADI(ramsidechip0datapin2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin2) = (0:0:0,0:0:0);
    (ramsidechip0datapin2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin2, 0:0:0);
    $width (negedge ramsidechip0datapin2, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_pin_1_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0datapin1 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_pin_pad[1] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0datapin1), .PADI(ramsidechip0datapin1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0datapin1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0datapin1) = (0:0:0,0:0:0);
    (ramsidechip0datapin1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0datapin1, 0:0:0);
    $width (negedge ramsidechip0datapin1, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_udqm_pin ( input PADDO, output ram_side_chip0_udqm_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_chip0_udqm_pin_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip0_udqm_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip0_udqm_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip0_ldqm_pin ( input PADDO, output ram_side_chip0_ldqm_pin );
  wire   GNDI;

  xo2iobuf0062 ram_side_chip0_ldqm_pin_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip0_ldqm_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip0_ldqm_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_bank_addr_pin_1_ ( input PADDO, output ramsidebankaddrpin1 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_bank_addr_pin_pad[1] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsidebankaddrpin1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsidebankaddrpin1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_bank_addr_pin_0_ ( input PADDO, output ramsidebankaddrpin0 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_bank_addr_pin_pad[0] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsidebankaddrpin0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsidebankaddrpin0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_11_ ( input PADDO, output ramsideaddrpin11 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[11] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin11) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_10_ ( input PADDO, output ramsideaddrpin10 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[10] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin10) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_9_ ( input PADDO, output ramsideaddrpin9 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[9] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin9) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_8_ ( input PADDO, output ramsideaddrpin8 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[8] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin8) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_7_ ( input PADDO, output ramsideaddrpin7 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[7] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin7) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_6_ ( input PADDO, output ramsideaddrpin6 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[6] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin6) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_5_ ( input PADDO, output ramsideaddrpin5 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[5] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin5) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_4_ ( input PADDO, output ramsideaddrpin4 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[4] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin4) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_3_ ( input PADDO, output ramsideaddrpin3 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[3] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin3) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_2_ ( input PADDO, output ramsideaddrpin2 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[2] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin2) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_1_ ( input PADDO, output ramsideaddrpin1 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[1] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_pin_0_ ( input PADDO, output ramsideaddrpin0 );
  wire   GNDI;

  xo2iobuf0062 \ram_side_addr_pin_pad[0] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrpin0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrpin0) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_en_pin ( output PADDI, input soc_side_rd_en_pin );

  xo2iobuf0064 soc_side_rd_en_pin_pad( .Z(PADDI), .PAD(soc_side_rd_en_pin));

  specify
    (soc_side_rd_en_pin => PADDI) = (0:0:0,0:0:0);
    $width (posedge soc_side_rd_en_pin, 0:0:0);
    $width (negedge soc_side_rd_en_pin, 0:0:0);
  endspecify

endmodule

module xo2iobuf0064 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module soc_side_rd_data_pin_31_ ( input IOLDO, output socsiderddatapin31 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[31] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin31));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin31) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_31__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[31] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre0065 ( input D0, SP, CK, LSR, output Q );

  FD1P3IX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module soc_side_rd_data_pin_30_ ( input IOLDO, output socsiderddatapin30 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[30] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin30));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin30) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_30__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[30] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_29_ ( input IOLDO, output socsiderddatapin29 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[29] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin29));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin29) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_29__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[29] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_28_ ( input IOLDO, output socsiderddatapin28 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[28] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin28));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin28) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_28__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[28] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_27_ ( input IOLDO, output socsiderddatapin27 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[27] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin27));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin27) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_27__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[27] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_26_ ( input IOLDO, output socsiderddatapin26 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[26] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin26));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin26) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_26__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[26] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_25_ ( input IOLDO, output socsiderddatapin25 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[25] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin25));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin25) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_25__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[25] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_24_ ( input IOLDO, output socsiderddatapin24 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[24] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin24));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin24) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_24__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[24] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_23_ ( input IOLDO, output socsiderddatapin23 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[23] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin23));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin23) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_23__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[23] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_22_ ( input IOLDO, output socsiderddatapin22 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[22] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin22));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin22) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_22__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[22] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_21_ ( input IOLDO, output socsiderddatapin21 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[21] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin21));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin21) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_21__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[21] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_20_ ( input IOLDO, output socsiderddatapin20 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[20] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin20));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin20) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_20__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[20] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_19_ ( input IOLDO, output socsiderddatapin19 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[19] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin19));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin19) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_19__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[19] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_18_ ( input IOLDO, output socsiderddatapin18 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[18] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin18));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin18) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_18__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[18] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_17_ ( input IOLDO, output socsiderddatapin17 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[17] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin17));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin17) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_17__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[17] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_16_ ( input IOLDO, output socsiderddatapin16 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[16] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin16));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin16) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_16__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[16] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_15_ ( input IOLDO, output socsiderddatapin15 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[15] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin15) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_15__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[15] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_14_ ( input IOLDO, output socsiderddatapin14 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[14] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin14));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin14) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_14__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[14] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_13_ ( input IOLDO, output socsiderddatapin13 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[13] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin13) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_13__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[13] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_12_ ( input IOLDO, output socsiderddatapin12 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[12] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin12) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_12__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[12] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_11_ ( input IOLDO, output socsiderddatapin11 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[11] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin11) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_11__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[11] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_10_ ( input IOLDO, output socsiderddatapin10 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[10] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin10) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_10__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[10] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_9_ ( input IOLDO, output socsiderddatapin9 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[9] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin9) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_9__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[9] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_8_ ( input IOLDO, output socsiderddatapin8 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[8] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin8) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_8__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[8] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_7_ ( input IOLDO, output socsiderddatapin7 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[7] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin7) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_7__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[7] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_6_ ( input IOLDO, output socsiderddatapin6 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[6] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin6) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_6__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[6] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_5_ ( input IOLDO, output socsiderddatapin5 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[5] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin5) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_5__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[5] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_4_ ( input IOLDO, output socsiderddatapin4 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[4] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin4) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_4__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[4] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_3_ ( input IOLDO, output socsiderddatapin3 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[3] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin3) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_3__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[3] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_2_ ( input IOLDO, output socsiderddatapin2 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[2] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin2) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_2__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[2] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_1_ ( input IOLDO, output socsiderddatapin1 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[1] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin1) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_1__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[1] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_0_ ( input IOLDO, output socsiderddatapin0 );
  wire   GNDI;

  xo2iobuf0062 \soc_side_rd_data_pin_pad[0] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddatapin0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddatapin0) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_pin_0__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 \rd_data_reg_0io[0] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_en_pin ( output PADDI, input soc_side_wr_en_pin );

  xo2iobuf0064 soc_side_wr_en_pin_pad( .Z(PADDI), .PAD(soc_side_wr_en_pin));

  specify
    (soc_side_wr_en_pin => PADDI) = (0:0:0,0:0:0);
    $width (posedge soc_side_wr_en_pin, 0:0:0);
    $width (negedge soc_side_wr_en_pin, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_pin_3_ ( output PADDI, input socsidewrmaskpin3 );

  xo2iobuf0064 \soc_side_wr_mask_pin_pad[3] ( .Z(PADDI), 
    .PAD(socsidewrmaskpin3));

  specify
    (socsidewrmaskpin3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskpin3, 0:0:0);
    $width (negedge socsidewrmaskpin3, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_pin_2_ ( output PADDI, input socsidewrmaskpin2 );

  xo2iobuf0064 \soc_side_wr_mask_pin_pad[2] ( .Z(PADDI), 
    .PAD(socsidewrmaskpin2));

  specify
    (socsidewrmaskpin2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskpin2, 0:0:0);
    $width (negedge socsidewrmaskpin2, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_pin_1_ ( output PADDI, input socsidewrmaskpin1 );

  xo2iobuf0064 \soc_side_wr_mask_pin_pad[1] ( .Z(PADDI), 
    .PAD(socsidewrmaskpin1));

  specify
    (socsidewrmaskpin1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskpin1, 0:0:0);
    $width (negedge socsidewrmaskpin1, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_pin_0_ ( output PADDI, input socsidewrmaskpin0 );

  xo2iobuf0064 \soc_side_wr_mask_pin_pad[0] ( .Z(PADDI), 
    .PAD(socsidewrmaskpin0));

  specify
    (socsidewrmaskpin0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskpin0, 0:0:0);
    $width (negedge socsidewrmaskpin0, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_31_ ( output PADDI, input socsidewrdatapin31 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[31] ( .Z(PADDI), 
    .PAD(socsidewrdatapin31));

  specify
    (socsidewrdatapin31 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin31, 0:0:0);
    $width (negedge socsidewrdatapin31, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_31__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[31] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3IX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module soc_side_wr_data_pin_30_ ( output PADDI, input socsidewrdatapin30 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[30] ( .Z(PADDI), 
    .PAD(socsidewrdatapin30));

  specify
    (socsidewrdatapin30 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin30, 0:0:0);
    $width (negedge socsidewrdatapin30, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_30__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[30] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_29_ ( output PADDI, input socsidewrdatapin29 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[29] ( .Z(PADDI), 
    .PAD(socsidewrdatapin29));

  specify
    (socsidewrdatapin29 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin29, 0:0:0);
    $width (negedge socsidewrdatapin29, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_29__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[29] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_28_ ( output PADDI, input socsidewrdatapin28 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[28] ( .Z(PADDI), 
    .PAD(socsidewrdatapin28));

  specify
    (socsidewrdatapin28 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin28, 0:0:0);
    $width (negedge socsidewrdatapin28, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_28__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[28] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_27_ ( output PADDI, input socsidewrdatapin27 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[27] ( .Z(PADDI), 
    .PAD(socsidewrdatapin27));

  specify
    (socsidewrdatapin27 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin27, 0:0:0);
    $width (negedge socsidewrdatapin27, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_27__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[27] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_26_ ( output PADDI, input socsidewrdatapin26 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[26] ( .Z(PADDI), 
    .PAD(socsidewrdatapin26));

  specify
    (socsidewrdatapin26 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin26, 0:0:0);
    $width (negedge socsidewrdatapin26, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_26__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[26] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_25_ ( output PADDI, input socsidewrdatapin25 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[25] ( .Z(PADDI), 
    .PAD(socsidewrdatapin25));

  specify
    (socsidewrdatapin25 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin25, 0:0:0);
    $width (negedge socsidewrdatapin25, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_25__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[25] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_24_ ( output PADDI, input socsidewrdatapin24 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[24] ( .Z(PADDI), 
    .PAD(socsidewrdatapin24));

  specify
    (socsidewrdatapin24 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin24, 0:0:0);
    $width (negedge socsidewrdatapin24, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_24__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[24] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_23_ ( output PADDI, input socsidewrdatapin23 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[23] ( .Z(PADDI), 
    .PAD(socsidewrdatapin23));

  specify
    (socsidewrdatapin23 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin23, 0:0:0);
    $width (negedge socsidewrdatapin23, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_23__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[23] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_22_ ( output PADDI, input socsidewrdatapin22 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[22] ( .Z(PADDI), 
    .PAD(socsidewrdatapin22));

  specify
    (socsidewrdatapin22 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin22, 0:0:0);
    $width (negedge socsidewrdatapin22, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_22__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[22] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_21_ ( output PADDI, input socsidewrdatapin21 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[21] ( .Z(PADDI), 
    .PAD(socsidewrdatapin21));

  specify
    (socsidewrdatapin21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin21, 0:0:0);
    $width (negedge socsidewrdatapin21, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_21__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[21] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_20_ ( output PADDI, input socsidewrdatapin20 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[20] ( .Z(PADDI), 
    .PAD(socsidewrdatapin20));

  specify
    (socsidewrdatapin20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin20, 0:0:0);
    $width (negedge socsidewrdatapin20, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_20__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[20] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_19_ ( output PADDI, input socsidewrdatapin19 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[19] ( .Z(PADDI), 
    .PAD(socsidewrdatapin19));

  specify
    (socsidewrdatapin19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin19, 0:0:0);
    $width (negedge socsidewrdatapin19, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_19__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[19] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_18_ ( output PADDI, input socsidewrdatapin18 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[18] ( .Z(PADDI), 
    .PAD(socsidewrdatapin18));

  specify
    (socsidewrdatapin18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin18, 0:0:0);
    $width (negedge socsidewrdatapin18, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_18__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[18] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_17_ ( output PADDI, input socsidewrdatapin17 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[17] ( .Z(PADDI), 
    .PAD(socsidewrdatapin17));

  specify
    (socsidewrdatapin17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin17, 0:0:0);
    $width (negedge socsidewrdatapin17, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_17__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[17] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_16_ ( output PADDI, input socsidewrdatapin16 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[16] ( .Z(PADDI), 
    .PAD(socsidewrdatapin16));

  specify
    (socsidewrdatapin16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin16, 0:0:0);
    $width (negedge socsidewrdatapin16, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_16__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[16] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_15_ ( output PADDI, input socsidewrdatapin15 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[15] ( .Z(PADDI), 
    .PAD(socsidewrdatapin15));

  specify
    (socsidewrdatapin15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin15, 0:0:0);
    $width (negedge socsidewrdatapin15, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_15__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_14_ ( output PADDI, input socsidewrdatapin14 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[14] ( .Z(PADDI), 
    .PAD(socsidewrdatapin14));

  specify
    (socsidewrdatapin14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin14, 0:0:0);
    $width (negedge socsidewrdatapin14, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_14__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_13_ ( output PADDI, input socsidewrdatapin13 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[13] ( .Z(PADDI), 
    .PAD(socsidewrdatapin13));

  specify
    (socsidewrdatapin13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin13, 0:0:0);
    $width (negedge socsidewrdatapin13, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_13__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_12_ ( output PADDI, input socsidewrdatapin12 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[12] ( .Z(PADDI), 
    .PAD(socsidewrdatapin12));

  specify
    (socsidewrdatapin12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin12, 0:0:0);
    $width (negedge socsidewrdatapin12, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_12__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_11_ ( output PADDI, input socsidewrdatapin11 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[11] ( .Z(PADDI), 
    .PAD(socsidewrdatapin11));

  specify
    (socsidewrdatapin11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin11, 0:0:0);
    $width (negedge socsidewrdatapin11, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_11__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_10_ ( output PADDI, input socsidewrdatapin10 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[10] ( .Z(PADDI), 
    .PAD(socsidewrdatapin10));

  specify
    (socsidewrdatapin10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin10, 0:0:0);
    $width (negedge socsidewrdatapin10, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_10__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_9_ ( output PADDI, input socsidewrdatapin9 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[9] ( .Z(PADDI), 
    .PAD(socsidewrdatapin9));

  specify
    (socsidewrdatapin9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin9, 0:0:0);
    $width (negedge socsidewrdatapin9, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_9__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_8_ ( output PADDI, input socsidewrdatapin8 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[8] ( .Z(PADDI), 
    .PAD(socsidewrdatapin8));

  specify
    (socsidewrdatapin8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin8, 0:0:0);
    $width (negedge socsidewrdatapin8, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_8__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_7_ ( output PADDI, input socsidewrdatapin7 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[7] ( .Z(PADDI), 
    .PAD(socsidewrdatapin7));

  specify
    (socsidewrdatapin7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin7, 0:0:0);
    $width (negedge socsidewrdatapin7, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_7__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_6_ ( output PADDI, input socsidewrdatapin6 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[6] ( .Z(PADDI), 
    .PAD(socsidewrdatapin6));

  specify
    (socsidewrdatapin6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin6, 0:0:0);
    $width (negedge socsidewrdatapin6, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_6__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_5_ ( output PADDI, input socsidewrdatapin5 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[5] ( .Z(PADDI), 
    .PAD(socsidewrdatapin5));

  specify
    (socsidewrdatapin5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin5, 0:0:0);
    $width (negedge socsidewrdatapin5, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_5__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_4_ ( output PADDI, input socsidewrdatapin4 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[4] ( .Z(PADDI), 
    .PAD(socsidewrdatapin4));

  specify
    (socsidewrdatapin4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin4, 0:0:0);
    $width (negedge socsidewrdatapin4, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_4__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_3_ ( output PADDI, input socsidewrdatapin3 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[3] ( .Z(PADDI), 
    .PAD(socsidewrdatapin3));

  specify
    (socsidewrdatapin3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin3, 0:0:0);
    $width (negedge socsidewrdatapin3, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_3__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_2_ ( output PADDI, input socsidewrdatapin2 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[2] ( .Z(PADDI), 
    .PAD(socsidewrdatapin2));

  specify
    (socsidewrdatapin2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin2, 0:0:0);
    $width (negedge socsidewrdatapin2, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_2__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_1_ ( output PADDI, input socsidewrdatapin1 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[1] ( .Z(PADDI), 
    .PAD(socsidewrdatapin1));

  specify
    (socsidewrdatapin1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin1, 0:0:0);
    $width (negedge socsidewrdatapin1, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_1__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_0_ ( output PADDI, input socsidewrdatapin0 );

  xo2iobuf0064 \soc_side_wr_data_pin_pad[0] ( .Z(PADDI), 
    .PAD(socsidewrdatapin0));

  specify
    (socsidewrdatapin0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdatapin0, 0:0:0);
    $width (negedge socsidewrdatapin0, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_pin_0__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_22_ ( output PADDI, input socsideaddrpin22 );

  xo2iobuf0064 \soc_side_addr_pin_pad[22] ( .Z(PADDI), .PAD(socsideaddrpin22));

  specify
    (socsideaddrpin22 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin22, 0:0:0);
    $width (negedge socsideaddrpin22, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_21_ ( output PADDI, input socsideaddrpin21 );

  xo2iobuf0064 \soc_side_addr_pin_pad[21] ( .Z(PADDI), .PAD(socsideaddrpin21));

  specify
    (socsideaddrpin21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin21, 0:0:0);
    $width (negedge socsideaddrpin21, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_20_ ( output PADDI, input socsideaddrpin20 );

  xo2iobuf0064 \soc_side_addr_pin_pad[20] ( .Z(PADDI), .PAD(socsideaddrpin20));

  specify
    (socsideaddrpin20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin20, 0:0:0);
    $width (negedge socsideaddrpin20, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_19_ ( output PADDI, input socsideaddrpin19 );

  xo2iobuf0064 \soc_side_addr_pin_pad[19] ( .Z(PADDI), .PAD(socsideaddrpin19));

  specify
    (socsideaddrpin19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin19, 0:0:0);
    $width (negedge socsideaddrpin19, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_18_ ( output PADDI, input socsideaddrpin18 );

  xo2iobuf0064 \soc_side_addr_pin_pad[18] ( .Z(PADDI), .PAD(socsideaddrpin18));

  specify
    (socsideaddrpin18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin18, 0:0:0);
    $width (negedge socsideaddrpin18, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_17_ ( output PADDI, input socsideaddrpin17 );

  xo2iobuf0064 \soc_side_addr_pin_pad[17] ( .Z(PADDI), .PAD(socsideaddrpin17));

  specify
    (socsideaddrpin17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin17, 0:0:0);
    $width (negedge socsideaddrpin17, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_16_ ( output PADDI, input socsideaddrpin16 );

  xo2iobuf0064 \soc_side_addr_pin_pad[16] ( .Z(PADDI), .PAD(socsideaddrpin16));

  specify
    (socsideaddrpin16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin16, 0:0:0);
    $width (negedge socsideaddrpin16, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_15_ ( output PADDI, input socsideaddrpin15 );

  xo2iobuf0064 \soc_side_addr_pin_pad[15] ( .Z(PADDI), .PAD(socsideaddrpin15));

  specify
    (socsideaddrpin15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin15, 0:0:0);
    $width (negedge socsideaddrpin15, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_14_ ( output PADDI, input socsideaddrpin14 );

  xo2iobuf0064 \soc_side_addr_pin_pad[14] ( .Z(PADDI), .PAD(socsideaddrpin14));

  specify
    (socsideaddrpin14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin14, 0:0:0);
    $width (negedge socsideaddrpin14, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_13_ ( output PADDI, input socsideaddrpin13 );

  xo2iobuf0064 \soc_side_addr_pin_pad[13] ( .Z(PADDI), .PAD(socsideaddrpin13));

  specify
    (socsideaddrpin13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin13, 0:0:0);
    $width (negedge socsideaddrpin13, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_12_ ( output PADDI, input socsideaddrpin12 );

  xo2iobuf0064 \soc_side_addr_pin_pad[12] ( .Z(PADDI), .PAD(socsideaddrpin12));

  specify
    (socsideaddrpin12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin12, 0:0:0);
    $width (negedge socsideaddrpin12, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_11_ ( output PADDI, input socsideaddrpin11 );

  xo2iobuf0064 \soc_side_addr_pin_pad[11] ( .Z(PADDI), .PAD(socsideaddrpin11));

  specify
    (socsideaddrpin11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin11, 0:0:0);
    $width (negedge socsideaddrpin11, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_10_ ( output PADDI, input socsideaddrpin10 );

  xo2iobuf0064 \soc_side_addr_pin_pad[10] ( .Z(PADDI), .PAD(socsideaddrpin10));

  specify
    (socsideaddrpin10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin10, 0:0:0);
    $width (negedge socsideaddrpin10, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_9_ ( output PADDI, input socsideaddrpin9 );

  xo2iobuf0064 \soc_side_addr_pin_pad[9] ( .Z(PADDI), .PAD(socsideaddrpin9));

  specify
    (socsideaddrpin9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin9, 0:0:0);
    $width (negedge socsideaddrpin9, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_8_ ( output PADDI, input socsideaddrpin8 );

  xo2iobuf0064 \soc_side_addr_pin_pad[8] ( .Z(PADDI), .PAD(socsideaddrpin8));

  specify
    (socsideaddrpin8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin8, 0:0:0);
    $width (negedge socsideaddrpin8, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_7_ ( output PADDI, input socsideaddrpin7 );

  xo2iobuf0064 \soc_side_addr_pin_pad[7] ( .Z(PADDI), .PAD(socsideaddrpin7));

  specify
    (socsideaddrpin7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin7, 0:0:0);
    $width (negedge socsideaddrpin7, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_6_ ( output PADDI, input socsideaddrpin6 );

  xo2iobuf0064 \soc_side_addr_pin_pad[6] ( .Z(PADDI), .PAD(socsideaddrpin6));

  specify
    (socsideaddrpin6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin6, 0:0:0);
    $width (negedge socsideaddrpin6, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_5_ ( output PADDI, input socsideaddrpin5 );

  xo2iobuf0064 \soc_side_addr_pin_pad[5] ( .Z(PADDI), .PAD(socsideaddrpin5));

  specify
    (socsideaddrpin5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin5, 0:0:0);
    $width (negedge socsideaddrpin5, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_4_ ( output PADDI, input socsideaddrpin4 );

  xo2iobuf0064 \soc_side_addr_pin_pad[4] ( .Z(PADDI), .PAD(socsideaddrpin4));

  specify
    (socsideaddrpin4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin4, 0:0:0);
    $width (negedge socsideaddrpin4, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_3_ ( output PADDI, input socsideaddrpin3 );

  xo2iobuf0064 \soc_side_addr_pin_pad[3] ( .Z(PADDI), .PAD(socsideaddrpin3));

  specify
    (socsideaddrpin3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin3, 0:0:0);
    $width (negedge socsideaddrpin3, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_2_ ( output PADDI, input socsideaddrpin2 );

  xo2iobuf0064 \soc_side_addr_pin_pad[2] ( .Z(PADDI), .PAD(socsideaddrpin2));

  specify
    (socsideaddrpin2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin2, 0:0:0);
    $width (negedge socsideaddrpin2, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_1_ ( output PADDI, input socsideaddrpin1 );

  xo2iobuf0064 \soc_side_addr_pin_pad[1] ( .Z(PADDI), .PAD(socsideaddrpin1));

  specify
    (socsideaddrpin1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin1, 0:0:0);
    $width (negedge socsideaddrpin1, 0:0:0);
  endspecify

endmodule

module soc_side_addr_pin_0_ ( output PADDI, input socsideaddrpin0 );

  xo2iobuf0064 \soc_side_addr_pin_pad[0] ( .Z(PADDI), .PAD(socsideaddrpin0));

  specify
    (socsideaddrpin0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrpin0, 0:0:0);
    $width (negedge socsideaddrpin0, 0:0:0);
  endspecify

endmodule

module soc_side_ready_pin ( input IOLDO, output soc_side_ready_pin );
  wire   GNDI;

  xo2iobuf0062 soc_side_ready_pin_pad( .I(IOLDO), .T(GNDI), 
    .PAD(soc_side_ready_pin));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => soc_side_ready_pin) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_ready_pin_MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0065 ready_reg_0io( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module reset_n_pin ( output PADDI, input reset_n_pin );

  xo2iobuf0064 reset_n_pin_pad( .Z(PADDI), .PAD(reset_n_pin));

  specify
    (reset_n_pin => PADDI) = (0:0:0,0:0:0);
    $width (posedge reset_n_pin, 0:0:0);
    $width (negedge reset_n_pin, 0:0:0);
  endspecify

endmodule
