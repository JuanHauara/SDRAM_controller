
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.14.0.75.2

// ldbanno -n Verilog -o sdram_controller_impl1_mapvo.vo -w -neg -gui -msgset C:/lscc/diamond/projects/SDRAM_controller/sdram_controller/promote.xml sdram_controller_impl1_map.ncd 
// Netlist created on Fri Mar 28 17:39:50 2025
// Netlist written on Fri Mar 28 17:39:51 2025
// Design is for device LCMXO2-4000HC
// Design is for package CABGA332
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module sdram_controller ( clk, reset_n_port, soc_side_busy_port, 
                          soc_side_ready_port, soc_side_addr_port, 
                          soc_side_rd_data_port, soc_side_rd_en_port, 
                          soc_side_wr_data_port, soc_side_wr_mask_port, 
                          soc_side_wr_en_port, ram_side_addr_port, 
                          ram_side_bank_addr_port, ram_side_chip0_ldqm_port, 
                          ram_side_chip0_udqm_port, ram_side_chip0_data_port, 
                          ram_side_chip1_ldqm_port, ram_side_chip1_udqm_port, 
                          ram_side_chip1_data_port, ram_side_cs_n_port, 
                          ram_side_ras_n_port, ram_side_cas_n_port, 
                          ram_side_wr_en_port, ram_side_ck_en_port );
  input  clk, reset_n_port;
  input  [22:0] soc_side_addr_port;
  input  soc_side_rd_en_port;
  input  [31:0] soc_side_wr_data_port;
  input  [3:0] soc_side_wr_mask_port;
  input  soc_side_wr_en_port;
  output soc_side_busy_port, soc_side_ready_port;
  output [31:0] soc_side_rd_data_port;
  output [11:0] ram_side_addr_port;
  output [1:0] ram_side_bank_addr_port;
  output ram_side_chip0_ldqm_port, ram_side_chip0_udqm_port, 
         ram_side_chip1_ldqm_port, ram_side_chip1_udqm_port, 
         ram_side_cs_n_port, ram_side_ras_n_port, ram_side_cas_n_port, 
         ram_side_wr_en_port, ram_side_ck_en_port;
  inout  [15:0] ram_side_chip0_data_port;
  inout  [15:0] ram_side_chip1_data_port;
  wire   \refresh_counter[0] , next_refresh_counter_cry_0, 
         next_state_0_sqmuxa_7_i_a2, N_141, \delay_counter[14] , 
         \delay_counter[13] , \next_delay_counter[13] , 
         un46_0_a2_0_o2_RNINEOC9, clk_c, un1_delay_counter_16_cry_12, 
         un1_delay_counter_16_cry_13_0_S1, \delay_counter[12] , 
         \delay_counter[11] , \next_delay_counter[11] , 
         un1_delay_counter_16_cry_10, un1_delay_counter_16_cry_11_0_S1, 
         \delay_counter[10] , \delay_counter[9] , un1_delay_counter_16_cry_8, 
         un1_delay_counter_16_cry_9_0_S0, un1_delay_counter_16_cry_9_0_S1, 
         \delay_counter[8] , \delay_counter[7] , un1_delay_counter_16_cry_6, 
         un1_delay_counter_16_cry_7_0_S0, un1_delay_counter_16_cry_7_0_S1, 
         \delay_counter[6] , \delay_counter[5] , un1_delay_counter_16_cry_4, 
         un1_delay_counter_16_cry_5_0_S0, un1_delay_counter_16_cry_5_0_S1, 
         \delay_counter[4] , \delay_counter[3] , \next_delay_counter[4] , 
         \next_delay_counter[3] , un1_delay_counter_16_cry_2, 
         \delay_counter[2] , \delay_counter[1] , un1_delay_counter_16_cry_0, 
         un1_delay_counter_16_cry_1_0_S0, un1_delay_counter_16_cry_1_0_S1, 
         \delay_counter[0] , \refresh_counter[15] , \refresh_counter_3[15] , 
         \present_state_RNI20RGF[14] , next_refresh_counter_cry_14, 
         \refresh_counter[14] , \refresh_counter[13] , \refresh_counter_3[14] , 
         \refresh_counter_3[13] , next_refresh_counter_cry_12, 
         \refresh_counter[12] , \refresh_counter[11] , \refresh_counter_3[12] , 
         \refresh_counter_3[11] , next_refresh_counter_cry_10, 
         \refresh_counter[10] , \refresh_counter[9] , \refresh_counter_3[10] , 
         \refresh_counter_3[9] , next_refresh_counter_cry_8, 
         \refresh_counter[8] , \refresh_counter[7] , \refresh_counter_3[8] , 
         \refresh_counter_3[7] , next_refresh_counter_cry_6, 
         \refresh_counter[6] , \refresh_counter[5] , \refresh_counter_3[6] , 
         \refresh_counter_3[5] , next_refresh_counter_cry_4, 
         \refresh_counter[4] , \refresh_counter[3] , \refresh_counter_3[4] , 
         \refresh_counter_3[3] , next_refresh_counter_cry_2, 
         \refresh_counter[2] , \refresh_counter[1] , \refresh_counter_3[2] , 
         \refresh_counter_3[1] , \present_state[24] , \cas_counter[0] , 
         \cas_counter[1] , \present_state[23] , N_181_i_0, N_567_i, N_182_i_0, 
         reset_n_port_c, N_220, \present_state[1] , \present_state[0] , 
         \present_state_srsts_i_a2[12] , \present_state[19] , 
         \present_state[11] , N_95, \next_command[0] , \command[0] , N_109, 
         N_239, \un1_delay_counter_16[0] , \present_state[15] , 
         \present_state[6] , N_599, \next_delay_counter[1] , N_184_i, 
         \next_delay_counter_f0_0_a2_0[2] , \next_delay_counter[5] , 
         \next_delay_counter[2] , \next_delay_counter[7] , 
         \next_delay_counter[6] , \next_delay_counter[9] , 
         \next_delay_counter[8] , \next_delay_counter[12] , 
         \next_delay_counter[10] , \present_state[12] , \present_state[3] , 
         \next_delay_counter[14] , next_state19_axb2, next_state19_axb1, 
         next_state19_axb0, N_91, N_112_i_i, N_111_i_i, un1_reset_n_port_3_0_0, 
         \present_state[13] , \present_state[7] , \present_state[2] , 
         N_124_i_i, N_107, N_238, N_125, N_115, N_96, N_427_i, 
         \present_state_nss[0] , N_70_i, N_463_i, 
         \present_state_srsts_0_i_a2_0_1[6] , \present_state[5] , 
         \present_state[4] , \present_state_nss[5] , N_460_i, 
         \present_state_srsts_0_i_0[6] , N_456_i, N_183_i, \present_state[9] , 
         \present_state[8] , N_68_i, N_454_i, \present_state[10] , 
         soc_side_wr_en_port_c, N_450_i, \present_state_nss[10] , N_446_i, 
         N_448_i, \present_state[14] , N_66_i, N_444_i, \present_state[21] , 
         \present_state[16] , N_64_i, N_441_i, \present_state[17] , 
         \present_state[20] , \present_state[18] , N_436_i, N_438_i, 
         \present_state[22] , soc_side_rd_en_port_c, N_433_i, 
         \present_state_nss[20] , N_62_i, \present_state_nss[22] , N_237, 
         N_429_i, \refresh_counter_i[0] , un1_refresh_counterlt4, N_120, 
         N_164_i, N_189, N_154_1, N_150_i, \soc_side_addr_port_c[13] , N_618_i, 
         N_205, \soc_side_addr_port_c[4] , \ram_side_addr_port_c[4] , 
         \soc_side_addr_port_c[14] , N_207, \soc_side_addr_port_c[5] , 
         \ram_side_addr_port_c[5] , N_122, N_94, N_88, 
         \soc_side_addr_port_c[19] , N_60_i, \soc_side_addr_port_c[22] , 
         \ram_side_bank_addr_port_c[1] , \ready_signal_i_a2_0_a2_0_a2_3[0] , 
         \ready_signal_i_a2_0_a2_0_a2_8[0] , ready_signal_i_a2_i, N_154_i, 
         un1_refresh_counterlt10, \present_state_srsts_i_a2_1_0[12] , 
         \ready_signal_i_a2_0_a2_0_a2_5[0] , 
         \ready_signal_i_a2_0_a2_0_a2_2[0] , N_222, ready_signal_i_a2, 
         \soc_side_wr_mask_port_c[0] , \sdram_side_wr_mask_reg_iv_i_a2_0_4[0] , 
         \sdram_side_wr_mask_reg_iv_i_a2_0_3[0] , N_231, 
         ram_side_chip0_ldqm_port_c, N_223, \soc_side_wr_mask_port_c[1] , 
         ram_side_chip0_udqm_port_c, \soc_side_wr_mask_port_c[2] , 
         ram_side_chip1_ldqm_port_c, next_state_0_sqmuxa_7_i_a2_10, 
         next_state_0_sqmuxa_7_i_a2_9, next_state_0_sqmuxa_7_i_a2_8, 
         next_state_0_sqmuxa_7_i_a2_7, 
         un1_next_init_refresh_counter_0_sqmuxa_i_0_a2_0, N_110, 
         un1_refresh_counterlt7, \soc_side_addr_port_c[10] , 
         \soc_side_addr_port_c[1] , \ram_side_addr_port_c[1] , 
         \soc_side_addr_port_c[18] , \soc_side_addr_port_c[20] , 
         \ram_side_addr_port_c[11] , \ram_side_addr_port_c[9] , 
         \soc_side_addr_port_c[9] , \soc_side_addr_port_c[0] , 
         \soc_side_addr_port_c[11] , \soc_side_addr_port_c[2] , 
         \ram_side_addr_port_c[2] , \ram_side_addr_port_c[0] , 
         \soc_side_addr_port_c[17] , \soc_side_addr_port_c[8] , 
         \soc_side_addr_port_c[12] , \soc_side_addr_port_c[3] , 
         \ram_side_addr_port_c[3] , \ram_side_addr_port_c[8] , 
         \soc_side_addr_port_c[16] , \soc_side_addr_port_c[7] , 
         \soc_side_addr_port_c[15] , \soc_side_addr_port_c[6] , 
         \ram_side_addr_port_c[6] , \ram_side_addr_port_c[7] , 
         \soc_side_addr_port_c[21] , \ram_side_bank_addr_port_c[0] , 
         \soc_side_wr_mask_port_c[3] , ram_side_chip1_udqm_port_c, VCC, GND, 
         \ram_side_chip0_data_port_in[0] , \wr_data_reg[0] , 
         ram_side_wr_en_port_c, ram_side_cas_n_port_c, ram_side_ras_n_port_c, 
         \ram_side_chip1_data_port_in[15] , \wr_data_reg[31] , 
         \ram_side_chip1_data_port_in[14] , \wr_data_reg[30] , 
         \ram_side_chip1_data_port_in[13] , \wr_data_reg[29] , 
         \ram_side_chip1_data_port_in[12] , \wr_data_reg[28] , 
         \ram_side_chip1_data_port_in[11] , \wr_data_reg[27] , 
         \ram_side_chip1_data_port_in[10] , \wr_data_reg[26] , 
         \ram_side_chip1_data_port_in[9] , \wr_data_reg[25] , 
         \ram_side_chip1_data_port_in[8] , \wr_data_reg[24] , 
         \ram_side_chip1_data_port_in[7] , \wr_data_reg[23] , 
         \ram_side_chip1_data_port_in[6] , \wr_data_reg[22] , 
         \ram_side_chip1_data_port_in[5] , \wr_data_reg[21] , 
         \ram_side_chip1_data_port_in[4] , \wr_data_reg[20] , 
         \ram_side_chip1_data_port_in[3] , \wr_data_reg[19] , 
         \ram_side_chip1_data_port_in[2] , \wr_data_reg[18] , 
         \ram_side_chip1_data_port_in[1] , \wr_data_reg[17] , 
         \ram_side_chip1_data_port_in[0] , \wr_data_reg[16] , 
         \ram_side_chip0_data_port_in[15] , \wr_data_reg[15] , 
         \ram_side_chip0_data_port_in[14] , \wr_data_reg[14] , 
         \ram_side_chip0_data_port_in[13] , \wr_data_reg[13] , 
         \ram_side_chip0_data_port_in[12] , \wr_data_reg[12] , 
         \ram_side_chip0_data_port_in[11] , \wr_data_reg[11] , 
         \ram_side_chip0_data_port_in[10] , \wr_data_reg[10] , 
         \ram_side_chip0_data_port_in[9] , \wr_data_reg[9] , 
         \ram_side_chip0_data_port_in[8] , \wr_data_reg[8] , 
         \ram_side_chip0_data_port_in[7] , \wr_data_reg[7] , 
         \ram_side_chip0_data_port_in[6] , \wr_data_reg[6] , 
         \ram_side_chip0_data_port_in[5] , \wr_data_reg[5] , 
         \ram_side_chip0_data_port_in[4] , \wr_data_reg[4] , 
         \ram_side_chip0_data_port_in[3] , \wr_data_reg[3] , 
         \ram_side_chip0_data_port_in[2] , \wr_data_reg[2] , 
         \ram_side_chip0_data_port_in[1] , \wr_data_reg[1] , 
         \soc_side_wr_data_port_c[31] , \soc_side_wr_data_port_c[30] , 
         \soc_side_wr_data_port_c[29] , \soc_side_wr_data_port_c[28] , 
         \soc_side_wr_data_port_c[27] , \soc_side_wr_data_port_c[26] , 
         \soc_side_wr_data_port_c[25] , \soc_side_wr_data_port_c[24] , 
         \soc_side_wr_data_port_c[23] , \soc_side_wr_data_port_c[22] , 
         \soc_side_wr_data_port_c[21] , \soc_side_wr_data_port_c[20] , 
         \soc_side_wr_data_port_c[19] , \soc_side_wr_data_port_c[18] , 
         \soc_side_wr_data_port_c[17] , \soc_side_wr_data_port_c[16] , 
         \soc_side_wr_data_port_c[15] , \soc_side_wr_data_port_c[14] , 
         \soc_side_wr_data_port_c[13] , \soc_side_wr_data_port_c[12] , 
         \soc_side_wr_data_port_c[11] , \soc_side_wr_data_port_c[10] , 
         \soc_side_wr_data_port_c[9] , \soc_side_wr_data_port_c[8] , 
         \soc_side_wr_data_port_c[7] , \soc_side_wr_data_port_c[6] , 
         \soc_side_wr_data_port_c[5] , \soc_side_wr_data_port_c[4] , 
         \soc_side_wr_data_port_c[3] , \soc_side_wr_data_port_c[2] , 
         \soc_side_wr_data_port_c[1] , \soc_side_wr_data_port_c[0] , 
         \soc_side_rd_data_port_c[31] , \soc_side_rd_data_port_c[30] , 
         \soc_side_rd_data_port_c[29] , \soc_side_rd_data_port_c[28] , 
         \soc_side_rd_data_port_c[27] , \soc_side_rd_data_port_c[26] , 
         \soc_side_rd_data_port_c[25] , \soc_side_rd_data_port_c[24] , 
         \soc_side_rd_data_port_c[23] , \soc_side_rd_data_port_c[22] , 
         \soc_side_rd_data_port_c[21] , \soc_side_rd_data_port_c[20] , 
         \soc_side_rd_data_port_c[19] , \soc_side_rd_data_port_c[18] , 
         \soc_side_rd_data_port_c[17] , \soc_side_rd_data_port_c[16] , 
         \soc_side_rd_data_port_c[15] , \soc_side_rd_data_port_c[14] , 
         \soc_side_rd_data_port_c[13] , \soc_side_rd_data_port_c[12] , 
         \soc_side_rd_data_port_c[11] , \soc_side_rd_data_port_c[10] , 
         \soc_side_rd_data_port_c[9] , \soc_side_rd_data_port_c[8] , 
         \soc_side_rd_data_port_c[7] , \soc_side_rd_data_port_c[6] , 
         \soc_side_rd_data_port_c[5] , \soc_side_rd_data_port_c[4] , 
         \soc_side_rd_data_port_c[3] , \soc_side_rd_data_port_c[2] , 
         \soc_side_rd_data_port_c[1] , \soc_side_rd_data_port_c[0] , VCCI;

  SLICE_0 SLICE_0( .A1(\refresh_counter[0] ), .FCO(next_refresh_counter_cry_0));
  SLICE_1 SLICE_1( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[14] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[13] ), .DI0(\next_delay_counter[13] ), 
    .LSR(un46_0_a2_0_o2_RNINEOC9), .CLK(clk_c), 
    .FCI(un1_delay_counter_16_cry_12), .F0(\next_delay_counter[13] ), 
    .Q0(\delay_counter[13] ), .F1(un1_delay_counter_16_cry_13_0_S1));
  SLICE_2 SLICE_2( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[12] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[11] ), .DI0(\next_delay_counter[11] ), 
    .LSR(un46_0_a2_0_o2_RNINEOC9), .CLK(clk_c), 
    .FCI(un1_delay_counter_16_cry_10), .F0(\next_delay_counter[11] ), 
    .Q0(\delay_counter[11] ), .F1(un1_delay_counter_16_cry_11_0_S1), 
    .FCO(un1_delay_counter_16_cry_12));
  SLICE_3 SLICE_3( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[10] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[9] ), .FCI(un1_delay_counter_16_cry_8), 
    .F0(un1_delay_counter_16_cry_9_0_S0), .F1(un1_delay_counter_16_cry_9_0_S1), 
    .FCO(un1_delay_counter_16_cry_10));
  SLICE_4 SLICE_4( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[8] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[7] ), .FCI(un1_delay_counter_16_cry_6), 
    .F0(un1_delay_counter_16_cry_7_0_S0), .F1(un1_delay_counter_16_cry_7_0_S1), 
    .FCO(un1_delay_counter_16_cry_8));
  SLICE_5 SLICE_5( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[6] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[5] ), .FCI(un1_delay_counter_16_cry_4), 
    .F0(un1_delay_counter_16_cry_5_0_S0), .F1(un1_delay_counter_16_cry_5_0_S1), 
    .FCO(un1_delay_counter_16_cry_6));
  SLICE_6 SLICE_6( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[4] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[3] ), .DI1(\next_delay_counter[4] ), 
    .DI0(\next_delay_counter[3] ), .LSR(un46_0_a2_0_o2_RNINEOC9), .CLK(clk_c), 
    .FCI(un1_delay_counter_16_cry_2), .F0(\next_delay_counter[3] ), 
    .Q0(\delay_counter[3] ), .F1(\next_delay_counter[4] ), 
    .Q1(\delay_counter[4] ), .FCO(un1_delay_counter_16_cry_4));
  SLICE_7 SLICE_7( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[2] ), .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_141), 
    .A0(\delay_counter[1] ), .FCI(un1_delay_counter_16_cry_0), 
    .F0(un1_delay_counter_16_cry_1_0_S0), .F1(un1_delay_counter_16_cry_1_0_S1), 
    .FCO(un1_delay_counter_16_cry_2));
  SLICE_8 SLICE_8( .C1(next_state_0_sqmuxa_7_i_a2), .B1(N_141), 
    .A1(\delay_counter[0] ), .FCO(un1_delay_counter_16_cry_0));
  SLICE_9 SLICE_9( .A0(\refresh_counter[15] ), .DI0(\refresh_counter_3[15] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_14), .F0(\refresh_counter_3[15] ), 
    .Q0(\refresh_counter[15] ));
  SLICE_10 SLICE_10( .A1(\refresh_counter[14] ), .A0(\refresh_counter[13] ), 
    .DI1(\refresh_counter_3[14] ), .DI0(\refresh_counter_3[13] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_12), .F0(\refresh_counter_3[13] ), 
    .Q0(\refresh_counter[13] ), .F1(\refresh_counter_3[14] ), 
    .Q1(\refresh_counter[14] ), .FCO(next_refresh_counter_cry_14));
  SLICE_11 SLICE_11( .A1(\refresh_counter[12] ), .A0(\refresh_counter[11] ), 
    .DI1(\refresh_counter_3[12] ), .DI0(\refresh_counter_3[11] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_10), .F0(\refresh_counter_3[11] ), 
    .Q0(\refresh_counter[11] ), .F1(\refresh_counter_3[12] ), 
    .Q1(\refresh_counter[12] ), .FCO(next_refresh_counter_cry_12));
  SLICE_12 SLICE_12( .A1(\refresh_counter[10] ), .A0(\refresh_counter[9] ), 
    .DI1(\refresh_counter_3[10] ), .DI0(\refresh_counter_3[9] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_8), .F0(\refresh_counter_3[9] ), 
    .Q0(\refresh_counter[9] ), .F1(\refresh_counter_3[10] ), 
    .Q1(\refresh_counter[10] ), .FCO(next_refresh_counter_cry_10));
  SLICE_13 SLICE_13( .A1(\refresh_counter[8] ), .A0(\refresh_counter[7] ), 
    .DI1(\refresh_counter_3[8] ), .DI0(\refresh_counter_3[7] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_6), .F0(\refresh_counter_3[7] ), 
    .Q0(\refresh_counter[7] ), .F1(\refresh_counter_3[8] ), 
    .Q1(\refresh_counter[8] ), .FCO(next_refresh_counter_cry_8));
  SLICE_14 SLICE_14( .A1(\refresh_counter[6] ), .A0(\refresh_counter[5] ), 
    .DI1(\refresh_counter_3[6] ), .DI0(\refresh_counter_3[5] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_4), .F0(\refresh_counter_3[5] ), 
    .Q0(\refresh_counter[5] ), .F1(\refresh_counter_3[6] ), 
    .Q1(\refresh_counter[6] ), .FCO(next_refresh_counter_cry_6));
  SLICE_15 SLICE_15( .A1(\refresh_counter[4] ), .A0(\refresh_counter[3] ), 
    .DI1(\refresh_counter_3[4] ), .DI0(\refresh_counter_3[3] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_2), .F0(\refresh_counter_3[3] ), 
    .Q0(\refresh_counter[3] ), .F1(\refresh_counter_3[4] ), 
    .Q1(\refresh_counter[4] ), .FCO(next_refresh_counter_cry_4));
  SLICE_16 SLICE_16( .A1(\refresh_counter[2] ), .A0(\refresh_counter[1] ), 
    .DI1(\refresh_counter_3[2] ), .DI0(\refresh_counter_3[1] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .FCI(next_refresh_counter_cry_0), .F0(\refresh_counter_3[1] ), 
    .Q0(\refresh_counter[1] ), .F1(\refresh_counter_3[2] ), 
    .Q1(\refresh_counter[2] ), .FCO(next_refresh_counter_cry_2));
  SLICE_17 SLICE_17( .D1(\present_state[24] ), .C1(\cas_counter[0] ), 
    .B1(\cas_counter[1] ), .A1(\present_state[23] ), .D0(\present_state[24] ), 
    .C0(\present_state[23] ), .B0(\cas_counter[1] ), .A0(\cas_counter[0] ), 
    .DI0(N_181_i_0), .LSR(N_567_i), .CLK(clk_c), .F0(N_181_i_0), 
    .Q0(\cas_counter[0] ), .F1(N_182_i_0));
  SLICE_18 SLICE_18( .B1(\present_state[24] ), .A1(\present_state[23] ), 
    .B0(reset_n_port_c), .A0(\present_state[23] ), .DI0(N_567_i), 
    .LSR(N_182_i_0), .CLK(clk_c), .F0(N_567_i), .Q0(\cas_counter[1] ), 
    .F1(N_220));
  SLICE_19 SLICE_19( .D1(\present_state[1] ), .C1(\present_state[0] ), 
    .B1(\present_state_srsts_i_a2[12] ), .A1(next_state_0_sqmuxa_7_i_a2), 
    .D0(\present_state[19] ), .C0(\present_state[11] ), 
    .B0(next_state_0_sqmuxa_7_i_a2), .A0(N_95), .DI0(\next_command[0] ), 
    .LSR(reset_n_port_c), .CLK(clk_c), .F0(\next_command[0] ), 
    .Q0(\command[0] ), .F1(N_95));
  SLICE_20 SLICE_20( .C1(N_109), .B1(N_239), 
    .A1(un1_delay_counter_16_cry_1_0_S0), .D0(\un1_delay_counter_16[0] ), 
    .C0(\present_state[15] ), .B0(\present_state[6] ), .A0(N_599), 
    .DI1(\next_delay_counter[1] ), .DI0(N_184_i), .LSR(reset_n_port_c), 
    .CLK(clk_c), .F0(N_184_i), .Q0(\delay_counter[0] ), 
    .F1(\next_delay_counter[1] ), .Q1(\delay_counter[1] ));
  SLICE_21 SLICE_21( .C1(N_109), .B1(N_239), 
    .A1(un1_delay_counter_16_cry_5_0_S0), .D0(un1_delay_counter_16_cry_1_0_S1), 
    .C0(\present_state[15] ), .B0(\present_state[6] ), 
    .A0(\next_delay_counter_f0_0_a2_0[2] ), .DI1(\next_delay_counter[5] ), 
    .DI0(\next_delay_counter[2] ), .LSR(reset_n_port_c), .CLK(clk_c), 
    .F0(\next_delay_counter[2] ), .Q0(\delay_counter[2] ), 
    .F1(\next_delay_counter[5] ), .Q1(\delay_counter[5] ));
  SLICE_22 SLICE_22( .C1(N_109), .B1(N_239), 
    .A1(un1_delay_counter_16_cry_7_0_S0), .C0(N_109), .B0(N_239), 
    .A0(un1_delay_counter_16_cry_5_0_S1), .DI1(\next_delay_counter[7] ), 
    .DI0(\next_delay_counter[6] ), .LSR(reset_n_port_c), .CLK(clk_c), 
    .F0(\next_delay_counter[6] ), .Q0(\delay_counter[6] ), 
    .F1(\next_delay_counter[7] ), .Q1(\delay_counter[7] ));
  SLICE_23 SLICE_23( .C1(N_109), .B1(N_239), 
    .A1(un1_delay_counter_16_cry_9_0_S0), .C0(N_109), .B0(N_239), 
    .A0(un1_delay_counter_16_cry_7_0_S1), .DI1(\next_delay_counter[9] ), 
    .DI0(\next_delay_counter[8] ), .LSR(reset_n_port_c), .CLK(clk_c), 
    .F0(\next_delay_counter[8] ), .Q0(\delay_counter[8] ), 
    .F1(\next_delay_counter[9] ), .Q1(\delay_counter[9] ));
  SLICE_24 SLICE_24( .C1(N_109), .B1(N_239), 
    .A1(un1_delay_counter_16_cry_11_0_S1), .C0(N_109), .B0(N_239), 
    .A0(un1_delay_counter_16_cry_9_0_S1), .DI1(\next_delay_counter[12] ), 
    .DI0(\next_delay_counter[10] ), .LSR(reset_n_port_c), .CLK(clk_c), 
    .F0(\next_delay_counter[10] ), .Q0(\delay_counter[10] ), 
    .F1(\next_delay_counter[12] ), .Q1(\delay_counter[12] ));
  SLICE_25 SLICE_25( .C1(\present_state[12] ), .B1(\present_state[3] ), 
    .A1(N_239), .C0(N_109), .B0(N_239), .A0(un1_delay_counter_16_cry_13_0_S1), 
    .DI0(\next_delay_counter[14] ), .LSR(reset_n_port_c), .CLK(clk_c), 
    .F0(\next_delay_counter[14] ), .Q0(\delay_counter[14] ), 
    .F1(\next_delay_counter_f0_0_a2_0[2] ));
  SLICE_26 SLICE_26( .D1(next_state19_axb2), .C1(next_state19_axb1), 
    .B1(next_state19_axb0), .A1(N_91), .D0(next_state19_axb2), 
    .C0(next_state19_axb1), .B0(next_state19_axb0), .A0(N_91), .DI1(N_112_i_i), 
    .DI0(N_111_i_i), .LSR(un1_reset_n_port_3_0_0), .CLK(clk_c), .F0(N_111_i_i), 
    .Q0(next_state19_axb0), .F1(N_112_i_i), .Q1(next_state19_axb1));
  SLICE_27 SLICE_27( .D1(\present_state[13] ), .C1(\present_state[7] ), 
    .B1(\present_state[2] ), .A1(\present_state[1] ), .D0(next_state19_axb2), 
    .C0(next_state19_axb1), .B0(next_state19_axb0), .A0(N_91), .DI0(N_124_i_i), 
    .LSR(un1_reset_n_port_3_0_0), .CLK(clk_c), .F0(N_124_i_i), 
    .Q0(next_state19_axb2), .F1(N_107));
  SLICE_28 SLICE_28( .C1(reset_n_port_c), .B1(\present_state[1] ), 
    .A1(next_state_0_sqmuxa_7_i_a2), .D0(N_238), .C0(N_125), .B0(N_115), 
    .A0(N_96), .DI1(N_427_i), .DI0(\present_state_nss[0] ), .CLK(clk_c), 
    .F0(\present_state_nss[0] ), .Q0(\present_state[0] ), .F1(N_427_i), 
    .Q1(\present_state[1] ));
  SLICE_29 SLICE_29( .C1(next_state_0_sqmuxa_7_i_a2), .B1(reset_n_port_c), 
    .A1(\present_state[1] ), .D0(reset_n_port_c), .C0(\present_state[3] ), 
    .B0(\present_state[2] ), .A0(next_state_0_sqmuxa_7_i_a2), .DI1(N_70_i), 
    .DI0(N_463_i), .CLK(clk_c), .F0(N_463_i), .Q0(\present_state[2] ), 
    .F1(N_70_i), .Q1(\present_state[3] ));
  SLICE_30 SLICE_30( .D1(reset_n_port_c), 
    .C1(\present_state_srsts_0_i_a2_0_1[6] ), .B1(next_state19_axb2), 
    .A1(N_91), .D0(reset_n_port_c), .C0(\present_state[5] ), 
    .B0(\present_state[4] ), .A0(next_state_0_sqmuxa_7_i_a2), 
    .DI1(\present_state_nss[5] ), .DI0(N_460_i), .CLK(clk_c), .F0(N_460_i), 
    .Q0(\present_state[4] ), .F1(\present_state_nss[5] ), 
    .Q1(\present_state[5] ));
  SLICE_31 SLICE_31( .D1(reset_n_port_c), .C1(\present_state[7] ), 
    .B1(\present_state[6] ), .A1(next_state_0_sqmuxa_7_i_a2), 
    .C0(\present_state_srsts_0_i_0[6] ), .B0(reset_n_port_c), 
    .A0(next_state_0_sqmuxa_7_i_a2), .DI1(N_456_i), .DI0(N_183_i), .CLK(clk_c), 
    .F0(N_183_i), .Q0(\present_state[6] ), .F1(N_456_i), 
    .Q1(\present_state[7] ));
  SLICE_32 SLICE_32( .C1(next_state_0_sqmuxa_7_i_a2), .B1(reset_n_port_c), 
    .A1(\present_state[11] ), .D0(reset_n_port_c), .C0(\present_state[9] ), 
    .B0(\present_state[8] ), .A0(next_state_0_sqmuxa_7_i_a2), .DI1(N_68_i), 
    .DI0(N_454_i), .CLK(clk_c), .F0(N_454_i), .Q0(\present_state[8] ), 
    .F1(N_68_i), .Q1(\present_state[9] ));
  SLICE_33 SLICE_33( .D1(reset_n_port_c), .C1(\present_state[11] ), 
    .B1(\present_state[10] ), .A1(next_state_0_sqmuxa_7_i_a2), 
    .D0(\present_state_srsts_i_a2[12] ), .C0(\present_state[0] ), 
    .B0(reset_n_port_c), .A0(soc_side_wr_en_port_c), .DI1(N_450_i), 
    .DI0(\present_state_nss[10] ), .CLK(clk_c), .F0(\present_state_nss[10] ), 
    .Q0(\present_state[10] ), .F1(N_450_i), .Q1(\present_state[11] ));
  SLICE_34 SLICE_34( .D1(reset_n_port_c), .C1(\present_state[13] ), 
    .B1(\present_state[12] ), .A1(next_state_0_sqmuxa_7_i_a2), 
    .C0(reset_n_port_c), .B0(\present_state[0] ), 
    .A0(\present_state_srsts_i_a2[12] ), .DI1(N_446_i), .DI0(N_448_i), 
    .CLK(clk_c), .F0(N_448_i), .Q0(\present_state[12] ), .F1(N_446_i), 
    .Q1(\present_state[13] ));
  SLICE_35 SLICE_35( .C1(next_state_0_sqmuxa_7_i_a2), .B1(reset_n_port_c), 
    .A1(\present_state[13] ), .D0(reset_n_port_c), .C0(\present_state[15] ), 
    .B0(\present_state[14] ), .A0(next_state_0_sqmuxa_7_i_a2), .DI1(N_66_i), 
    .DI0(N_444_i), .CLK(clk_c), .F0(N_444_i), .Q0(\present_state[14] ), 
    .F1(N_66_i), .Q1(\present_state[15] ));
  SLICE_36 SLICE_36( .C1(next_state_0_sqmuxa_7_i_a2), .B1(reset_n_port_c), 
    .A1(\present_state[8] ), .D0(reset_n_port_c), .C0(\present_state[21] ), 
    .B0(\present_state[16] ), .A0(next_state_0_sqmuxa_7_i_a2), .DI1(N_64_i), 
    .DI0(N_441_i), .CLK(clk_c), .F0(N_441_i), .Q0(\present_state[16] ), 
    .F1(N_64_i), .Q1(\present_state[17] ));
  SLICE_37 SLICE_37( .D1(reset_n_port_c), .C1(\present_state[20] ), 
    .B1(\present_state[19] ), .A1(next_state_0_sqmuxa_7_i_a2), 
    .D0(reset_n_port_c), .C0(\present_state[18] ), .B0(\present_state[17] ), 
    .A0(next_state_0_sqmuxa_7_i_a2), .DI1(N_436_i), .DI0(N_438_i), .CLK(clk_c), 
    .F0(N_438_i), .Q0(\present_state[18] ), .F1(N_436_i), 
    .Q1(\present_state[19] ));
  SLICE_38 SLICE_38( .B1(reset_n_port_c), .A1(\present_state[22] ), 
    .C0(soc_side_wr_en_port_c), .B0(soc_side_rd_en_port_c), .A0(N_238), 
    .DI1(N_433_i), .DI0(\present_state_nss[20] ), .CLK(clk_c), 
    .F0(\present_state_nss[20] ), .Q0(\present_state[20] ), .F1(N_433_i), 
    .Q1(\present_state[21] ));
  SLICE_39 SLICE_39( .C1(next_state_0_sqmuxa_7_i_a2), .B1(reset_n_port_c), 
    .A1(\present_state[19] ), .D0(\cas_counter[0] ), .C0(\cas_counter[1] ), 
    .B0(\present_state[24] ), .A0(reset_n_port_c), .DI1(N_62_i), 
    .DI0(\present_state_nss[22] ), .CLK(clk_c), .F0(\present_state_nss[22] ), 
    .Q0(\present_state[22] ), .F1(N_62_i), .Q1(\present_state[23] ));
  SLICE_40 SLICE_40( .B1(\cas_counter[1] ), .A1(\cas_counter[0] ), 
    .D0(reset_n_port_c), .C0(N_237), .B0(\present_state[24] ), 
    .A0(\present_state[23] ), .DI0(N_429_i), .CLK(clk_c), .F0(N_429_i), 
    .Q0(\present_state[24] ), .F1(N_237));
  SLICE_41 SLICE_41( .D1(\refresh_counter[3] ), .C1(\refresh_counter[2] ), 
    .B1(\refresh_counter[1] ), .A1(\refresh_counter[0] ), 
    .A0(\refresh_counter[0] ), .DI0(\refresh_counter_i[0] ), 
    .LSR(\present_state_RNI20RGF[14] ), .CLK(clk_c), 
    .F0(\refresh_counter_i[0] ), .Q0(\refresh_counter[0] ), 
    .F1(un1_refresh_counterlt4));
  SLICE_42 SLICE_42( .D1(\present_state[19] ), .C1(\present_state[11] ), 
    .B1(next_state_0_sqmuxa_7_i_a2), .A1(N_120), .D0(\present_state[7] ), 
    .C0(next_state_0_sqmuxa_7_i_a2), .B0(\present_state[2] ), 
    .A0(\present_state[13] ), .F0(N_120), .F1(N_164_i));
  SLICE_43 SLICE_43( .D1(\present_state[22] ), .C1(\present_state[8] ), 
    .B1(next_state_0_sqmuxa_7_i_a2), .A1(N_95), .D0(\present_state[11] ), 
    .C0(next_state_0_sqmuxa_7_i_a2), .B0(N_189), .A0(N_154_1), .F0(N_150_i), 
    .F1(N_154_1));
  SLICE_44 SLICE_44( .D1(\present_state[15] ), .C1(\present_state[12] ), 
    .B1(\present_state[6] ), .A1(\present_state[3] ), .C0(N_109), .B0(N_239), 
    .A0(reset_n_port_c), .F0(un46_0_a2_0_o2_RNINEOC9), .F1(N_109));
  SLICE_45 SLICE_45( .D1(\soc_side_addr_port_c[13] ), .C1(\present_state[5] ), 
    .B1(N_618_i), .A1(N_205), .C0(\present_state[9] ), 
    .B0(\present_state[23] ), .A0(\soc_side_addr_port_c[4] ), .F0(N_205), 
    .F1(\ram_side_addr_port_c[4] ));
  SLICE_46 SLICE_46( .D1(\soc_side_addr_port_c[14] ), .C1(\present_state[5] ), 
    .B1(N_618_i), .A1(N_207), .C0(\present_state[9] ), 
    .B0(\present_state[23] ), .A0(\soc_side_addr_port_c[5] ), .F0(N_207), 
    .F1(\ram_side_addr_port_c[5] ));
  SLICE_47 SLICE_47( .D1(\command[0] ), .C1(N_122), .B1(N_94), .A1(N_88), 
    .C0(\present_state[10] ), .B0(\present_state[20] ), 
    .A0(\soc_side_addr_port_c[19] ), .F0(N_94), .F1(N_60_i));
  SLICE_48 SLICE_48( .B1(\present_state[23] ), .A1(\present_state[9] ), 
    .D0(\present_state[10] ), .C0(\present_state[20] ), .B0(N_88), 
    .A0(\soc_side_addr_port_c[22] ), .F0(\ram_side_bank_addr_port_c[1] ), 
    .F1(N_88));
  SLICE_49 SLICE_49( .D1(\present_state[19] ), .C1(\present_state[15] ), 
    .B1(\present_state[11] ), .A1(\present_state[6] ), .D0(\present_state[3] ), 
    .C0(\present_state[24] ), .B0(\ready_signal_i_a2_0_a2_0_a2_3[0] ), 
    .A0(\ready_signal_i_a2_0_a2_0_a2_8[0] ), .F0(ready_signal_i_a2_i), 
    .F1(\ready_signal_i_a2_0_a2_0_a2_3[0] ));
  SLICE_50 SLICE_50( .B1(soc_side_wr_en_port_c), .A1(soc_side_rd_en_port_c), 
    .D0(\present_state[0] ), .C0(N_154_1), .B0(N_120), .A0(N_115), 
    .F0(N_154_i), .F1(N_115));
  SLICE_51 SLICE_51( .D1(un1_refresh_counterlt10), .C1(\refresh_counter[15] ), 
    .B1(\refresh_counter[10] ), .A1(\present_state_srsts_i_a2_1_0[12] ), 
    .C0(reset_n_port_c), .B0(\present_state[0] ), 
    .A0(\present_state_srsts_i_a2[12] ), .F0(N_238), 
    .F1(\present_state_srsts_i_a2[12] ));
  SLICE_52 SLICE_52( .D1(\ready_signal_i_a2_0_a2_0_a2_5[0] ), 
    .C1(\ready_signal_i_a2_0_a2_0_a2_2[0] ), .B1(N_222), .A1(N_107), 
    .D0(\ready_signal_i_a2_0_a2_0_a2_8[0] ), 
    .C0(\ready_signal_i_a2_0_a2_0_a2_3[0] ), .B0(\present_state[24] ), 
    .A0(\present_state[3] ), .F0(ready_signal_i_a2), 
    .F1(\ready_signal_i_a2_0_a2_0_a2_8[0] ));
  SLICE_53 SLICE_53( .D1(\present_state[24] ), .C1(\present_state[19] ), 
    .B1(\present_state[11] ), .A1(N_88), .D0(\soc_side_wr_mask_port_c[0] ), 
    .C0(\sdram_side_wr_mask_reg_iv_i_a2_0_4[0] ), 
    .B0(\sdram_side_wr_mask_reg_iv_i_a2_0_3[0] ), .A0(N_231), 
    .F0(ram_side_chip0_ldqm_port_c), 
    .F1(\sdram_side_wr_mask_reg_iv_i_a2_0_3[0] ));
  SLICE_54 SLICE_54( .D1(\present_state[18] ), .C1(\present_state[8] ), 
    .B1(N_223), .A1(N_222), .D0(\soc_side_wr_mask_port_c[1] ), 
    .C0(\sdram_side_wr_mask_reg_iv_i_a2_0_4[0] ), 
    .B0(\sdram_side_wr_mask_reg_iv_i_a2_0_3[0] ), .A0(N_231), 
    .F0(ram_side_chip0_udqm_port_c), 
    .F1(\sdram_side_wr_mask_reg_iv_i_a2_0_4[0] ));
  SLICE_55 SLICE_55( .D1(\present_state[20] ), .C1(\present_state[19] ), 
    .B1(N_222), .A1(N_220), .D0(\soc_side_wr_mask_port_c[2] ), 
    .C0(\sdram_side_wr_mask_reg_iv_i_a2_0_4[0] ), 
    .B0(\sdram_side_wr_mask_reg_iv_i_a2_0_3[0] ), .A0(N_231), 
    .F0(ram_side_chip1_ldqm_port_c), .F1(N_231));
  SLICE_56 SLICE_56( .D1(next_state_0_sqmuxa_7_i_a2_10), 
    .C1(next_state_0_sqmuxa_7_i_a2_9), .B1(next_state_0_sqmuxa_7_i_a2_8), 
    .A1(next_state_0_sqmuxa_7_i_a2_7), .C0(reset_n_port_c), 
    .B0(\present_state[2] ), .A0(next_state_0_sqmuxa_7_i_a2), 
    .F0(un1_reset_n_port_3_0_0), .F1(next_state_0_sqmuxa_7_i_a2));
  SLICE_57 SLICE_57( .B1(\present_state[7] ), .A1(next_state_0_sqmuxa_7_i_a2), 
    .D0(next_state19_axb2), .C0(next_state19_axb1), .B0(next_state19_axb0), 
    .A0(N_91), .F0(N_189), .F1(N_91));
  SLICE_58 SLICE_58( .D1(un1_next_init_refresh_counter_0_sqmuxa_i_0_a2_0), 
    .C1(\present_state[19] ), .B1(\present_state[11] ), .A1(N_110), 
    .C0(\delay_counter[0] ), .B0(next_state_0_sqmuxa_7_i_a2), .A0(N_141), 
    .F0(\un1_delay_counter_16[0] ), .F1(N_141));
  SLICE_59 SLICE_59( .D1(un1_refresh_counterlt4), .C1(\refresh_counter[6] ), 
    .B1(\refresh_counter[5] ), .A1(\refresh_counter[4] ), 
    .D0(un1_refresh_counterlt7), .C0(\refresh_counter[9] ), 
    .B0(\refresh_counter[8] ), .A0(\refresh_counter[7] ), 
    .F0(un1_refresh_counterlt10), .F1(un1_refresh_counterlt7));
  SLICE_60 SLICE_60( .D1(\present_state[21] ), .C1(\present_state[9] ), 
    .B1(\present_state[5] ), .A1(N_223), .B0(N_239), .A0(N_109), .F0(N_599), 
    .F1(N_239));
  SLICE_61 SLICE_61( .C1(\present_state[14] ), .B1(\present_state[4] ), 
    .A1(N_107), .C0(\present_state[0] ), .B0(N_110), .A0(N_109), .F0(N_122), 
    .F1(N_110));
  SLICE_62 SLICE_62( .C1(\present_state[10] ), .B1(\present_state[20] ), 
    .A1(\present_state[17] ), .D0(\present_state[18] ), 
    .C0(\present_state[14] ), .B0(\present_state[5] ), .A0(N_223), 
    .F0(\ready_signal_i_a2_0_a2_0_a2_5[0] ), .F1(N_223));
  SLICE_63 SLICE_63( .B1(\present_state[20] ), .A1(\present_state[10] ), 
    .D0(\soc_side_addr_port_c[10] ), .C0(\soc_side_addr_port_c[1] ), 
    .B0(N_618_i), .A0(N_88), .F0(\ram_side_addr_port_c[1] ), .F1(N_618_i));
  SLICE_64 SLICE_64( .B1(next_state19_axb1), .A1(next_state19_axb0), 
    .D0(\present_state_srsts_0_i_a2_0_1[6] ), .C0(\present_state[7] ), 
    .B0(\present_state[2] ), .A0(next_state19_axb2), 
    .F0(\present_state_srsts_0_i_0[6] ), 
    .F1(\present_state_srsts_0_i_a2_0_1[6] ));
  SLICE_65 SLICE_65( .D1(\present_state[10] ), .C1(\present_state[20] ), 
    .B1(\present_state[5] ), .A1(\soc_side_addr_port_c[18] ), 
    .C0(\present_state[10] ), .B0(\present_state[20] ), 
    .A0(\soc_side_addr_port_c[20] ), .F0(\ram_side_addr_port_c[11] ), 
    .F1(\ram_side_addr_port_c[9] ));
  SLICE_66 SLICE_66( .B1(reset_n_port_c), .A1(next_state_0_sqmuxa_7_i_a2), 
    .C0(reset_n_port_c), .B0(\present_state[14] ), 
    .A0(next_state_0_sqmuxa_7_i_a2), .F0(\present_state_RNI20RGF[14] ), 
    .F1(N_96));
  SLICE_67 SLICE_67( .D1(\soc_side_addr_port_c[9] ), 
    .C1(\soc_side_addr_port_c[0] ), .B1(N_618_i), .A1(N_88), 
    .D0(\soc_side_addr_port_c[11] ), .C0(\soc_side_addr_port_c[2] ), 
    .B0(N_618_i), .A0(N_88), .F0(\ram_side_addr_port_c[2] ), 
    .F1(\ram_side_addr_port_c[0] ));
  SLICE_68 SLICE_68( .D1(\soc_side_addr_port_c[17] ), 
    .C1(\soc_side_addr_port_c[8] ), .B1(N_618_i), .A1(N_88), 
    .D0(\soc_side_addr_port_c[12] ), .C0(\soc_side_addr_port_c[3] ), 
    .B0(N_618_i), .A0(N_88), .F0(\ram_side_addr_port_c[3] ), 
    .F1(\ram_side_addr_port_c[8] ));
  SLICE_69 SLICE_69( .D1(\soc_side_addr_port_c[16] ), 
    .C1(\soc_side_addr_port_c[7] ), .B1(N_618_i), .A1(N_88), 
    .D0(\soc_side_addr_port_c[15] ), .C0(\soc_side_addr_port_c[6] ), 
    .B0(N_618_i), .A0(N_88), .F0(\ram_side_addr_port_c[6] ), 
    .F1(\ram_side_addr_port_c[7] ));
  SLICE_70 SLICE_70( .C1(\present_state[18] ), .B1(\present_state[16] ), 
    .A1(\present_state[8] ), .D0(\present_state[18] ), 
    .C0(\present_state[16] ), .B0(\present_state[14] ), 
    .A0(\present_state[4] ), .F0(N_125), 
    .F1(un1_next_init_refresh_counter_0_sqmuxa_i_0_a2_0));
  SLICE_71 SLICE_71( .D1(\present_state[8] ), .C1(\present_state[4] ), 
    .B1(\present_state[0] ), .A1(N_88), .D0(\present_state[10] ), 
    .C0(\present_state[20] ), .B0(N_88), .A0(\soc_side_addr_port_c[21] ), 
    .F0(\ram_side_bank_addr_port_c[0] ), 
    .F1(\ready_signal_i_a2_0_a2_0_a2_2[0] ));
  SLICE_72 SLICE_72( .D1(\delay_counter[8] ), .C1(\delay_counter[7] ), 
    .B1(\delay_counter[6] ), .A1(\delay_counter[5] ), .D0(\delay_counter[12] ), 
    .C0(\delay_counter[11] ), .B0(\delay_counter[10] ), 
    .A0(\delay_counter[9] ), .F0(next_state_0_sqmuxa_7_i_a2_10), 
    .F1(next_state_0_sqmuxa_7_i_a2_9));
  SLICE_73 SLICE_73( .C1(\delay_counter[14] ), .B1(\delay_counter[13] ), 
    .A1(\delay_counter[0] ), .D0(\delay_counter[4] ), .C0(\delay_counter[3] ), 
    .B0(\delay_counter[2] ), .A0(\delay_counter[1] ), 
    .F0(next_state_0_sqmuxa_7_i_a2_8), .F1(next_state_0_sqmuxa_7_i_a2_7));
  SLICE_74 SLICE_74( .C1(\present_state[22] ), .B1(\present_state[21] ), 
    .A1(\present_state[16] ), .D0(\soc_side_wr_mask_port_c[3] ), 
    .C0(\sdram_side_wr_mask_reg_iv_i_a2_0_4[0] ), 
    .B0(\sdram_side_wr_mask_reg_iv_i_a2_0_3[0] ), .A0(N_231), 
    .F0(ram_side_chip1_udqm_port_c), .F1(N_222));
  SLICE_75 SLICE_75( .D0(\refresh_counter[14] ), .C0(\refresh_counter[13] ), 
    .B0(\refresh_counter[12] ), .A0(\refresh_counter[11] ), 
    .F0(\present_state_srsts_i_a2_1_0[12] ), .F1(VCC));
  SLICE_76 SLICE_76( .F0(GND));
  ram_side_chip0_data_port_0_ \ram_side_chip0_data_port[0]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[0] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[0] ), 
    .ramsidechip0dataport0(ram_side_chip0_data_port[0]));
  soc_side_busy_port soc_side_busy_port_I( .PADDO(ready_signal_i_a2_i), 
    .soc_side_busy_port(soc_side_busy_port));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  ram_side_ck_en_port ram_side_ck_en_port_I( .PADDO(VCC), 
    .ram_side_ck_en_port(ram_side_ck_en_port));
  ram_side_wr_en_port ram_side_wr_en_port_I( .IOLDO(ram_side_wr_en_port_c), 
    .ram_side_wr_en_port(ram_side_wr_en_port));
  ram_side_wr_en_port_MGIOL ram_side_wr_en_port_MGIOL( 
    .IOLDO(ram_side_wr_en_port_c), .OPOS(N_150_i), .LSR(reset_n_port_c), 
    .CLK(clk_c));
  ram_side_cas_n_port ram_side_cas_n_port_I( .IOLDO(ram_side_cas_n_port_c), 
    .ram_side_cas_n_port(ram_side_cas_n_port));
  ram_side_cas_n_port_MGIOL ram_side_cas_n_port_MGIOL( 
    .IOLDO(ram_side_cas_n_port_c), .OPOS(N_164_i), .LSR(reset_n_port_c), 
    .CLK(clk_c));
  ram_side_ras_n_port ram_side_ras_n_port_I( .IOLDO(ram_side_ras_n_port_c), 
    .ram_side_ras_n_port(ram_side_ras_n_port));
  ram_side_ras_n_port_MGIOL ram_side_ras_n_port_MGIOL( 
    .IOLDO(ram_side_ras_n_port_c), .OPOS(N_154_i), .LSR(reset_n_port_c), 
    .CLK(clk_c));
  ram_side_cs_n_port ram_side_cs_n_port_I( .PADDO(GND), 
    .ram_side_cs_n_port(ram_side_cs_n_port));
  ram_side_chip1_data_port_15_ \ram_side_chip1_data_port[15]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[15] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[31] ), 
    .ramsidechip1dataport15(ram_side_chip1_data_port[15]));
  ram_side_chip1_data_port_14_ \ram_side_chip1_data_port[14]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[14] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[30] ), 
    .ramsidechip1dataport14(ram_side_chip1_data_port[14]));
  ram_side_chip1_data_port_13_ \ram_side_chip1_data_port[13]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[13] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[29] ), 
    .ramsidechip1dataport13(ram_side_chip1_data_port[13]));
  ram_side_chip1_data_port_12_ \ram_side_chip1_data_port[12]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[12] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[28] ), 
    .ramsidechip1dataport12(ram_side_chip1_data_port[12]));
  ram_side_chip1_data_port_11_ \ram_side_chip1_data_port[11]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[11] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[27] ), 
    .ramsidechip1dataport11(ram_side_chip1_data_port[11]));
  ram_side_chip1_data_port_10_ \ram_side_chip1_data_port[10]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[10] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[26] ), 
    .ramsidechip1dataport10(ram_side_chip1_data_port[10]));
  ram_side_chip1_data_port_9_ \ram_side_chip1_data_port[9]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[9] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[25] ), 
    .ramsidechip1dataport9(ram_side_chip1_data_port[9]));
  ram_side_chip1_data_port_8_ \ram_side_chip1_data_port[8]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[8] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[24] ), 
    .ramsidechip1dataport8(ram_side_chip1_data_port[8]));
  ram_side_chip1_data_port_7_ \ram_side_chip1_data_port[7]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[7] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[23] ), 
    .ramsidechip1dataport7(ram_side_chip1_data_port[7]));
  ram_side_chip1_data_port_6_ \ram_side_chip1_data_port[6]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[6] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[22] ), 
    .ramsidechip1dataport6(ram_side_chip1_data_port[6]));
  ram_side_chip1_data_port_5_ \ram_side_chip1_data_port[5]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[5] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[21] ), 
    .ramsidechip1dataport5(ram_side_chip1_data_port[5]));
  ram_side_chip1_data_port_4_ \ram_side_chip1_data_port[4]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[4] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[20] ), 
    .ramsidechip1dataport4(ram_side_chip1_data_port[4]));
  ram_side_chip1_data_port_3_ \ram_side_chip1_data_port[3]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[3] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[19] ), 
    .ramsidechip1dataport3(ram_side_chip1_data_port[3]));
  ram_side_chip1_data_port_2_ \ram_side_chip1_data_port[2]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[2] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[18] ), 
    .ramsidechip1dataport2(ram_side_chip1_data_port[2]));
  ram_side_chip1_data_port_1_ \ram_side_chip1_data_port[1]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[1] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[17] ), 
    .ramsidechip1dataport1(ram_side_chip1_data_port[1]));
  ram_side_chip1_data_port_0_ \ram_side_chip1_data_port[0]_I ( 
    .PADDI(\ram_side_chip1_data_port_in[0] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[16] ), 
    .ramsidechip1dataport0(ram_side_chip1_data_port[0]));
  ram_side_chip1_udqm_port ram_side_chip1_udqm_port_I( 
    .PADDO(ram_side_chip1_udqm_port_c), 
    .ram_side_chip1_udqm_port(ram_side_chip1_udqm_port));
  ram_side_chip1_ldqm_port ram_side_chip1_ldqm_port_I( 
    .PADDO(ram_side_chip1_ldqm_port_c), 
    .ram_side_chip1_ldqm_port(ram_side_chip1_ldqm_port));
  ram_side_chip0_data_port_15_ \ram_side_chip0_data_port[15]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[15] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[15] ), 
    .ramsidechip0dataport15(ram_side_chip0_data_port[15]));
  ram_side_chip0_data_port_14_ \ram_side_chip0_data_port[14]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[14] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[14] ), 
    .ramsidechip0dataport14(ram_side_chip0_data_port[14]));
  ram_side_chip0_data_port_13_ \ram_side_chip0_data_port[13]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[13] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[13] ), 
    .ramsidechip0dataport13(ram_side_chip0_data_port[13]));
  ram_side_chip0_data_port_12_ \ram_side_chip0_data_port[12]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[12] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[12] ), 
    .ramsidechip0dataport12(ram_side_chip0_data_port[12]));
  ram_side_chip0_data_port_11_ \ram_side_chip0_data_port[11]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[11] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[11] ), 
    .ramsidechip0dataport11(ram_side_chip0_data_port[11]));
  ram_side_chip0_data_port_10_ \ram_side_chip0_data_port[10]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[10] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[10] ), 
    .ramsidechip0dataport10(ram_side_chip0_data_port[10]));
  ram_side_chip0_data_port_9_ \ram_side_chip0_data_port[9]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[9] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[9] ), 
    .ramsidechip0dataport9(ram_side_chip0_data_port[9]));
  ram_side_chip0_data_port_8_ \ram_side_chip0_data_port[8]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[8] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[8] ), 
    .ramsidechip0dataport8(ram_side_chip0_data_port[8]));
  ram_side_chip0_data_port_7_ \ram_side_chip0_data_port[7]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[7] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[7] ), 
    .ramsidechip0dataport7(ram_side_chip0_data_port[7]));
  ram_side_chip0_data_port_6_ \ram_side_chip0_data_port[6]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[6] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[6] ), 
    .ramsidechip0dataport6(ram_side_chip0_data_port[6]));
  ram_side_chip0_data_port_5_ \ram_side_chip0_data_port[5]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[5] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[5] ), 
    .ramsidechip0dataport5(ram_side_chip0_data_port[5]));
  ram_side_chip0_data_port_4_ \ram_side_chip0_data_port[4]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[4] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[4] ), 
    .ramsidechip0dataport4(ram_side_chip0_data_port[4]));
  ram_side_chip0_data_port_3_ \ram_side_chip0_data_port[3]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[3] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[3] ), 
    .ramsidechip0dataport3(ram_side_chip0_data_port[3]));
  ram_side_chip0_data_port_2_ \ram_side_chip0_data_port[2]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[2] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[2] ), 
    .ramsidechip0dataport2(ram_side_chip0_data_port[2]));
  ram_side_chip0_data_port_1_ \ram_side_chip0_data_port[1]_I ( 
    .PADDI(\ram_side_chip0_data_port_in[1] ), .PADDT(\present_state[9] ), 
    .PADDO(\wr_data_reg[1] ), 
    .ramsidechip0dataport1(ram_side_chip0_data_port[1]));
  ram_side_chip0_udqm_port ram_side_chip0_udqm_port_I( 
    .PADDO(ram_side_chip0_udqm_port_c), 
    .ram_side_chip0_udqm_port(ram_side_chip0_udqm_port));
  ram_side_chip0_ldqm_port ram_side_chip0_ldqm_port_I( 
    .PADDO(ram_side_chip0_ldqm_port_c), 
    .ram_side_chip0_ldqm_port(ram_side_chip0_ldqm_port));
  ram_side_bank_addr_port_1_ \ram_side_bank_addr_port[1]_I ( 
    .PADDO(\ram_side_bank_addr_port_c[1] ), 
    .ramsidebankaddrport1(ram_side_bank_addr_port[1]));
  ram_side_bank_addr_port_0_ \ram_side_bank_addr_port[0]_I ( 
    .PADDO(\ram_side_bank_addr_port_c[0] ), 
    .ramsidebankaddrport0(ram_side_bank_addr_port[0]));
  ram_side_addr_port_11_ \ram_side_addr_port[11]_I ( 
    .PADDO(\ram_side_addr_port_c[11] ), 
    .ramsideaddrport11(ram_side_addr_port[11]));
  ram_side_addr_port_10_ \ram_side_addr_port[10]_I ( .PADDO(N_60_i), 
    .ramsideaddrport10(ram_side_addr_port[10]));
  ram_side_addr_port_9_ \ram_side_addr_port[9]_I ( 
    .PADDO(\ram_side_addr_port_c[9] ), 
    .ramsideaddrport9(ram_side_addr_port[9]));
  ram_side_addr_port_8_ \ram_side_addr_port[8]_I ( 
    .PADDO(\ram_side_addr_port_c[8] ), 
    .ramsideaddrport8(ram_side_addr_port[8]));
  ram_side_addr_port_7_ \ram_side_addr_port[7]_I ( 
    .PADDO(\ram_side_addr_port_c[7] ), 
    .ramsideaddrport7(ram_side_addr_port[7]));
  ram_side_addr_port_6_ \ram_side_addr_port[6]_I ( 
    .PADDO(\ram_side_addr_port_c[6] ), 
    .ramsideaddrport6(ram_side_addr_port[6]));
  ram_side_addr_port_5_ \ram_side_addr_port[5]_I ( 
    .PADDO(\ram_side_addr_port_c[5] ), 
    .ramsideaddrport5(ram_side_addr_port[5]));
  ram_side_addr_port_4_ \ram_side_addr_port[4]_I ( 
    .PADDO(\ram_side_addr_port_c[4] ), 
    .ramsideaddrport4(ram_side_addr_port[4]));
  ram_side_addr_port_3_ \ram_side_addr_port[3]_I ( 
    .PADDO(\ram_side_addr_port_c[3] ), 
    .ramsideaddrport3(ram_side_addr_port[3]));
  ram_side_addr_port_2_ \ram_side_addr_port[2]_I ( 
    .PADDO(\ram_side_addr_port_c[2] ), 
    .ramsideaddrport2(ram_side_addr_port[2]));
  ram_side_addr_port_1_ \ram_side_addr_port[1]_I ( 
    .PADDO(\ram_side_addr_port_c[1] ), 
    .ramsideaddrport1(ram_side_addr_port[1]));
  ram_side_addr_port_0_ \ram_side_addr_port[0]_I ( 
    .PADDO(\ram_side_addr_port_c[0] ), 
    .ramsideaddrport0(ram_side_addr_port[0]));
  soc_side_wr_en_port soc_side_wr_en_port_I( .PADDI(soc_side_wr_en_port_c), 
    .soc_side_wr_en_port(soc_side_wr_en_port));
  soc_side_wr_mask_port_3_ \soc_side_wr_mask_port[3]_I ( 
    .PADDI(\soc_side_wr_mask_port_c[3] ), 
    .socsidewrmaskport3(soc_side_wr_mask_port[3]));
  soc_side_wr_mask_port_2_ \soc_side_wr_mask_port[2]_I ( 
    .PADDI(\soc_side_wr_mask_port_c[2] ), 
    .socsidewrmaskport2(soc_side_wr_mask_port[2]));
  soc_side_wr_mask_port_1_ \soc_side_wr_mask_port[1]_I ( 
    .PADDI(\soc_side_wr_mask_port_c[1] ), 
    .socsidewrmaskport1(soc_side_wr_mask_port[1]));
  soc_side_wr_mask_port_0_ \soc_side_wr_mask_port[0]_I ( 
    .PADDI(\soc_side_wr_mask_port_c[0] ), 
    .socsidewrmaskport0(soc_side_wr_mask_port[0]));
  soc_side_wr_data_port_31_ \soc_side_wr_data_port[31]_I ( 
    .PADDI(\soc_side_wr_data_port_c[31] ), 
    .socsidewrdataport31(soc_side_wr_data_port[31]));
  soc_side_wr_data_port_31__MGIOL \soc_side_wr_data_port[31]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[31] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[31] ));
  soc_side_wr_data_port_30_ \soc_side_wr_data_port[30]_I ( 
    .PADDI(\soc_side_wr_data_port_c[30] ), 
    .socsidewrdataport30(soc_side_wr_data_port[30]));
  soc_side_wr_data_port_30__MGIOL \soc_side_wr_data_port[30]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[30] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[30] ));
  soc_side_wr_data_port_29_ \soc_side_wr_data_port[29]_I ( 
    .PADDI(\soc_side_wr_data_port_c[29] ), 
    .socsidewrdataport29(soc_side_wr_data_port[29]));
  soc_side_wr_data_port_29__MGIOL \soc_side_wr_data_port[29]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[29] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[29] ));
  soc_side_wr_data_port_28_ \soc_side_wr_data_port[28]_I ( 
    .PADDI(\soc_side_wr_data_port_c[28] ), 
    .socsidewrdataport28(soc_side_wr_data_port[28]));
  soc_side_wr_data_port_28__MGIOL \soc_side_wr_data_port[28]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[28] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[28] ));
  soc_side_wr_data_port_27_ \soc_side_wr_data_port[27]_I ( 
    .PADDI(\soc_side_wr_data_port_c[27] ), 
    .socsidewrdataport27(soc_side_wr_data_port[27]));
  soc_side_wr_data_port_27__MGIOL \soc_side_wr_data_port[27]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[27] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[27] ));
  soc_side_wr_data_port_26_ \soc_side_wr_data_port[26]_I ( 
    .PADDI(\soc_side_wr_data_port_c[26] ), 
    .socsidewrdataport26(soc_side_wr_data_port[26]));
  soc_side_wr_data_port_26__MGIOL \soc_side_wr_data_port[26]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[26] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[26] ));
  soc_side_wr_data_port_25_ \soc_side_wr_data_port[25]_I ( 
    .PADDI(\soc_side_wr_data_port_c[25] ), 
    .socsidewrdataport25(soc_side_wr_data_port[25]));
  soc_side_wr_data_port_25__MGIOL \soc_side_wr_data_port[25]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[25] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[25] ));
  soc_side_wr_data_port_24_ \soc_side_wr_data_port[24]_I ( 
    .PADDI(\soc_side_wr_data_port_c[24] ), 
    .socsidewrdataport24(soc_side_wr_data_port[24]));
  soc_side_wr_data_port_24__MGIOL \soc_side_wr_data_port[24]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[24] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[24] ));
  soc_side_wr_data_port_23_ \soc_side_wr_data_port[23]_I ( 
    .PADDI(\soc_side_wr_data_port_c[23] ), 
    .socsidewrdataport23(soc_side_wr_data_port[23]));
  soc_side_wr_data_port_23__MGIOL \soc_side_wr_data_port[23]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[23] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[23] ));
  soc_side_wr_data_port_22_ \soc_side_wr_data_port[22]_I ( 
    .PADDI(\soc_side_wr_data_port_c[22] ), 
    .socsidewrdataport22(soc_side_wr_data_port[22]));
  soc_side_wr_data_port_22__MGIOL \soc_side_wr_data_port[22]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[22] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[22] ));
  soc_side_wr_data_port_21_ \soc_side_wr_data_port[21]_I ( 
    .PADDI(\soc_side_wr_data_port_c[21] ), 
    .socsidewrdataport21(soc_side_wr_data_port[21]));
  soc_side_wr_data_port_21__MGIOL \soc_side_wr_data_port[21]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[21] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[21] ));
  soc_side_wr_data_port_20_ \soc_side_wr_data_port[20]_I ( 
    .PADDI(\soc_side_wr_data_port_c[20] ), 
    .socsidewrdataport20(soc_side_wr_data_port[20]));
  soc_side_wr_data_port_20__MGIOL \soc_side_wr_data_port[20]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[20] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[20] ));
  soc_side_wr_data_port_19_ \soc_side_wr_data_port[19]_I ( 
    .PADDI(\soc_side_wr_data_port_c[19] ), 
    .socsidewrdataport19(soc_side_wr_data_port[19]));
  soc_side_wr_data_port_19__MGIOL \soc_side_wr_data_port[19]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[19] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[19] ));
  soc_side_wr_data_port_18_ \soc_side_wr_data_port[18]_I ( 
    .PADDI(\soc_side_wr_data_port_c[18] ), 
    .socsidewrdataport18(soc_side_wr_data_port[18]));
  soc_side_wr_data_port_18__MGIOL \soc_side_wr_data_port[18]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[18] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[18] ));
  soc_side_wr_data_port_17_ \soc_side_wr_data_port[17]_I ( 
    .PADDI(\soc_side_wr_data_port_c[17] ), 
    .socsidewrdataport17(soc_side_wr_data_port[17]));
  soc_side_wr_data_port_17__MGIOL \soc_side_wr_data_port[17]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[17] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[17] ));
  soc_side_wr_data_port_16_ \soc_side_wr_data_port[16]_I ( 
    .PADDI(\soc_side_wr_data_port_c[16] ), 
    .socsidewrdataport16(soc_side_wr_data_port[16]));
  soc_side_wr_data_port_16__MGIOL \soc_side_wr_data_port[16]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[16] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[16] ));
  soc_side_wr_data_port_15_ \soc_side_wr_data_port[15]_I ( 
    .PADDI(\soc_side_wr_data_port_c[15] ), 
    .socsidewrdataport15(soc_side_wr_data_port[15]));
  soc_side_wr_data_port_15__MGIOL \soc_side_wr_data_port[15]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[15] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[15] ));
  soc_side_wr_data_port_14_ \soc_side_wr_data_port[14]_I ( 
    .PADDI(\soc_side_wr_data_port_c[14] ), 
    .socsidewrdataport14(soc_side_wr_data_port[14]));
  soc_side_wr_data_port_14__MGIOL \soc_side_wr_data_port[14]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[14] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[14] ));
  soc_side_wr_data_port_13_ \soc_side_wr_data_port[13]_I ( 
    .PADDI(\soc_side_wr_data_port_c[13] ), 
    .socsidewrdataport13(soc_side_wr_data_port[13]));
  soc_side_wr_data_port_13__MGIOL \soc_side_wr_data_port[13]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[13] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[13] ));
  soc_side_wr_data_port_12_ \soc_side_wr_data_port[12]_I ( 
    .PADDI(\soc_side_wr_data_port_c[12] ), 
    .socsidewrdataport12(soc_side_wr_data_port[12]));
  soc_side_wr_data_port_12__MGIOL \soc_side_wr_data_port[12]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[12] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[12] ));
  soc_side_wr_data_port_11_ \soc_side_wr_data_port[11]_I ( 
    .PADDI(\soc_side_wr_data_port_c[11] ), 
    .socsidewrdataport11(soc_side_wr_data_port[11]));
  soc_side_wr_data_port_11__MGIOL \soc_side_wr_data_port[11]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[11] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[11] ));
  soc_side_wr_data_port_10_ \soc_side_wr_data_port[10]_I ( 
    .PADDI(\soc_side_wr_data_port_c[10] ), 
    .socsidewrdataport10(soc_side_wr_data_port[10]));
  soc_side_wr_data_port_10__MGIOL \soc_side_wr_data_port[10]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[10] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[10] ));
  soc_side_wr_data_port_9_ \soc_side_wr_data_port[9]_I ( 
    .PADDI(\soc_side_wr_data_port_c[9] ), 
    .socsidewrdataport9(soc_side_wr_data_port[9]));
  soc_side_wr_data_port_9__MGIOL \soc_side_wr_data_port[9]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[9] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[9] ));
  soc_side_wr_data_port_8_ \soc_side_wr_data_port[8]_I ( 
    .PADDI(\soc_side_wr_data_port_c[8] ), 
    .socsidewrdataport8(soc_side_wr_data_port[8]));
  soc_side_wr_data_port_8__MGIOL \soc_side_wr_data_port[8]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[8] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[8] ));
  soc_side_wr_data_port_7_ \soc_side_wr_data_port[7]_I ( 
    .PADDI(\soc_side_wr_data_port_c[7] ), 
    .socsidewrdataport7(soc_side_wr_data_port[7]));
  soc_side_wr_data_port_7__MGIOL \soc_side_wr_data_port[7]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[7] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[7] ));
  soc_side_wr_data_port_6_ \soc_side_wr_data_port[6]_I ( 
    .PADDI(\soc_side_wr_data_port_c[6] ), 
    .socsidewrdataport6(soc_side_wr_data_port[6]));
  soc_side_wr_data_port_6__MGIOL \soc_side_wr_data_port[6]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[6] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[6] ));
  soc_side_wr_data_port_5_ \soc_side_wr_data_port[5]_I ( 
    .PADDI(\soc_side_wr_data_port_c[5] ), 
    .socsidewrdataport5(soc_side_wr_data_port[5]));
  soc_side_wr_data_port_5__MGIOL \soc_side_wr_data_port[5]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[5] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[5] ));
  soc_side_wr_data_port_4_ \soc_side_wr_data_port[4]_I ( 
    .PADDI(\soc_side_wr_data_port_c[4] ), 
    .socsidewrdataport4(soc_side_wr_data_port[4]));
  soc_side_wr_data_port_4__MGIOL \soc_side_wr_data_port[4]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[4] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[4] ));
  soc_side_wr_data_port_3_ \soc_side_wr_data_port[3]_I ( 
    .PADDI(\soc_side_wr_data_port_c[3] ), 
    .socsidewrdataport3(soc_side_wr_data_port[3]));
  soc_side_wr_data_port_3__MGIOL \soc_side_wr_data_port[3]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[3] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[3] ));
  soc_side_wr_data_port_2_ \soc_side_wr_data_port[2]_I ( 
    .PADDI(\soc_side_wr_data_port_c[2] ), 
    .socsidewrdataport2(soc_side_wr_data_port[2]));
  soc_side_wr_data_port_2__MGIOL \soc_side_wr_data_port[2]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[2] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[2] ));
  soc_side_wr_data_port_1_ \soc_side_wr_data_port[1]_I ( 
    .PADDI(\soc_side_wr_data_port_c[1] ), 
    .socsidewrdataport1(soc_side_wr_data_port[1]));
  soc_side_wr_data_port_1__MGIOL \soc_side_wr_data_port[1]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[1] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[1] ));
  soc_side_wr_data_port_0_ \soc_side_wr_data_port[0]_I ( 
    .PADDI(\soc_side_wr_data_port_c[0] ), 
    .socsidewrdataport0(soc_side_wr_data_port[0]));
  soc_side_wr_data_port_0__MGIOL \soc_side_wr_data_port[0]_MGIOL ( 
    .DI(\soc_side_wr_data_port_c[0] ), .CE(soc_side_wr_en_port_c), 
    .LSR(reset_n_port_c), .CLK(clk_c), .IN(\wr_data_reg[0] ));
  soc_side_rd_en_port soc_side_rd_en_port_I( .PADDI(soc_side_rd_en_port_c), 
    .soc_side_rd_en_port(soc_side_rd_en_port));
  soc_side_rd_data_port_31_ \soc_side_rd_data_port[31]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[31] ), 
    .socsiderddataport31(soc_side_rd_data_port[31]));
  soc_side_rd_data_port_31__MGIOL \soc_side_rd_data_port[31]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[31] ), 
    .OPOS(\ram_side_chip1_data_port_in[15] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_30_ \soc_side_rd_data_port[30]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[30] ), 
    .socsiderddataport30(soc_side_rd_data_port[30]));
  soc_side_rd_data_port_30__MGIOL \soc_side_rd_data_port[30]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[30] ), 
    .OPOS(\ram_side_chip1_data_port_in[14] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_29_ \soc_side_rd_data_port[29]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[29] ), 
    .socsiderddataport29(soc_side_rd_data_port[29]));
  soc_side_rd_data_port_29__MGIOL \soc_side_rd_data_port[29]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[29] ), 
    .OPOS(\ram_side_chip1_data_port_in[13] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_28_ \soc_side_rd_data_port[28]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[28] ), 
    .socsiderddataport28(soc_side_rd_data_port[28]));
  soc_side_rd_data_port_28__MGIOL \soc_side_rd_data_port[28]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[28] ), 
    .OPOS(\ram_side_chip1_data_port_in[12] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_27_ \soc_side_rd_data_port[27]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[27] ), 
    .socsiderddataport27(soc_side_rd_data_port[27]));
  soc_side_rd_data_port_27__MGIOL \soc_side_rd_data_port[27]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[27] ), 
    .OPOS(\ram_side_chip1_data_port_in[11] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_26_ \soc_side_rd_data_port[26]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[26] ), 
    .socsiderddataport26(soc_side_rd_data_port[26]));
  soc_side_rd_data_port_26__MGIOL \soc_side_rd_data_port[26]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[26] ), 
    .OPOS(\ram_side_chip1_data_port_in[10] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_25_ \soc_side_rd_data_port[25]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[25] ), 
    .socsiderddataport25(soc_side_rd_data_port[25]));
  soc_side_rd_data_port_25__MGIOL \soc_side_rd_data_port[25]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[25] ), 
    .OPOS(\ram_side_chip1_data_port_in[9] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_24_ \soc_side_rd_data_port[24]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[24] ), 
    .socsiderddataport24(soc_side_rd_data_port[24]));
  soc_side_rd_data_port_24__MGIOL \soc_side_rd_data_port[24]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[24] ), 
    .OPOS(\ram_side_chip1_data_port_in[8] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_23_ \soc_side_rd_data_port[23]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[23] ), 
    .socsiderddataport23(soc_side_rd_data_port[23]));
  soc_side_rd_data_port_23__MGIOL \soc_side_rd_data_port[23]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[23] ), 
    .OPOS(\ram_side_chip1_data_port_in[7] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_22_ \soc_side_rd_data_port[22]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[22] ), 
    .socsiderddataport22(soc_side_rd_data_port[22]));
  soc_side_rd_data_port_22__MGIOL \soc_side_rd_data_port[22]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[22] ), 
    .OPOS(\ram_side_chip1_data_port_in[6] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_21_ \soc_side_rd_data_port[21]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[21] ), 
    .socsiderddataport21(soc_side_rd_data_port[21]));
  soc_side_rd_data_port_21__MGIOL \soc_side_rd_data_port[21]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[21] ), 
    .OPOS(\ram_side_chip1_data_port_in[5] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_20_ \soc_side_rd_data_port[20]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[20] ), 
    .socsiderddataport20(soc_side_rd_data_port[20]));
  soc_side_rd_data_port_20__MGIOL \soc_side_rd_data_port[20]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[20] ), 
    .OPOS(\ram_side_chip1_data_port_in[4] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_19_ \soc_side_rd_data_port[19]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[19] ), 
    .socsiderddataport19(soc_side_rd_data_port[19]));
  soc_side_rd_data_port_19__MGIOL \soc_side_rd_data_port[19]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[19] ), 
    .OPOS(\ram_side_chip1_data_port_in[3] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_18_ \soc_side_rd_data_port[18]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[18] ), 
    .socsiderddataport18(soc_side_rd_data_port[18]));
  soc_side_rd_data_port_18__MGIOL \soc_side_rd_data_port[18]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[18] ), 
    .OPOS(\ram_side_chip1_data_port_in[2] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_17_ \soc_side_rd_data_port[17]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[17] ), 
    .socsiderddataport17(soc_side_rd_data_port[17]));
  soc_side_rd_data_port_17__MGIOL \soc_side_rd_data_port[17]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[17] ), 
    .OPOS(\ram_side_chip1_data_port_in[1] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_16_ \soc_side_rd_data_port[16]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[16] ), 
    .socsiderddataport16(soc_side_rd_data_port[16]));
  soc_side_rd_data_port_16__MGIOL \soc_side_rd_data_port[16]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[16] ), 
    .OPOS(\ram_side_chip1_data_port_in[0] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_15_ \soc_side_rd_data_port[15]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[15] ), 
    .socsiderddataport15(soc_side_rd_data_port[15]));
  soc_side_rd_data_port_15__MGIOL \soc_side_rd_data_port[15]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[15] ), 
    .OPOS(\ram_side_chip0_data_port_in[15] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_14_ \soc_side_rd_data_port[14]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[14] ), 
    .socsiderddataport14(soc_side_rd_data_port[14]));
  soc_side_rd_data_port_14__MGIOL \soc_side_rd_data_port[14]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[14] ), 
    .OPOS(\ram_side_chip0_data_port_in[14] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_13_ \soc_side_rd_data_port[13]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[13] ), 
    .socsiderddataport13(soc_side_rd_data_port[13]));
  soc_side_rd_data_port_13__MGIOL \soc_side_rd_data_port[13]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[13] ), 
    .OPOS(\ram_side_chip0_data_port_in[13] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_12_ \soc_side_rd_data_port[12]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[12] ), 
    .socsiderddataport12(soc_side_rd_data_port[12]));
  soc_side_rd_data_port_12__MGIOL \soc_side_rd_data_port[12]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[12] ), 
    .OPOS(\ram_side_chip0_data_port_in[12] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_11_ \soc_side_rd_data_port[11]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[11] ), 
    .socsiderddataport11(soc_side_rd_data_port[11]));
  soc_side_rd_data_port_11__MGIOL \soc_side_rd_data_port[11]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[11] ), 
    .OPOS(\ram_side_chip0_data_port_in[11] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_10_ \soc_side_rd_data_port[10]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[10] ), 
    .socsiderddataport10(soc_side_rd_data_port[10]));
  soc_side_rd_data_port_10__MGIOL \soc_side_rd_data_port[10]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[10] ), 
    .OPOS(\ram_side_chip0_data_port_in[10] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_9_ \soc_side_rd_data_port[9]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[9] ), 
    .socsiderddataport9(soc_side_rd_data_port[9]));
  soc_side_rd_data_port_9__MGIOL \soc_side_rd_data_port[9]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[9] ), 
    .OPOS(\ram_side_chip0_data_port_in[9] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_8_ \soc_side_rd_data_port[8]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[8] ), 
    .socsiderddataport8(soc_side_rd_data_port[8]));
  soc_side_rd_data_port_8__MGIOL \soc_side_rd_data_port[8]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[8] ), 
    .OPOS(\ram_side_chip0_data_port_in[8] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_7_ \soc_side_rd_data_port[7]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[7] ), 
    .socsiderddataport7(soc_side_rd_data_port[7]));
  soc_side_rd_data_port_7__MGIOL \soc_side_rd_data_port[7]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[7] ), 
    .OPOS(\ram_side_chip0_data_port_in[7] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_6_ \soc_side_rd_data_port[6]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[6] ), 
    .socsiderddataport6(soc_side_rd_data_port[6]));
  soc_side_rd_data_port_6__MGIOL \soc_side_rd_data_port[6]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[6] ), 
    .OPOS(\ram_side_chip0_data_port_in[6] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_5_ \soc_side_rd_data_port[5]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[5] ), 
    .socsiderddataport5(soc_side_rd_data_port[5]));
  soc_side_rd_data_port_5__MGIOL \soc_side_rd_data_port[5]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[5] ), 
    .OPOS(\ram_side_chip0_data_port_in[5] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_4_ \soc_side_rd_data_port[4]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[4] ), 
    .socsiderddataport4(soc_side_rd_data_port[4]));
  soc_side_rd_data_port_4__MGIOL \soc_side_rd_data_port[4]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[4] ), 
    .OPOS(\ram_side_chip0_data_port_in[4] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_3_ \soc_side_rd_data_port[3]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[3] ), 
    .socsiderddataport3(soc_side_rd_data_port[3]));
  soc_side_rd_data_port_3__MGIOL \soc_side_rd_data_port[3]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[3] ), 
    .OPOS(\ram_side_chip0_data_port_in[3] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_2_ \soc_side_rd_data_port[2]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[2] ), 
    .socsiderddataport2(soc_side_rd_data_port[2]));
  soc_side_rd_data_port_2__MGIOL \soc_side_rd_data_port[2]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[2] ), 
    .OPOS(\ram_side_chip0_data_port_in[2] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_1_ \soc_side_rd_data_port[1]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[1] ), 
    .socsiderddataport1(soc_side_rd_data_port[1]));
  soc_side_rd_data_port_1__MGIOL \soc_side_rd_data_port[1]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[1] ), 
    .OPOS(\ram_side_chip0_data_port_in[1] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_rd_data_port_0_ \soc_side_rd_data_port[0]_I ( 
    .IOLDO(\soc_side_rd_data_port_c[0] ), 
    .socsiderddataport0(soc_side_rd_data_port[0]));
  soc_side_rd_data_port_0__MGIOL \soc_side_rd_data_port[0]_MGIOL ( 
    .IOLDO(\soc_side_rd_data_port_c[0] ), 
    .OPOS(\ram_side_chip0_data_port_in[0] ), .CE(\present_state[22] ), 
    .LSR(reset_n_port_c), .CLK(clk_c));
  soc_side_addr_port_22_ \soc_side_addr_port[22]_I ( 
    .PADDI(\soc_side_addr_port_c[22] ), 
    .socsideaddrport22(soc_side_addr_port[22]));
  soc_side_addr_port_21_ \soc_side_addr_port[21]_I ( 
    .PADDI(\soc_side_addr_port_c[21] ), 
    .socsideaddrport21(soc_side_addr_port[21]));
  soc_side_addr_port_20_ \soc_side_addr_port[20]_I ( 
    .PADDI(\soc_side_addr_port_c[20] ), 
    .socsideaddrport20(soc_side_addr_port[20]));
  soc_side_addr_port_19_ \soc_side_addr_port[19]_I ( 
    .PADDI(\soc_side_addr_port_c[19] ), 
    .socsideaddrport19(soc_side_addr_port[19]));
  soc_side_addr_port_18_ \soc_side_addr_port[18]_I ( 
    .PADDI(\soc_side_addr_port_c[18] ), 
    .socsideaddrport18(soc_side_addr_port[18]));
  soc_side_addr_port_17_ \soc_side_addr_port[17]_I ( 
    .PADDI(\soc_side_addr_port_c[17] ), 
    .socsideaddrport17(soc_side_addr_port[17]));
  soc_side_addr_port_16_ \soc_side_addr_port[16]_I ( 
    .PADDI(\soc_side_addr_port_c[16] ), 
    .socsideaddrport16(soc_side_addr_port[16]));
  soc_side_addr_port_15_ \soc_side_addr_port[15]_I ( 
    .PADDI(\soc_side_addr_port_c[15] ), 
    .socsideaddrport15(soc_side_addr_port[15]));
  soc_side_addr_port_14_ \soc_side_addr_port[14]_I ( 
    .PADDI(\soc_side_addr_port_c[14] ), 
    .socsideaddrport14(soc_side_addr_port[14]));
  soc_side_addr_port_13_ \soc_side_addr_port[13]_I ( 
    .PADDI(\soc_side_addr_port_c[13] ), 
    .socsideaddrport13(soc_side_addr_port[13]));
  soc_side_addr_port_12_ \soc_side_addr_port[12]_I ( 
    .PADDI(\soc_side_addr_port_c[12] ), 
    .socsideaddrport12(soc_side_addr_port[12]));
  soc_side_addr_port_11_ \soc_side_addr_port[11]_I ( 
    .PADDI(\soc_side_addr_port_c[11] ), 
    .socsideaddrport11(soc_side_addr_port[11]));
  soc_side_addr_port_10_ \soc_side_addr_port[10]_I ( 
    .PADDI(\soc_side_addr_port_c[10] ), 
    .socsideaddrport10(soc_side_addr_port[10]));
  soc_side_addr_port_9_ \soc_side_addr_port[9]_I ( 
    .PADDI(\soc_side_addr_port_c[9] ), 
    .socsideaddrport9(soc_side_addr_port[9]));
  soc_side_addr_port_8_ \soc_side_addr_port[8]_I ( 
    .PADDI(\soc_side_addr_port_c[8] ), 
    .socsideaddrport8(soc_side_addr_port[8]));
  soc_side_addr_port_7_ \soc_side_addr_port[7]_I ( 
    .PADDI(\soc_side_addr_port_c[7] ), 
    .socsideaddrport7(soc_side_addr_port[7]));
  soc_side_addr_port_6_ \soc_side_addr_port[6]_I ( 
    .PADDI(\soc_side_addr_port_c[6] ), 
    .socsideaddrport6(soc_side_addr_port[6]));
  soc_side_addr_port_5_ \soc_side_addr_port[5]_I ( 
    .PADDI(\soc_side_addr_port_c[5] ), 
    .socsideaddrport5(soc_side_addr_port[5]));
  soc_side_addr_port_4_ \soc_side_addr_port[4]_I ( 
    .PADDI(\soc_side_addr_port_c[4] ), 
    .socsideaddrport4(soc_side_addr_port[4]));
  soc_side_addr_port_3_ \soc_side_addr_port[3]_I ( 
    .PADDI(\soc_side_addr_port_c[3] ), 
    .socsideaddrport3(soc_side_addr_port[3]));
  soc_side_addr_port_2_ \soc_side_addr_port[2]_I ( 
    .PADDI(\soc_side_addr_port_c[2] ), 
    .socsideaddrport2(soc_side_addr_port[2]));
  soc_side_addr_port_1_ \soc_side_addr_port[1]_I ( 
    .PADDI(\soc_side_addr_port_c[1] ), 
    .socsideaddrport1(soc_side_addr_port[1]));
  soc_side_addr_port_0_ \soc_side_addr_port[0]_I ( 
    .PADDI(\soc_side_addr_port_c[0] ), 
    .socsideaddrport0(soc_side_addr_port[0]));
  soc_side_ready_port soc_side_ready_port_I( .PADDO(ready_signal_i_a2), 
    .soc_side_ready_port(soc_side_ready_port));
  reset_n_port reset_n_port_I( .PADDI(reset_n_port_c), 
    .reset_n_port(reset_n_port));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
  GSR GSR_INST( .GSR(VCCI));
endmodule

module SLICE_0 ( input A1, output FCO );
  wire   GNDI;

  ccu2 next_refresh_counter_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module SLICE_1 ( input C1, B1, A1, C0, B0, A0, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \delay_counter[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 un1_delay_counter_16_cry_13_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h50A9;
  defparam inst1.INIT1 = 16'h50A9;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input C1, B1, A1, C0, B0, A0, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \delay_counter[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 un1_delay_counter_16_cry_11_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_3 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_9_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_4 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_7_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_5 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_5_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_6 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \delay_counter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \delay_counter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 un1_delay_counter_16_cry_3_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_7 ( input C1, B1, A1, C0, B0, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20001 un1_delay_counter_16_cry_1_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_8 ( input C1, B1, A1, output FCO );
  wire   GNDI;

  ccu20002 un1_delay_counter_16_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h50A9;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_9 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \refresh_counter[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20003 next_refresh_counter_s_15_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_10 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_13_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_11 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_11_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_12 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_9_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_7_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_14 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_5_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_15 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_3_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \refresh_counter[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \refresh_counter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 next_refresh_counter_cry_1_0( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_17 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut4 \cas_counter_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 \cas_counter_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cas_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC2C6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h545A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_18 ( input B1, A1, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40005 \present_state_srsts_i_0_a2_0[24] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40006 un1_reset_n_port_1_i_a2_i( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0007 \cas_counter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0007 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_19 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40008 \next_command_0_o2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40009 \next_command_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \command[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBA30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module SLICE_20 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 \delay_counter_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \delay_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0301) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_21 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[5] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 \next_delay_counter_f0_0_a2[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0007 \delay_counter[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \delay_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_22 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[7] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \delay_counter_RNO[6] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0007 \delay_counter[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_23 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \delay_counter_RNO[8] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0007 \delay_counter[9] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_24 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40010 \delay_counter_RNO[12] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \delay_counter_RNO[10] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0007 \delay_counter[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0007 \delay_counter[10] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_25 ( input C1, B1, A1, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40013 \next_delay_counter_f0_0_a2_0[2] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \delay_counter_RNO[14] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0007 \delay_counter[14] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_26 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40014 \init_refresh_counter_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40015 \init_refresh_counter_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \init_refresh_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \init_refresh_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4B4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD999) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_27 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40016 \ready_signal_i_a2_0_a2_0_o2_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40017 \init_refresh_counter_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \init_refresh_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_28 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40018 \present_state_srsts_i_i[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \present_state_srsts_0_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0020 \present_state[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F4F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7350) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0020 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vmuxregsre0021 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_29 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \present_state_RNO[3] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \present_state_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_30 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40024 \present_state_srsts_0_a2_0_a2[5] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40023 \present_state_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0021 \present_state[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_31 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40025 \present_state_RNO[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \present_state_RNO[6] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0021 \present_state[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_32 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \present_state_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \present_state_RNO[8] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[9] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_33 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40025 \present_state_RNO[11] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40027 \present_state_RNO[10] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[11] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0021 \present_state[10] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_34 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40025 \present_state_RNO[13] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 \present_state_srsts_i_i_a2[12] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0021 \present_state[13] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[12] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_35 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \present_state_RNO[15] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \present_state_RNO[14] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[15] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[14] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_36 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \present_state_RNO[17] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \present_state_RNO[16] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[17] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[16] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_37 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40023 \present_state_RNO[19] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 \present_state_RNO[18] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[19] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0021 \present_state[18] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_38 ( input B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40029 \present_state_RNO[21] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \present_state_srsts_0_a2_2_a2[20] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0021 \present_state[21] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[20] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_39 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \present_state_RNO[23] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \present_state_srsts_0_a2_0_a2[22] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0021 \present_state[23] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0021 \present_state[22] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_40 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40005 \present_state_srsts_i_0_a2_1[24] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40031 \present_state_RNO[24] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0021 \present_state[24] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_41 ( input D1, C1, B1, A1, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40032 \present_state_srsts_i_a2_5[12] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40033 \refresh_counter_RNO[0] ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \refresh_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0007) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_42 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40034 \command_0io_RNO[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40035 \present_state_RNIK6UPD[13] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1115) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_43 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40036 \next_command_i_0_1[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 \command_0io_RNO[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_44 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40016 un46_0_a2_0_o2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40038 un46_0_a2_0_o2_RNINEOC9( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7F7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_45 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \ram_addr_reg_iv_0[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40040 \ram_addr_reg_iv_0_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_46 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \ram_addr_reg_iv_0[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40040 \ram_addr_reg_iv_0_RNO[5] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_47 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40041 \ram_side_addr_port_pad_RNO[10] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40042 \ram_side_addr_port_pad_RNO_0[10] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFB0B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5757) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_48 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40043 \ram_addr_reg_0_iv_0_o2[1] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 \ram_side_bank_addr_port_pad_RNO[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_49 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40044 \ready_signal_i_a2_0_a2_0_a2_3[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40045 soc_side_busy_port_pad_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_50 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40043 \next_command_i_0_o2[5] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \command_0io_RNO[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0103) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_51 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40047 \present_state_srsts_i_a2[12] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40022 \present_state_srsts_0_a2_0_a2_0[10] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A02) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_52 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40024 \ready_signal_i_a2_0_a2_0_a2_8[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40048 \ready_signal_i_a2_0_a2_0_a2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_53 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40044 \sdram_side_wr_mask_reg_iv_i_a2_0_3[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40049 \sdram_side_wr_mask_reg_iv_i_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0EA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_54 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40030 \sdram_side_wr_mask_reg_iv_i_a2_0_4[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40049 \sdram_side_wr_mask_reg_iv_i_0[1] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_55 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40030 \sdram_side_wr_mask_reg_iv_i_a2_3[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40049 \sdram_side_wr_mask_reg_iv_i_0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_56 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40027 next_state_0_sqmuxa_7_i_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 un1_reset_n_port_3_0_0( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F8F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_57 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40051 \next_command_i_0_o2_0[3] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \next_command_i_0_a2_0[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_58 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40052 un1_next_init_refresh_counter_0_sqmuxa_i_0_a2( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40053 un1_delay_counter_16_axb_0( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE1E1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_59 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40011 \present_state_srsts_i_a2_2[12] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40011 \present_state_srsts_i_a2_0[12] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_60 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40054 \next_delay_counter_f0_i_a2_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40055 un46_0_a2_0_a2( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_61 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40056 un1_next_init_refresh_counter_0_sqmuxa_i_0_o2( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40056 \ram_side_addr_port_2_i_o2_0[10] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_62 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 \sdram_side_wr_mask_reg_iv_i_a2_2[0] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 \ready_signal_i_a2_0_a2_0_a2_5[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_63 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40043 \present_state_RNILLENF[10] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40058 \ram_addr_reg_0_iv_0[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_64 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40029 \present_state_srsts_0_a2_0_a2_1[5] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \present_state_srsts_0_i_0[6] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_65 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40060 \ram_side_addr_port_pad_RNO[9] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40040 \ram_side_addr_port_pad_RNO[11] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_66 ( input B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40051 \present_state_srsts_0_i_o2[6] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \present_state_RNI20RGF[14] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_67 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40058 \ram_addr_reg_0_iv_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \ram_addr_reg_0_iv_0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_68 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40058 \ram_addr_reg_0_iv_0[8] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \ram_addr_reg_0_iv_0[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_69 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40058 \ram_addr_reg_0_iv_0[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 \ram_addr_reg_0_iv_0[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_70 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 un1_next_init_refresh_counter_0_sqmuxa_i_0_a2_0( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \present_state_srsts_0_0_o2[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_71 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40061 \ready_signal_i_a2_0_a2_0_a2_2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40012 \ram_side_bank_addr_port_pad_RNO[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_72 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40044 next_state_0_sqmuxa_7_i_a2_9( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40044 next_state_0_sqmuxa_7_i_a2_10( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_73 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 next_state_0_sqmuxa_7_i_a2_7( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40044 next_state_0_sqmuxa_7_i_a2_8( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_74 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40057 \sdram_side_wr_mask_reg_iv_i_a2_1[0] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40049 \sdram_side_wr_mask_reg_iv_i_0[3] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_75 ( input D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40062 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40044 \present_state_srsts_i_a2_1_0[12] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_76 ( output F0 );
  wire   GNDI;

  lut40063 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ram_side_chip0_data_port_0_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport0 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[0] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport0), .PADI(ramsidechip0dataport0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport0) = (0:0:0,0:0:0);
    (ramsidechip0dataport0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport0, 0:0:0);
    $width (negedge ramsidechip0dataport0, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module soc_side_busy_port ( input PADDO, output soc_side_busy_port );
  wire   GNDI;

  xo2iobuf0064 soc_side_busy_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(soc_side_busy_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => soc_side_busy_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0064 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module clk ( output PADDI, input clk );

  xo2iobuf0065 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module xo2iobuf0065 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module ram_side_ck_en_port ( input PADDO, output ram_side_ck_en_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_ck_en_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_ck_en_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_ck_en_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_wr_en_port ( input IOLDO, output ram_side_wr_en_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_wr_en_port_pad( .I(IOLDO), .T(GNDI), 
    .PAD(ram_side_wr_en_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => ram_side_wr_en_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_wr_en_port_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre \command_0io[3] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3JX INST01( .D(D0), .SP(SP), .CK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module ram_side_cas_n_port ( input IOLDO, output ram_side_cas_n_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_cas_n_port_pad( .I(IOLDO), .T(GNDI), 
    .PAD(ram_side_cas_n_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => ram_side_cas_n_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_cas_n_port_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre \command_0io[4] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ram_side_ras_n_port ( input IOLDO, output ram_side_ras_n_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_ras_n_port_pad( .I(IOLDO), .T(GNDI), 
    .PAD(ram_side_ras_n_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => ram_side_ras_n_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_ras_n_port_MGIOL ( output IOLDO, input OPOS, LSR, CLK );
  wire   VCCI, LSR_NOTIN, OPOS_dly, CLK_dly, LSR_dly;

  mfflsre \command_0io[5] ( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ram_side_cs_n_port ( input PADDO, output ram_side_cs_n_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_cs_n_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_cs_n_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_cs_n_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_15_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport15 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[15] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport15), .PADI(ramsidechip1dataport15));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport15) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport15) = (0:0:0,0:0:0);
    (ramsidechip1dataport15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport15, 0:0:0);
    $width (negedge ramsidechip1dataport15, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_14_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport14 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[14] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport14), .PADI(ramsidechip1dataport14));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport14) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport14) = (0:0:0,0:0:0);
    (ramsidechip1dataport14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport14, 0:0:0);
    $width (negedge ramsidechip1dataport14, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_13_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport13 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[13] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport13), .PADI(ramsidechip1dataport13));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport13) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport13) = (0:0:0,0:0:0);
    (ramsidechip1dataport13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport13, 0:0:0);
    $width (negedge ramsidechip1dataport13, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_12_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport12 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[12] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport12), .PADI(ramsidechip1dataport12));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport12) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport12) = (0:0:0,0:0:0);
    (ramsidechip1dataport12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport12, 0:0:0);
    $width (negedge ramsidechip1dataport12, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_11_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport11 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[11] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport11), .PADI(ramsidechip1dataport11));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport11) = (0:0:0,0:0:0);
    (ramsidechip1dataport11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport11, 0:0:0);
    $width (negedge ramsidechip1dataport11, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_10_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport10 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[10] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport10), .PADI(ramsidechip1dataport10));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport10) = (0:0:0,0:0:0);
    (ramsidechip1dataport10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport10, 0:0:0);
    $width (negedge ramsidechip1dataport10, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_9_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport9 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[9] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport9), .PADI(ramsidechip1dataport9));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport9) = (0:0:0,0:0:0);
    (ramsidechip1dataport9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport9, 0:0:0);
    $width (negedge ramsidechip1dataport9, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_8_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport8 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[8] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport8), .PADI(ramsidechip1dataport8));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport8) = (0:0:0,0:0:0);
    (ramsidechip1dataport8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport8, 0:0:0);
    $width (negedge ramsidechip1dataport8, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_7_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport7 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[7] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport7), .PADI(ramsidechip1dataport7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport7) = (0:0:0,0:0:0);
    (ramsidechip1dataport7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport7, 0:0:0);
    $width (negedge ramsidechip1dataport7, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_6_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport6 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[6] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport6), .PADI(ramsidechip1dataport6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport6) = (0:0:0,0:0:0);
    (ramsidechip1dataport6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport6, 0:0:0);
    $width (negedge ramsidechip1dataport6, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_5_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport5 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[5] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport5), .PADI(ramsidechip1dataport5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport5) = (0:0:0,0:0:0);
    (ramsidechip1dataport5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport5, 0:0:0);
    $width (negedge ramsidechip1dataport5, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_4_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport4 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[4] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport4), .PADI(ramsidechip1dataport4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport4) = (0:0:0,0:0:0);
    (ramsidechip1dataport4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport4, 0:0:0);
    $width (negedge ramsidechip1dataport4, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_3_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport3 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[3] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport3), .PADI(ramsidechip1dataport3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport3) = (0:0:0,0:0:0);
    (ramsidechip1dataport3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport3, 0:0:0);
    $width (negedge ramsidechip1dataport3, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_2_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport2 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[2] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport2), .PADI(ramsidechip1dataport2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport2) = (0:0:0,0:0:0);
    (ramsidechip1dataport2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport2, 0:0:0);
    $width (negedge ramsidechip1dataport2, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_1_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport1 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[1] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport1), .PADI(ramsidechip1dataport1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport1) = (0:0:0,0:0:0);
    (ramsidechip1dataport1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport1, 0:0:0);
    $width (negedge ramsidechip1dataport1, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_data_port_0_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip1dataport0 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip1_data_port_pad[0] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip1dataport0), .PADI(ramsidechip1dataport0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip1dataport0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip1dataport0) = (0:0:0,0:0:0);
    (ramsidechip1dataport0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip1dataport0, 0:0:0);
    $width (negedge ramsidechip1dataport0, 0:0:0);
  endspecify

endmodule

module ram_side_chip1_udqm_port ( input PADDO, output ram_side_chip1_udqm_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_chip1_udqm_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip1_udqm_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip1_udqm_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip1_ldqm_port ( input PADDO, output ram_side_chip1_ldqm_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_chip1_ldqm_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip1_ldqm_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip1_ldqm_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_15_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport15 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[15] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport15), .PADI(ramsidechip0dataport15));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport15) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport15) = (0:0:0,0:0:0);
    (ramsidechip0dataport15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport15, 0:0:0);
    $width (negedge ramsidechip0dataport15, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_14_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport14 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[14] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport14), .PADI(ramsidechip0dataport14));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport14) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport14) = (0:0:0,0:0:0);
    (ramsidechip0dataport14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport14, 0:0:0);
    $width (negedge ramsidechip0dataport14, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_13_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport13 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[13] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport13), .PADI(ramsidechip0dataport13));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport13) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport13) = (0:0:0,0:0:0);
    (ramsidechip0dataport13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport13, 0:0:0);
    $width (negedge ramsidechip0dataport13, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_12_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport12 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[12] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport12), .PADI(ramsidechip0dataport12));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport12) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport12) = (0:0:0,0:0:0);
    (ramsidechip0dataport12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport12, 0:0:0);
    $width (negedge ramsidechip0dataport12, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_11_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport11 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[11] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport11), .PADI(ramsidechip0dataport11));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport11) = (0:0:0,0:0:0);
    (ramsidechip0dataport11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport11, 0:0:0);
    $width (negedge ramsidechip0dataport11, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_10_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport10 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[10] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport10), .PADI(ramsidechip0dataport10));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport10) = (0:0:0,0:0:0);
    (ramsidechip0dataport10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport10, 0:0:0);
    $width (negedge ramsidechip0dataport10, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_9_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport9 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[9] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport9), .PADI(ramsidechip0dataport9));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport9) = (0:0:0,0:0:0);
    (ramsidechip0dataport9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport9, 0:0:0);
    $width (negedge ramsidechip0dataport9, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_8_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport8 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[8] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport8), .PADI(ramsidechip0dataport8));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport8) = (0:0:0,0:0:0);
    (ramsidechip0dataport8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport8, 0:0:0);
    $width (negedge ramsidechip0dataport8, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_7_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport7 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[7] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport7), .PADI(ramsidechip0dataport7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport7) = (0:0:0,0:0:0);
    (ramsidechip0dataport7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport7, 0:0:0);
    $width (negedge ramsidechip0dataport7, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_6_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport6 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[6] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport6), .PADI(ramsidechip0dataport6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport6) = (0:0:0,0:0:0);
    (ramsidechip0dataport6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport6, 0:0:0);
    $width (negedge ramsidechip0dataport6, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_5_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport5 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[5] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport5), .PADI(ramsidechip0dataport5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport5) = (0:0:0,0:0:0);
    (ramsidechip0dataport5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport5, 0:0:0);
    $width (negedge ramsidechip0dataport5, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_4_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport4 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[4] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport4), .PADI(ramsidechip0dataport4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport4) = (0:0:0,0:0:0);
    (ramsidechip0dataport4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport4, 0:0:0);
    $width (negedge ramsidechip0dataport4, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_3_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport3 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[3] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport3), .PADI(ramsidechip0dataport3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport3) = (0:0:0,0:0:0);
    (ramsidechip0dataport3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport3, 0:0:0);
    $width (negedge ramsidechip0dataport3, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_2_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport2 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[2] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport2), .PADI(ramsidechip0dataport2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport2) = (0:0:0,0:0:0);
    (ramsidechip0dataport2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport2, 0:0:0);
    $width (negedge ramsidechip0dataport2, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_data_port_1_ ( output PADDI, input PADDT, PADDO, inout 
    ramsidechip0dataport1 );
  wire   PADDT_NOTIN;

  xo2iobuf \ram_side_chip0_data_port_pad[1] ( .I(PADDO), .T(PADDT_NOTIN), 
    .Z(PADDI), .PAD(ramsidechip0dataport1), .PADI(ramsidechip0dataport1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => ramsidechip0dataport1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ramsidechip0dataport1) = (0:0:0,0:0:0);
    (ramsidechip0dataport1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ramsidechip0dataport1, 0:0:0);
    $width (negedge ramsidechip0dataport1, 0:0:0);
  endspecify

endmodule

module ram_side_chip0_udqm_port ( input PADDO, output ram_side_chip0_udqm_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_chip0_udqm_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip0_udqm_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip0_udqm_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_chip0_ldqm_port ( input PADDO, output ram_side_chip0_ldqm_port );
  wire   GNDI;

  xo2iobuf0064 ram_side_chip0_ldqm_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(ram_side_chip0_ldqm_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ram_side_chip0_ldqm_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_bank_addr_port_1_ ( input PADDO, output ramsidebankaddrport1 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_bank_addr_port_pad[1] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsidebankaddrport1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsidebankaddrport1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_bank_addr_port_0_ ( input PADDO, output ramsidebankaddrport0 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_bank_addr_port_pad[0] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsidebankaddrport0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsidebankaddrport0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_11_ ( input PADDO, output ramsideaddrport11 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[11] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport11) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_10_ ( input PADDO, output ramsideaddrport10 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[10] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport10) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_9_ ( input PADDO, output ramsideaddrport9 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[9] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport9) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_8_ ( input PADDO, output ramsideaddrport8 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[8] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport8) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_7_ ( input PADDO, output ramsideaddrport7 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[7] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport7) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_6_ ( input PADDO, output ramsideaddrport6 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[6] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport6) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_5_ ( input PADDO, output ramsideaddrport5 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[5] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport5) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_4_ ( input PADDO, output ramsideaddrport4 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[4] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport4) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_3_ ( input PADDO, output ramsideaddrport3 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[3] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport3) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_2_ ( input PADDO, output ramsideaddrport2 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[2] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport2) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_1_ ( input PADDO, output ramsideaddrport1 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[1] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ram_side_addr_port_0_ ( input PADDO, output ramsideaddrport0 );
  wire   GNDI;

  xo2iobuf0064 \ram_side_addr_port_pad[0] ( .I(PADDO), .T(GNDI), 
    .PAD(ramsideaddrport0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ramsideaddrport0) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_wr_en_port ( output PADDI, input soc_side_wr_en_port );

  xo2iobuf0066 soc_side_wr_en_port_pad( .Z(PADDI), .PAD(soc_side_wr_en_port));

  specify
    (soc_side_wr_en_port => PADDI) = (0:0:0,0:0:0);
    $width (posedge soc_side_wr_en_port, 0:0:0);
    $width (negedge soc_side_wr_en_port, 0:0:0);
  endspecify

endmodule

module xo2iobuf0066 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module soc_side_wr_mask_port_3_ ( output PADDI, input socsidewrmaskport3 );

  xo2iobuf0066 \soc_side_wr_mask_port_pad[3] ( .Z(PADDI), 
    .PAD(socsidewrmaskport3));

  specify
    (socsidewrmaskport3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskport3, 0:0:0);
    $width (negedge socsidewrmaskport3, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_port_2_ ( output PADDI, input socsidewrmaskport2 );

  xo2iobuf0066 \soc_side_wr_mask_port_pad[2] ( .Z(PADDI), 
    .PAD(socsidewrmaskport2));

  specify
    (socsidewrmaskport2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskport2, 0:0:0);
    $width (negedge socsidewrmaskport2, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_port_1_ ( output PADDI, input socsidewrmaskport1 );

  xo2iobuf0066 \soc_side_wr_mask_port_pad[1] ( .Z(PADDI), 
    .PAD(socsidewrmaskport1));

  specify
    (socsidewrmaskport1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskport1, 0:0:0);
    $width (negedge socsidewrmaskport1, 0:0:0);
  endspecify

endmodule

module soc_side_wr_mask_port_0_ ( output PADDI, input socsidewrmaskport0 );

  xo2iobuf0066 \soc_side_wr_mask_port_pad[0] ( .Z(PADDI), 
    .PAD(socsidewrmaskport0));

  specify
    (socsidewrmaskport0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrmaskport0, 0:0:0);
    $width (negedge socsidewrmaskport0, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_31_ ( output PADDI, input socsidewrdataport31 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[31] ( .Z(PADDI), 
    .PAD(socsidewrdataport31));

  specify
    (socsidewrdataport31 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport31, 0:0:0);
    $width (negedge socsidewrdataport31, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_31__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[31] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3IX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module soc_side_wr_data_port_30_ ( output PADDI, input socsidewrdataport30 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[30] ( .Z(PADDI), 
    .PAD(socsidewrdataport30));

  specify
    (socsidewrdataport30 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport30, 0:0:0);
    $width (negedge socsidewrdataport30, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_30__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[30] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_29_ ( output PADDI, input socsidewrdataport29 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[29] ( .Z(PADDI), 
    .PAD(socsidewrdataport29));

  specify
    (socsidewrdataport29 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport29, 0:0:0);
    $width (negedge socsidewrdataport29, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_29__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[29] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_28_ ( output PADDI, input socsidewrdataport28 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[28] ( .Z(PADDI), 
    .PAD(socsidewrdataport28));

  specify
    (socsidewrdataport28 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport28, 0:0:0);
    $width (negedge socsidewrdataport28, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_28__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[28] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_27_ ( output PADDI, input socsidewrdataport27 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[27] ( .Z(PADDI), 
    .PAD(socsidewrdataport27));

  specify
    (socsidewrdataport27 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport27, 0:0:0);
    $width (negedge socsidewrdataport27, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_27__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[27] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_26_ ( output PADDI, input socsidewrdataport26 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[26] ( .Z(PADDI), 
    .PAD(socsidewrdataport26));

  specify
    (socsidewrdataport26 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport26, 0:0:0);
    $width (negedge socsidewrdataport26, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_26__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[26] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_25_ ( output PADDI, input socsidewrdataport25 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[25] ( .Z(PADDI), 
    .PAD(socsidewrdataport25));

  specify
    (socsidewrdataport25 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport25, 0:0:0);
    $width (negedge socsidewrdataport25, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_25__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[25] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_24_ ( output PADDI, input socsidewrdataport24 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[24] ( .Z(PADDI), 
    .PAD(socsidewrdataport24));

  specify
    (socsidewrdataport24 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport24, 0:0:0);
    $width (negedge socsidewrdataport24, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_24__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[24] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_23_ ( output PADDI, input socsidewrdataport23 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[23] ( .Z(PADDI), 
    .PAD(socsidewrdataport23));

  specify
    (socsidewrdataport23 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport23, 0:0:0);
    $width (negedge socsidewrdataport23, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_23__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[23] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_22_ ( output PADDI, input socsidewrdataport22 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[22] ( .Z(PADDI), 
    .PAD(socsidewrdataport22));

  specify
    (socsidewrdataport22 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport22, 0:0:0);
    $width (negedge socsidewrdataport22, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_22__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[22] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_21_ ( output PADDI, input socsidewrdataport21 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[21] ( .Z(PADDI), 
    .PAD(socsidewrdataport21));

  specify
    (socsidewrdataport21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport21, 0:0:0);
    $width (negedge socsidewrdataport21, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_21__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[21] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_20_ ( output PADDI, input socsidewrdataport20 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[20] ( .Z(PADDI), 
    .PAD(socsidewrdataport20));

  specify
    (socsidewrdataport20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport20, 0:0:0);
    $width (negedge socsidewrdataport20, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_20__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[20] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_19_ ( output PADDI, input socsidewrdataport19 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[19] ( .Z(PADDI), 
    .PAD(socsidewrdataport19));

  specify
    (socsidewrdataport19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport19, 0:0:0);
    $width (negedge socsidewrdataport19, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_19__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[19] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_18_ ( output PADDI, input socsidewrdataport18 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[18] ( .Z(PADDI), 
    .PAD(socsidewrdataport18));

  specify
    (socsidewrdataport18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport18, 0:0:0);
    $width (negedge socsidewrdataport18, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_18__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[18] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_17_ ( output PADDI, input socsidewrdataport17 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[17] ( .Z(PADDI), 
    .PAD(socsidewrdataport17));

  specify
    (socsidewrdataport17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport17, 0:0:0);
    $width (negedge socsidewrdataport17, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_17__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[17] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_16_ ( output PADDI, input socsidewrdataport16 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[16] ( .Z(PADDI), 
    .PAD(socsidewrdataport16));

  specify
    (socsidewrdataport16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport16, 0:0:0);
    $width (negedge socsidewrdataport16, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_16__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[16] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_15_ ( output PADDI, input socsidewrdataport15 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[15] ( .Z(PADDI), 
    .PAD(socsidewrdataport15));

  specify
    (socsidewrdataport15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport15, 0:0:0);
    $width (negedge socsidewrdataport15, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_15__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_14_ ( output PADDI, input socsidewrdataport14 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[14] ( .Z(PADDI), 
    .PAD(socsidewrdataport14));

  specify
    (socsidewrdataport14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport14, 0:0:0);
    $width (negedge socsidewrdataport14, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_14__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_13_ ( output PADDI, input socsidewrdataport13 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[13] ( .Z(PADDI), 
    .PAD(socsidewrdataport13));

  specify
    (socsidewrdataport13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport13, 0:0:0);
    $width (negedge socsidewrdataport13, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_13__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_12_ ( output PADDI, input socsidewrdataport12 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[12] ( .Z(PADDI), 
    .PAD(socsidewrdataport12));

  specify
    (socsidewrdataport12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport12, 0:0:0);
    $width (negedge socsidewrdataport12, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_12__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_11_ ( output PADDI, input socsidewrdataport11 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[11] ( .Z(PADDI), 
    .PAD(socsidewrdataport11));

  specify
    (socsidewrdataport11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport11, 0:0:0);
    $width (negedge socsidewrdataport11, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_11__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_10_ ( output PADDI, input socsidewrdataport10 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[10] ( .Z(PADDI), 
    .PAD(socsidewrdataport10));

  specify
    (socsidewrdataport10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport10, 0:0:0);
    $width (negedge socsidewrdataport10, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_10__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_9_ ( output PADDI, input socsidewrdataport9 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[9] ( .Z(PADDI), 
    .PAD(socsidewrdataport9));

  specify
    (socsidewrdataport9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport9, 0:0:0);
    $width (negedge socsidewrdataport9, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_9__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_8_ ( output PADDI, input socsidewrdataport8 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[8] ( .Z(PADDI), 
    .PAD(socsidewrdataport8));

  specify
    (socsidewrdataport8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport8, 0:0:0);
    $width (negedge socsidewrdataport8, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_8__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_7_ ( output PADDI, input socsidewrdataport7 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[7] ( .Z(PADDI), 
    .PAD(socsidewrdataport7));

  specify
    (socsidewrdataport7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport7, 0:0:0);
    $width (negedge socsidewrdataport7, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_7__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_6_ ( output PADDI, input socsidewrdataport6 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[6] ( .Z(PADDI), 
    .PAD(socsidewrdataport6));

  specify
    (socsidewrdataport6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport6, 0:0:0);
    $width (negedge socsidewrdataport6, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_6__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_5_ ( output PADDI, input socsidewrdataport5 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[5] ( .Z(PADDI), 
    .PAD(socsidewrdataport5));

  specify
    (socsidewrdataport5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport5, 0:0:0);
    $width (negedge socsidewrdataport5, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_5__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_4_ ( output PADDI, input socsidewrdataport4 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[4] ( .Z(PADDI), 
    .PAD(socsidewrdataport4));

  specify
    (socsidewrdataport4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport4, 0:0:0);
    $width (negedge socsidewrdataport4, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_4__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_3_ ( output PADDI, input socsidewrdataport3 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[3] ( .Z(PADDI), 
    .PAD(socsidewrdataport3));

  specify
    (socsidewrdataport3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport3, 0:0:0);
    $width (negedge socsidewrdataport3, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_3__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_2_ ( output PADDI, input socsidewrdataport2 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[2] ( .Z(PADDI), 
    .PAD(socsidewrdataport2));

  specify
    (socsidewrdataport2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport2, 0:0:0);
    $width (negedge socsidewrdataport2, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_2__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_1_ ( output PADDI, input socsidewrdataport1 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[1] ( .Z(PADDI), 
    .PAD(socsidewrdataport1));

  specify
    (socsidewrdataport1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport1, 0:0:0);
    $width (negedge socsidewrdataport1, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_1__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_0_ ( output PADDI, input socsidewrdataport0 );

  xo2iobuf0066 \soc_side_wr_data_port_pad[0] ( .Z(PADDI), 
    .PAD(socsidewrdataport0));

  specify
    (socsidewrdataport0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsidewrdataport0, 0:0:0);
    $width (negedge socsidewrdataport0, 0:0:0);
  endspecify

endmodule

module soc_side_wr_data_port_0__MGIOL ( input DI, CE, LSR, CLK, output IN );
  wire   LSR_NOTIN, DI_dly, CLK_dly, CE_dly, LSR_dly;

  smuxlregsre \wr_data_reg_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IN));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_en_port ( output PADDI, input soc_side_rd_en_port );

  xo2iobuf0066 soc_side_rd_en_port_pad( .Z(PADDI), .PAD(soc_side_rd_en_port));

  specify
    (soc_side_rd_en_port => PADDI) = (0:0:0,0:0:0);
    $width (posedge soc_side_rd_en_port, 0:0:0);
    $width (negedge soc_side_rd_en_port, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_31_ ( input IOLDO, output socsiderddataport31 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[31] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport31));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport31) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_31__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[31] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre0067 ( input D0, SP, CK, LSR, output Q );

  FD1P3IX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module soc_side_rd_data_port_30_ ( input IOLDO, output socsiderddataport30 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[30] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport30));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport30) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_30__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[30] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_29_ ( input IOLDO, output socsiderddataport29 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[29] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport29));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport29) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_29__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[29] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_28_ ( input IOLDO, output socsiderddataport28 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[28] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport28));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport28) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_28__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[28] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_27_ ( input IOLDO, output socsiderddataport27 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[27] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport27));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport27) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_27__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[27] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_26_ ( input IOLDO, output socsiderddataport26 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[26] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport26));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport26) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_26__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[26] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_25_ ( input IOLDO, output socsiderddataport25 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[25] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport25));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport25) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_25__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[25] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_24_ ( input IOLDO, output socsiderddataport24 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[24] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport24));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport24) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_24__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[24] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_23_ ( input IOLDO, output socsiderddataport23 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[23] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport23));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport23) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_23__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[23] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_22_ ( input IOLDO, output socsiderddataport22 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[22] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport22));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport22) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_22__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[22] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_21_ ( input IOLDO, output socsiderddataport21 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[21] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport21));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport21) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_21__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[21] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_20_ ( input IOLDO, output socsiderddataport20 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[20] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport20));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport20) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_20__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[20] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_19_ ( input IOLDO, output socsiderddataport19 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[19] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport19));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport19) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_19__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[19] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_18_ ( input IOLDO, output socsiderddataport18 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[18] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport18));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport18) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_18__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[18] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_17_ ( input IOLDO, output socsiderddataport17 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[17] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport17));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport17) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_17__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[17] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_16_ ( input IOLDO, output socsiderddataport16 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[16] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport16));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport16) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_16__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[16] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_15_ ( input IOLDO, output socsiderddataport15 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[15] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport15) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_15__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[15] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_14_ ( input IOLDO, output socsiderddataport14 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[14] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport14));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport14) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_14__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[14] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_13_ ( input IOLDO, output socsiderddataport13 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[13] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport13) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_13__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[13] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_12_ ( input IOLDO, output socsiderddataport12 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[12] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport12) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_12__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[12] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_11_ ( input IOLDO, output socsiderddataport11 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[11] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport11) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_11__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[11] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_10_ ( input IOLDO, output socsiderddataport10 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[10] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport10) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_10__MGIOL ( output IOLDO, input OPOS, CE, LSR, 
    CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[10] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_9_ ( input IOLDO, output socsiderddataport9 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[9] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport9) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_9__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[9] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_8_ ( input IOLDO, output socsiderddataport8 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[8] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport8) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_8__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[8] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_7_ ( input IOLDO, output socsiderddataport7 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[7] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport7) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_7__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[7] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_6_ ( input IOLDO, output socsiderddataport6 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[6] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport6) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_6__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[6] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_5_ ( input IOLDO, output socsiderddataport5 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[5] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport5) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_5__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[5] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_4_ ( input IOLDO, output socsiderddataport4 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[4] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport4) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_4__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[4] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_3_ ( input IOLDO, output socsiderddataport3 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[3] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport3) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_3__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[3] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_2_ ( input IOLDO, output socsiderddataport2 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[2] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport2) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_2__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[2] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_1_ ( input IOLDO, output socsiderddataport1 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[1] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport1) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_1__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[1] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_0_ ( input IOLDO, output socsiderddataport0 );
  wire   GNDI;

  xo2iobuf0064 \soc_side_rd_data_port_pad[0] ( .I(IOLDO), .T(GNDI), 
    .PAD(socsiderddataport0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => socsiderddataport0) = (0:0:0,0:0:0);
  endspecify

endmodule

module soc_side_rd_data_port_0__MGIOL ( output IOLDO, input OPOS, CE, LSR, CLK );
  wire   LSR_NOTIN, OPOS_dly, CLK_dly, CE_dly, LSR_dly;

  mfflsre0067 \rd_data_reg_0io[0] ( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_NOTIN), .Q(IOLDO));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_22_ ( output PADDI, input socsideaddrport22 );

  xo2iobuf0066 \soc_side_addr_port_pad[22] ( .Z(PADDI), 
    .PAD(socsideaddrport22));

  specify
    (socsideaddrport22 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport22, 0:0:0);
    $width (negedge socsideaddrport22, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_21_ ( output PADDI, input socsideaddrport21 );

  xo2iobuf0066 \soc_side_addr_port_pad[21] ( .Z(PADDI), 
    .PAD(socsideaddrport21));

  specify
    (socsideaddrport21 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport21, 0:0:0);
    $width (negedge socsideaddrport21, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_20_ ( output PADDI, input socsideaddrport20 );

  xo2iobuf0066 \soc_side_addr_port_pad[20] ( .Z(PADDI), 
    .PAD(socsideaddrport20));

  specify
    (socsideaddrport20 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport20, 0:0:0);
    $width (negedge socsideaddrport20, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_19_ ( output PADDI, input socsideaddrport19 );

  xo2iobuf0066 \soc_side_addr_port_pad[19] ( .Z(PADDI), 
    .PAD(socsideaddrport19));

  specify
    (socsideaddrport19 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport19, 0:0:0);
    $width (negedge socsideaddrport19, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_18_ ( output PADDI, input socsideaddrport18 );

  xo2iobuf0066 \soc_side_addr_port_pad[18] ( .Z(PADDI), 
    .PAD(socsideaddrport18));

  specify
    (socsideaddrport18 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport18, 0:0:0);
    $width (negedge socsideaddrport18, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_17_ ( output PADDI, input socsideaddrport17 );

  xo2iobuf0066 \soc_side_addr_port_pad[17] ( .Z(PADDI), 
    .PAD(socsideaddrport17));

  specify
    (socsideaddrport17 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport17, 0:0:0);
    $width (negedge socsideaddrport17, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_16_ ( output PADDI, input socsideaddrport16 );

  xo2iobuf0066 \soc_side_addr_port_pad[16] ( .Z(PADDI), 
    .PAD(socsideaddrport16));

  specify
    (socsideaddrport16 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport16, 0:0:0);
    $width (negedge socsideaddrport16, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_15_ ( output PADDI, input socsideaddrport15 );

  xo2iobuf0066 \soc_side_addr_port_pad[15] ( .Z(PADDI), 
    .PAD(socsideaddrport15));

  specify
    (socsideaddrport15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport15, 0:0:0);
    $width (negedge socsideaddrport15, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_14_ ( output PADDI, input socsideaddrport14 );

  xo2iobuf0066 \soc_side_addr_port_pad[14] ( .Z(PADDI), 
    .PAD(socsideaddrport14));

  specify
    (socsideaddrport14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport14, 0:0:0);
    $width (negedge socsideaddrport14, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_13_ ( output PADDI, input socsideaddrport13 );

  xo2iobuf0066 \soc_side_addr_port_pad[13] ( .Z(PADDI), 
    .PAD(socsideaddrport13));

  specify
    (socsideaddrport13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport13, 0:0:0);
    $width (negedge socsideaddrport13, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_12_ ( output PADDI, input socsideaddrport12 );

  xo2iobuf0066 \soc_side_addr_port_pad[12] ( .Z(PADDI), 
    .PAD(socsideaddrport12));

  specify
    (socsideaddrport12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport12, 0:0:0);
    $width (negedge socsideaddrport12, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_11_ ( output PADDI, input socsideaddrport11 );

  xo2iobuf0066 \soc_side_addr_port_pad[11] ( .Z(PADDI), 
    .PAD(socsideaddrport11));

  specify
    (socsideaddrport11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport11, 0:0:0);
    $width (negedge socsideaddrport11, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_10_ ( output PADDI, input socsideaddrport10 );

  xo2iobuf0066 \soc_side_addr_port_pad[10] ( .Z(PADDI), 
    .PAD(socsideaddrport10));

  specify
    (socsideaddrport10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport10, 0:0:0);
    $width (negedge socsideaddrport10, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_9_ ( output PADDI, input socsideaddrport9 );

  xo2iobuf0066 \soc_side_addr_port_pad[9] ( .Z(PADDI), .PAD(socsideaddrport9));

  specify
    (socsideaddrport9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport9, 0:0:0);
    $width (negedge socsideaddrport9, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_8_ ( output PADDI, input socsideaddrport8 );

  xo2iobuf0066 \soc_side_addr_port_pad[8] ( .Z(PADDI), .PAD(socsideaddrport8));

  specify
    (socsideaddrport8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport8, 0:0:0);
    $width (negedge socsideaddrport8, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_7_ ( output PADDI, input socsideaddrport7 );

  xo2iobuf0066 \soc_side_addr_port_pad[7] ( .Z(PADDI), .PAD(socsideaddrport7));

  specify
    (socsideaddrport7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport7, 0:0:0);
    $width (negedge socsideaddrport7, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_6_ ( output PADDI, input socsideaddrport6 );

  xo2iobuf0066 \soc_side_addr_port_pad[6] ( .Z(PADDI), .PAD(socsideaddrport6));

  specify
    (socsideaddrport6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport6, 0:0:0);
    $width (negedge socsideaddrport6, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_5_ ( output PADDI, input socsideaddrport5 );

  xo2iobuf0066 \soc_side_addr_port_pad[5] ( .Z(PADDI), .PAD(socsideaddrport5));

  specify
    (socsideaddrport5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport5, 0:0:0);
    $width (negedge socsideaddrport5, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_4_ ( output PADDI, input socsideaddrport4 );

  xo2iobuf0066 \soc_side_addr_port_pad[4] ( .Z(PADDI), .PAD(socsideaddrport4));

  specify
    (socsideaddrport4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport4, 0:0:0);
    $width (negedge socsideaddrport4, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_3_ ( output PADDI, input socsideaddrport3 );

  xo2iobuf0066 \soc_side_addr_port_pad[3] ( .Z(PADDI), .PAD(socsideaddrport3));

  specify
    (socsideaddrport3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport3, 0:0:0);
    $width (negedge socsideaddrport3, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_2_ ( output PADDI, input socsideaddrport2 );

  xo2iobuf0066 \soc_side_addr_port_pad[2] ( .Z(PADDI), .PAD(socsideaddrport2));

  specify
    (socsideaddrport2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport2, 0:0:0);
    $width (negedge socsideaddrport2, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_1_ ( output PADDI, input socsideaddrport1 );

  xo2iobuf0066 \soc_side_addr_port_pad[1] ( .Z(PADDI), .PAD(socsideaddrport1));

  specify
    (socsideaddrport1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport1, 0:0:0);
    $width (negedge socsideaddrport1, 0:0:0);
  endspecify

endmodule

module soc_side_addr_port_0_ ( output PADDI, input socsideaddrport0 );

  xo2iobuf0066 \soc_side_addr_port_pad[0] ( .Z(PADDI), .PAD(socsideaddrport0));

  specify
    (socsideaddrport0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge socsideaddrport0, 0:0:0);
    $width (negedge socsideaddrport0, 0:0:0);
  endspecify

endmodule

module soc_side_ready_port ( input PADDO, output soc_side_ready_port );
  wire   GNDI;

  xo2iobuf0064 soc_side_ready_port_pad( .I(PADDO), .T(GNDI), 
    .PAD(soc_side_ready_port));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => soc_side_ready_port) = (0:0:0,0:0:0);
  endspecify

endmodule

module reset_n_port ( output PADDI, input reset_n_port );

  xo2iobuf0066 reset_n_port_pad( .Z(PADDI), .PAD(reset_n_port));

  specify
    (reset_n_port => PADDI) = (0:0:0,0:0:0);
    $width (posedge reset_n_port, 0:0:0);
    $width (negedge reset_n_port, 0:0:0);
  endspecify

endmodule
